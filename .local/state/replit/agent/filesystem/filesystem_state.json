{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nChironIQ is a comprehensive healthcare practice management platform designed for UK medical practices. The application serves as a unified system that addresses multiple operational aspects of healthcare practice management, including CQC compliance tracking, HR management, secure internal messaging, financial management with UK-specific features, inventory management, and facilities management.\n\nThe platform is built as a multi-tenant system with strict data segregation by practice, ensuring that users from different medical practices can never access each other's data. It includes specialized modules for different aspects of practice management, each with its own dedicated functionality and user interface.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n\nThe frontend is built using React with TypeScript and Vite as the build tool. The application uses a single-page application (SPA) architecture with client-side routing managed by the wouter library. The UI is styled with Tailwind CSS and uses shadcn/ui components for consistent design patterns.\n\nThe frontend follows a modular approach where each practice management module (CQC, HR, Messaging, Money, Stock, Facilities) has its own dedicated page component. State management is handled through TanStack Query for server state and React hooks for local component state.\n\nThe application implements a responsive design that adapts to both desktop and mobile viewports, with specific mobile-friendly components and layouts.\n\n## Backend Architecture\n\nThe backend uses Node.js with Express.js following a RESTful API design. The server implements middleware for request logging, error handling, and CORS support. API routes are organized by module functionality with consistent REST patterns.\n\nThe backend includes WebSocket support for real-time features, particularly for the messaging module. WebSocket connections are managed with automatic reconnection and connection state tracking.\n\nAuthentication and authorization are implemented using session-based authentication with bcrypt for password hashing. The system supports role-based access control with three user roles: staff, poweruser, and user.\n\n## Data Storage Architecture\n\nThe application uses PostgreSQL as the primary database with Drizzle ORM for type-safe database operations. The database schema is designed with multi-tenancy in mind, where all data tables include practice-specific identifiers to ensure data isolation.\n\nDatabase migrations are managed through Drizzle Kit, allowing for version-controlled schema changes. The storage layer implements an abstraction pattern that allows for both in-memory development storage and production database implementations.\n\n## Multi-Tenancy and Security\n\nAll data access is strictly partitioned by practice ID, ensuring complete data isolation between different medical practices. This is enforced at both the API level and database query level.\n\nThe messaging module includes an AI Safety Net system that analyzes message content for potential patient information before allowing messages to be saved or transmitted. This implements healthcare-specific compliance requirements.\n\n## Real-Time Communication\n\nWebSocket implementation provides real-time messaging capabilities with automatic reconnection logic and exponential backoff for connection failures. The system maintains client state and handles connection lifecycle events properly.\n\n## UK Healthcare Compliance\n\nThe system is designed with UK healthcare regulations in mind, including integration capabilities for:\n- CQC compliance tracking and automated updates\n- HMRC Making Tax Digital (MTD) integration for VAT returns\n- Open Banking integration for automated financial data import\n- Jurisdictional tax calculation rules engine\n\n# External Dependencies\n\n## Database Services\n- PostgreSQL database (configured via DATABASE_URL environment variable)\n- Neon Database serverless driver for cloud database connectivity\n\n## Authentication & Session Management\n- Passport.js with local strategy for authentication\n- Express-session for session management\n- bcrypt for secure password hashing\n- connect-pg-simple for PostgreSQL session storage\n\n## UI Component Libraries\n- Radix UI components for accessible, unstyled UI primitives\n- Tailwind CSS for utility-first styling\n- Lucide React for consistent iconography\n- shadcn/ui for pre-styled component library\n\n## Form Handling & Validation\n- React Hook Form for form state management\n- Zod for runtime type validation and schema definition\n- Hookform resolvers for integration between React Hook Form and Zod\n\n## Data Fetching & State Management\n- TanStack Query for server state management, caching, and synchronization\n- Built-in React hooks for local component state\n\n## Development & Build Tools\n- Vite for fast development server and optimized production builds\n- TypeScript for static type checking\n- ESBuild for backend bundling in production\n\n## WebSocket Communication\n- ws library for WebSocket server implementation\n- Custom WebSocket client with reconnection logic\n\n## Date & Time Utilities\n- date-fns for date manipulation and formatting\n\n## UK-Specific Integrations (Planned)\n- Open Banking API providers (Plaid, TrueLayer) for bank account connectivity\n- HMRC MTD APIs for tax return submissions\n- CQC guidance monitoring systems","size_bytes":5421},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      fontFamily: {\n        inter: [\"Inter\", \"sans-serif\"],\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      colors: {\n        'chiron-blue': 'var(--chiron-blue)',\n        'chiron-orange': 'var(--chiron-orange)',\n        'medical-green': 'var(--medical-green)',\n        'clinical-gray': 'var(--clinical-gray)',\n        'alert-red': 'var(--alert-red)',\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3028},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 80 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '80', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2062},"server/routes.ts":{"content":"import { response, type Express } from \"express\";\nimport { pbkdf2Sync, randomBytes, timingSafeEqual } from \"crypto\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport { storage } from \"./storage\";\nimport {\n  User,\n  insertStaffSchema,\n  insertMessageSchema,\n  insertTransactionSchema,\n  insertInvoiceSchema,\n  insertPurchaseSchema,\n  insertConversationSchema,\n  InsertUser,\n  InsertPerson,\n  insertPersonSchema,\n  insertUserSchema,\n  Conversation,\n  InsertConversation,\n  conversations,\n  people,\n  insertRotaSchema,\n} from \"@shared/schema\";\nimport { generateToken } from \"@/lib/utils\";\nimport { z } from \"zod\";\nimport { generateHealthcareResponse } from \"./ai-service\";\nimport { title } from \"process\";\nimport { log } from \"./vite\";\nimport { db, verifyConnection } from \"@shared/index\";\nimport { ObjectStorageService, ObjectNotFoundError } from \"./objectStorage\";\nimport { ObjectPermission } from \"./objectAcl\";\nimport { Cookie } from \"lucide-react\";\n\n// AI Safety Net - Mock implementation for MVP\nasync function analyzeMessageForPII(\n  content: string,\n): Promise<{ safe: boolean; reason?: string }> {\n  // Simple keyword detection - in production this would use a proper AI service\n  const piiKeywords = [\n    \"nhs number\",\n    \"date of birth\",\n    \"dob\",\n    \"postcode\",\n    \"address\",\n    \"medical record\",\n    \"patient id\",\n    \"diagnosis\",\n    \"prescription\",\n    \"blood pressure\",\n    \"test results\",\n    \"medication\",\n    \"treatment\",\n  ];\n\n  const lowerContent = content.toLowerCase();\n  const foundKeywords = piiKeywords.filter((keyword) =>\n    lowerContent.includes(keyword),\n  );\n\n  if (foundKeywords.length > 0) {\n    return {\n      safe: false,\n      reason: `Message blocked due to potential patient data: ${foundKeywords.join(\", \")}`,\n    };\n  }\n\n  return { safe: true };\n}\n\n// Mock current user for MVP - in production this would come from session\n/**\n * user = storage.getUser(token.id)\n */\n\nconst ACTIVE_USER = \"active_user\";\n\nasync function getCurrentUser(userEmail: string) {\n  var userStr = userEmail;\n  if (userStr == null) return null;\n  const user = await storage.getUserByEmail(userStr);\n  const person = await storage.getPersonByEmail(userStr);\n  \n  if (!user || !person) {\n    return null;\n  }\n  \n  const CurrentUser = {\n    id: user.employeeId,\n    practiceId: user.practiceId,\n    role: user.role,\n    email: person.email,\n    firstName: person.firstName,\n    lastName: person.lastName,\n    createdAt: user.createdAt,\n  };\n  return CurrentUser;\n}\n\n// Helper to get current user from request\nasync function getCurrentUserFromRequest(req: any) {\n  const email = req.query.email || req.body.email;\n  if (!email) {\n    return null;\n  }\n  return getCurrentUser(email);\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  const httpServer = createServer(app);\n\n  // WebSocket server for real-time messaging\n  const wss = new WebSocketServer({ server: httpServer, path: \"/ws\" });\n  const clients = new Map<string, WebSocket>();\n\n  wss.on(\"connection\", (ws) => {\n    const clientId = Math.random().toString(36).substring(7);\n    clients.set(clientId, ws);\n\n    ws.on(\"message\", async (data) => {\n      try {\n        const message = JSON.parse(data.toString());\n        if (message.type === \"join_conversation\") {\n          ws.send(\n            JSON.stringify({\n              type: \"joined\",\n              conversationId: message.conversationId,\n            }),\n          );\n        }\n      } catch (error) {\n        console.error(\"WebSocket message error:\", error);\n      }\n    });\n\n    ws.on(\"close\", () => {\n      clients.delete(clientId);\n    });\n  });\n\n  // Broadcast message to WebSocket clients\n  const broadcastMessage = (conversationId: string, message: any) => {\n    clients.forEach((client) => {\n      if (client.readyState === WebSocket.OPEN) {\n        client.send(\n          JSON.stringify({\n            type: \"new_message\",\n            conversationId,\n            message,\n          }),\n        );\n      }\n    });\n  };\n\n  //handling hash\n  function dohash(password: string, salt: string): Buffer {\n    return pbkdf2Sync(password, salt, 310000, 32, \"sha256\");\n  }\n\n  function makeSalt(): string {\n    return randomBytes(128).toString(\"base64\");\n  }\n\n  //Home api - returns user info if email is provided via query parameter\n  app.get(\"/api/home\", async (req, res) => {\n    const email = req.query.email as string;\n    \n    if (!email) {\n      res.status(400).json({ message: \"Email parameter required\" });\n      return;\n    }\n    \n    const currentUser = await getCurrentUser(email);\n    if (currentUser == null) {\n      res.status(401).json({ message: \"Invalid user: Please login\" });\n      return;\n    }\n    res.status(200).json(currentUser);\n  });\n\n  //sign up endpoint\n  app.post(\"/api/signup\", async (req, res) => {\n    const user = req.body;\n    try {\n      if (!(await storage.getUserByEmail(user.email)) == null) {\n        return res.status(400).json({ message: \"Email in use by other user\" });\n      }\n\n      const salt = makeSalt();\n      \n      // Generate unique employee ID\n      const employeeId = `EMP-${Date.now()}-${Math.random().toString(36).substring(7)}`;\n\n      const userTemplate: InsertUser = {\n        employeeId: employeeId,\n        hashedPassword: dohash(user.password, salt).toString(\"base64\"),\n        salt: salt,\n        practiceId: user.practiceId,\n        role: user.role,\n      };\n      const personTemplate: InsertPerson = {\n        email: user.email,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        id: employeeId,\n      };\n      await storage.createPerson(personTemplate);\n      await storage.createUser(userTemplate);\n\n      const newuser = await storage.getUserByEmail(user.email);\n\n      if (!newuser) {\n        return res.status(500).json({ message: \"User creation failed\" });\n      }\n\n      res.status(201).json({\n        message: \"User created successfully\",\n        userId: newuser.employeeId,\n      });\n    } catch (error: any) {\n      console.log(\"Error in sign up controller\", error.message);\n      res.status(500).json({ message: \"Internal Server Error\" });\n    }\n  });\n\n  //login endpoint\n  app.post(\"/api/login\", async (req, res) => {\n    const { email, password } = req.body;\n    try {\n      const user = await storage.getUserByEmail(email);\n\n      if (!user) {\n        return res.status(400).json({ message: \"Invalid   credentials\" });\n      }\n\n      const hashedPassword = dohash(password, user.salt);\n\n      const isPasswordCorrect = timingSafeEqual(\n        Buffer.from(user.hashedPassword, \"base64\"),\n        hashedPassword,\n      );\n\n      if (!isPasswordCorrect) {\n        return res.status(400).json({ message: \"Invalid credentials\" });\n      }\n\n      // Get person data for complete user info\n      const person = await storage.getPersonByEmail(email);\n      \n      if (!person) {\n        return res.status(400).json({ message: \"User profile not found\" });\n      }\n\n      res.status(200).json({ \n        message: \"Login successful\", \n        email: person.email,\n        firstName: person.firstName,\n        lastName: person.lastName,\n        userId: user.employeeId,\n        practiceId: user.practiceId,\n        role: user.role\n      });\n    } catch (error: any) {\n      console.log(\"Error in login controller\", error.message);\n      res.status(500).json({ message: \"Internal Server Error\" });\n    }\n  });\n\n  // Modules endpoint\n  app.get(\"/api/modules\", async (req, res) => {\n    const modules = [\n      {\n        id: \"1\",\n        title: \"ChironCQC\",\n        name: \"cqc\",\n        description:\n          \"CQC compliance tracking, regulatory checklists, and inspection preparation tools.\",\n        icon: \"shield-check\",\n        status: \"good\",\n      },\n      {\n        id: \"2\",\n        title: \"ChironHR\",\n        name: \"hr\",\n        description:\n          \"Staff scheduling, rota management, and HR compliance tools for your practice team.\",\n        icon: \"users\",\n        status: \"good\",\n      },\n      {\n        id: \"3\",\n        title: \"ChironMessaging\",\n        name: \"messaging\",\n        description:\n          \"Secure internal communication system for staff collaboration and coordination.\",\n        icon: \"message-square\",\n        status: \"good\",\n      },\n      {\n        id: \"4\",\n        title: \"ChironMoney\",\n        name: \"money\",\n        description:\n          \"Financial management, billing automation, and revenue tracking for private services.\",\n        icon: \"pound-sterling\",\n        status: \"attention\",\n      },\n      {\n        id: \"5\",\n        title: \"ChironStock\",\n        name: \"stock\",\n        description:\n          \"Inventory management, stock tracking, and automated reordering for medical supplies.\",\n        icon: \"package\",\n        status: \"attention\",\n      },\n      {\n        id: \"6\",\n        title: \"ChironFacilities\",\n        name: \"facilities\",\n        description:\n          \"Facility management, maintenance tracking, and asset management for your practice.\",\n        icon: \"building\",\n        status: \"attention\",\n      },\n    ];\n\n    res.json(modules);\n  });\n\n  // HR endpoints\n  app.get(\"/api/hr/metrics\", async (req, res) => {\n    const currentUser = await getCurrentUserFromRequest(req);\n    if (!currentUser) {\n      return res.status(401).json({ message: \"Unauthorized\" });\n    }\n    const allStaff = await storage.getStaffByPractice(currentUser.practiceId);\n\n    const reviewdates = allStaff.map((x) => x.nextAppraisal || \"now\");\n\n    const dateTo = new Date();\n    const dateFrom = new Date(dateTo.setMonth(dateTo.getMonth() - 1));\n    var needsReview = 0;\n    for (var dateCheck of reviewdates) {\n      var check = new Date(dateCheck);\n\n      if ((check <= dateTo && check >= dateFrom) || dateCheck == \"now\") {\n        needsReview = needsReview + 1;\n      }\n    }\n\n    res.json({\n      totalStaff: allStaff.length,\n      onDuty: Math.floor(allStaff.length * 0.75),\n      pendingReviews: needsReview,\n      leaveRequests: Math.floor(allStaff.length * 0.3),\n    });\n  });\n\n  app.get(\"/api/hr/staff\", async (req, res) => {\n    const currentUser = await getCurrentUserFromRequest(req);\n    if (!currentUser) {\n      return res.status(401).json({ message: \"Unauthorized\" });\n    }\n    const staff = await storage.getStaffByPractice(currentUser.practiceId);\n\n    const employees = [];\n    for (const employee of staff) {\n      const person = await storage.getPerson(employee.employeeId);\n      if (person) {\n        employees.push({\n          employeeId: employee.employeeId,\n          title: employee.title,\n          email: employee.email,\n          phone: employee.phone,\n          address: employee.address,\n          dateOfBirth: employee.dateOfBirth,\n          niNumber: employee.niNumber,\n          position: employee.position,\n          department: employee.department,\n          startDate: employee.startDate,\n          contract: employee.contract,\n          salary: employee.salary,\n          workingHours: employee.workingHours,\n          annualLeave: employee.annualLeave,\n          studyLeave: employee.studyLeave,\n          otherLeave: employee.otherLeave,\n          professionalBody: employee.professionalBody,\n          professionalBodyNumber: employee.professionalBodyNumber,\n          appraisalDate: employee.appraisalDate,\n          nextAppraisal: employee.nextAppraisal,\n          revalidationInfo: employee.revalidationInfo,\n          dbsCheckExpiry: employee.dbsCheckExpiry,\n          emergencyContactName: employee.emergencyContactName,\n          emergencyContactPhone: employee.emergencyContactPhone,\n          emergencyContactRelation: employee.emergencyContactRelation,\n          status: employee.status,\n          createdAt: employee.createdAt,\n          practiceId: currentUser.practiceId,\n          firstName: person.firstName,\n          lastName: person.lastName,\n        });\n      }\n    }\n    res.json(employees);\n  });\n\n  app.post(\"/api/hr/createstaff\", async (req, res) => {\n    try {\n      const employee = req.body;\n      const currentUser = await getCurrentUser(employee.creator);\n      const staffData = insertStaffSchema.parse({\n        employeeId: employee.employeeId,\n        title: employee.title,\n        email: employee.email,\n        phone: employee.phone,\n        address: employee.address,\n        dateOfBirth: employee.dateOfBirth,\n        niNumber: employee.niNumber,\n        position: employee.position,\n        department: employee.department,\n        startDate: employee.startDate,\n        contract: employee.contract,\n        salary: employee.salary,\n        annualLeave: employee.annualLeave,\n        studyLeave: employee.studyLeave,\n        otherLeave: employee.otherLeave,\n        professionalBody: employee.professionalBody,\n        professionalBodyNumber: employee.professionalBodyNumber,\n        appraisalDate: employee.appraisalDate,\n        nextAppraisal: employee.nextAppraisal,\n        revalidationInfo: employee.revalidationInfo,\n        dbsCheckExpiry: employee.dbsCheckExpiry,\n        emergencyContactName: employee.emergencyContactName,\n        emergencyContactPhone: employee.emergencyContactPhone,\n        emergencyContactRelation: employee.emergencyContactRelation,\n        practiceId: currentUser!.practiceId,\n      });\n\n      if ((await storage.getPerson(employee.employeeId)) == undefined) {\n        const personData = insertPersonSchema.parse({\n          firstName: employee.firstName,\n          lastName: employee.lastName,\n          email: employee.email,\n          id: employee.employeeId,\n        });\n        await storage.createPerson(personData);\n      }\n      const person = await storage.getPerson(employee.employeeId);\n\n      if (!person) {\n        res\n          .status(500)\n          .json({ message: \"Failed to create or retrieve person data\" });\n        return;\n      }\n\n      const newStaff = await storage.createStaff(staffData);\n\n      const newEmployee = {\n        employeeId: newStaff.employeeId,\n        title: newStaff.title,\n        email: newStaff.email,\n        phone: newStaff.phone,\n        address: newStaff.address,\n        dateOfBirth: newStaff.dateOfBirth,\n        niNumber: newStaff.niNumber,\n        position: newStaff.position,\n        department: newStaff.department,\n        startDate: newStaff.startDate,\n        contract: newStaff.contract,\n        salary: newStaff.salary,\n        workingHours: newStaff.workingHours,\n        annualLeave: newStaff.annualLeave,\n        studyLeave: newStaff.studyLeave,\n        otherLeave: newStaff.otherLeave,\n        professionalBody: newStaff.professionalBody,\n        professionalBodyNumber: newStaff.professionalBodyNumber,\n        appraisalDate: newStaff.appraisalDate,\n        nextAppraisal: newStaff.nextAppraisal,\n        revalidationInfo: newStaff.revalidationInfo,\n        dbsCheckExpiry: newStaff.dbsCheckExpiry,\n        emergencyContactName: newStaff.emergencyContactName,\n        emergencyContactPhone: newStaff.emergencyContactPhone,\n        emergencyContactRelation: newStaff.emergencyContactRelation,\n        status: newStaff.status,\n        createdAt: newStaff.createdAt,\n        practiceId: newStaff.practiceId,\n        firstName: person.firstName,\n        lastName: person.lastName,\n      };\n      res.json(newEmployee);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res\n          .status(400)\n          .json({ message: \"Invalid staff data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to create staff member\" });\n      }\n    }\n  });\n\n  app.get(\"/api/hr/staff/:id\", async (req, res) => {\n    const staff = await storage.getStaff(req.params.id);\n    if (!staff) {\n      res.status(404).json({ message: \"Staff member not found\" });\n      return;\n    }\n\n    const currentUser = await getCurrentUser(req.body.creator);\n    if (staff.practiceId !== currentUser!.practiceId) {\n      res.status(403).json({ message: \"Access denied\" });\n      return;\n    }\n    const person = await storage.getPerson(req.params.id);\n\n    if (!person) {\n      res.status(404).json({ message: \"Person not found\" });\n      return;\n    }\n\n    const employee = {\n      employeeId: staff.employeeId,\n      title: staff.title,\n      email: staff.email,\n      phone: staff.phone,\n      address: staff.address,\n      dateOfBirth: staff.dateOfBirth,\n      niNumber: staff.niNumber,\n      position: staff.position,\n      department: staff.department,\n      startDate: staff.startDate,\n      contract: staff.contract,\n      salary: staff.salary,\n      workingHours: staff.workingHours,\n      annualLeave: staff.annualLeave,\n      studyLeave: staff.studyLeave,\n      otherLeave: staff.otherLeave,\n      professionalBody: staff.professionalBody,\n      professionalBodyNumber: staff.professionalBodyNumber,\n      appraisalDate: staff.appraisalDate,\n      nextAppraisal: staff.nextAppraisal,\n      revalidationInfo: staff.revalidationInfo,\n      dbsCheckExpiry: staff.dbsCheckExpiry,\n      emergencyContactName: staff.emergencyContactName,\n      emergencyContactPhone: staff.emergencyContactPhone,\n      emergencyContactRelation: staff.emergencyContactRelation,\n      status: staff.status,\n      createdAt: staff.createdAt,\n      practiceId: staff.practiceId,\n      firstName: person.firstName,\n      lastName: person.lastName,\n    };\n    res.json(employee);\n  });\n\n  app.put(\"/api/hr/staff/:id\", async (req, res) => {\n    try {\n      const currentUser = await getCurrentUser(req.body.creator);\n      const updates = insertStaffSchema.partial().parse(req.body);\n      const updateName = insertPersonSchema.partial().parse(req.body);\n\n      const existingStaff = await storage.getStaff(req.params.id);\n      const existingPerson = await storage.getPerson(req.params.id);\n      if (\n        !existingStaff ||\n        existingStaff.practiceId !== currentUser!.practiceId ||\n        !existingPerson\n      ) {\n        res.status(404).json({ message: \"Staff member not found\" });\n        return;\n      }\n\n      const updatedStaff = await storage.updateStaff(req.params.id, updates);\n      const updatedPerson = await storage.updatePerson(\n        req.params.id,\n        updateName,\n      );\n\n      if (!updatedStaff || !updatedPerson) {\n        res.status(404).json({ message: \"Failed to update staff member\" });\n        return;\n      }\n\n      const employee = {\n        employeeId: updatedStaff.employeeId,\n        title: updatedStaff.title,\n        email: updatedStaff.email,\n        phone: updatedStaff.phone,\n        address: updatedStaff.address,\n        dateOfBirth: updatedStaff.dateOfBirth,\n        niNumber: updatedStaff.niNumber,\n        position: updatedStaff.position,\n        department: updatedStaff.department,\n        startDate: updatedStaff.startDate,\n        contract: updatedStaff.contract,\n        salary: updatedStaff.salary,\n        workingHours: updatedStaff.workingHours,\n        annualLeave: updatedStaff.annualLeave,\n        studyLeave: updatedStaff.studyLeave,\n        otherLeave: updatedStaff.otherLeave,\n        professionalBody: updatedStaff.professionalBody,\n        professionalBodyNumber: updatedStaff.professionalBodyNumber,\n        appraisalDate: updatedStaff.appraisalDate,\n        nextAppraisal: updatedStaff.nextAppraisal,\n        revalidationInfo: updatedStaff.revalidationInfo,\n        dbsCheckExpiry: updatedStaff.dbsCheckExpiry,\n        emergencyContactName: updatedStaff.emergencyContactName,\n        emergencyContactPhone: updatedStaff.emergencyContactPhone,\n        emergencyContactRelation: updatedStaff.emergencyContactRelation,\n        status: updatedStaff.status,\n        createdAt: updatedStaff.createdAt,\n        practiceId: updatedStaff.practiceId,\n        firstName: updatedPerson.firstName,\n        lastName: updatedPerson.lastName,\n      };\n      res.json(employee);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res\n          .status(400)\n          .json({ message: \"Invalid staff data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to update staff member\" });\n      }\n    }\n  });\n\n  app.delete(\"/api/hr/staff/:id\", async (req, res) => {\n    const currentUser = await getCurrentUserFromRequest(req);\n    if (!currentUser) {\n      return res.status(401).json({ message: \"Unauthorized\" });\n    }\n    const staff = await storage.getStaff(req.params.id);\n\n    if (!staff || staff.practiceId !== currentUser.practiceId) {\n      res.status(404).json({ message: \"Staff member not found\" });\n      return;\n    }\n\n    const deleted = await storage.deleteStaff(req.params.id);\n    if (deleted) {\n      res.json({ message: \"Staff member deleted successfully\" });\n    } else {\n      res.status(500).json({ message: \"Failed to delete staff member\" });\n    }\n  });\n\n  app.get(\"/api/hr/appraisals\", async (req, res) => {\n    const currentUser = await getCurrentUserFromRequest(req);\n    if (!currentUser) {\n      return res.status(401).json({ message: \"Unauthorized\" });\n    }\n    const appraisals = await storage.getAppraisalsByPractice(\n      currentUser.practiceId,\n    );\n    res.json(appraisals);\n  });\n\n  app.post(\"/api/hr/appraisal\", async (req, res) => {\n    try {\n      const currentUser = await getCurrentUserFromRequest(req);\n      if (!currentUser) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      const appraisalEvidence = {\n        ...req.body,\n        practiceId: currentUser.practiceId,\n      };\n\n      const evidence = await storage.createAppraisal(appraisalEvidence);\n      res.json(evidence);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to create evidence\" });\n    }\n  });\n\n  app.get(\"/api/hr/policy\", async (req, res) => {\n    const currentUser = await getCurrentUserFromRequest(req);\n    if (!currentUser) {\n      return res.status(401).json({ message: \"Unauthorized\" });\n    }\n    const policies = await storage.getPoliciesByPractice(\n      currentUser.practiceId,\n    );\n    res.json(policies);\n  });\n\n  app.post(\"/api/hr/policy\", async (req, res) => {\n    try {\n      const currentUser = await getCurrentUser(req.body.creator);\n      const policy = {\n        ...req.body,\n        practiceId: currentUser!.practiceId,\n      };\n\n      const evidence = await storage.createPolicy(policy);\n      res.json(evidence);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to create evidence\" });\n    }\n  });\n\n  // Rota endpoints\n  app.get(\"/api/hr/rota/:day\", async (req, res) => {\n    try {\n      const currentUser = await getCurrentUserFromRequest(req);\n      if (!currentUser) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      const { day } = req.params;\n      const rota = await storage.getRotaByDay(currentUser.practiceId, day);\n      \n      if (!rota) {\n        return res.status(404).json({ message: \"Rota not found\" });\n      }\n\n      res.json(rota);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch rota\" });\n    }\n  });\n\n  app.post(\"/api/hr/rota\", async (req, res) => {\n    try {\n      const currentUser = await getCurrentUserFromRequest(req);\n      if (!currentUser) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      const rotaData = insertRotaSchema.parse({\n        ...req.body,\n        practiceId: currentUser.practiceId,\n      });\n\n      const rota = await storage.createRota(rotaData);\n\n      // Map day name to index (Sunday=0, Monday=1, etc.)\n      const dayMap: { [key: string]: number } = {\n        \"Sunday\": 0,\n        \"Monday\": 1,\n        \"Tuesday\": 2,\n        \"Wednesday\": 3,\n        \"Thursday\": 4,\n        \"Friday\": 5,\n        \"Saturday\": 6,\n      };\n\n      const dayIndex = dayMap[rota.day];\n\n      // Update workingHours for each assigned staff member\n      if (dayIndex !== undefined && rota.assignments && Array.isArray(rota.assignments)) {\n        for (const assignment of rota.assignments as Array<{employeeId: string; shifts: string[]}>) {\n          const staff = await storage.getStaff(assignment.employeeId);\n          if (staff) {\n            // Get existing workingHours or create default array\n            const workingHours = staff.workingHours || [\n              \"not in\", \"not in\", \"not in\", \"not in\", \"not in\", \"not in\", \"not in\"\n            ] as (\"am\" | \"pm\" | \"all day\" | \"not in\")[];\n\n            // Determine the shift value\n            let shiftValue: \"am\" | \"pm\" | \"all day\" | \"not in\" = \"not in\";\n            if (assignment.shifts.includes(\"all-day\")) {\n              shiftValue = \"all day\";\n            } else if (assignment.shifts.includes(\"am\") && assignment.shifts.includes(\"pm\")) {\n              shiftValue = \"all day\";\n            } else if (assignment.shifts.includes(\"am\")) {\n              shiftValue = \"am\";\n            } else if (assignment.shifts.includes(\"pm\")) {\n              shiftValue = \"pm\";\n            }\n\n            // Update the specific day\n            workingHours[dayIndex] = shiftValue;\n\n            // Update staff member\n            await storage.updateStaff(assignment.employeeId, { workingHours });\n          }\n        }\n      }\n\n      res.json(rota);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid rota data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to create rota\" });\n      }\n    }\n  });\n\n  // CQC endpoints\n  app.get(\"/api/cqc/dashboard\", async (req, res) => {\n    const currentUser = await getCurrentUserFromRequest(req);\n    if (!currentUser) {\n      return res.status(401).json({ message: \"Unauthorized\" });\n    }\n    const standards = await storage.getCqcStandards();\n    const evidence = await storage.getPracticeEvidence(currentUser.practiceId);\n\n    res.json({\n      complianceScore: 98,\n      openIssues: 2,\n      totalStandards: standards.length,\n      evidenceCount: evidence.length,\n      keyQuestions: {\n        Safe: 95,\n        Effective: 98,\n        Caring: 100,\n        Responsive: 96,\n        WellLed: 99,\n      },\n    });\n  });\n\n  app.get(\"/api/cqc/standards\", async (req, res) => {\n    const standards = await storage.getCqcStandards();\n    res.json(standards);\n  });\n\n  app.post(\"/api/cqc/evidence\", async (req, res) => {\n    try {\n      const currentUser = await getCurrentUser(req.body.creator);\n      const evidenceData = {\n        ...req.body,\n        practiceId: currentUser!.practiceId,\n      };\n\n      const evidence = await storage.createPracticeEvidence(evidenceData);\n      res.json(evidence);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to create evidence\" });\n    }\n  });\n\n  app.get(\"/api/cqc/activity\", async (req, res) => {\n    res.json([\n      {\n        id: \"1\",\n        type: \"evidence_upload\",\n        description: \"New evidence uploaded for Regulation 12\",\n        timestamp: new Date().toISOString(),\n      },\n      {\n        id: \"2\",\n        type: \"standard_update\",\n        description: \"CQC Regulation 17 guidance updated\",\n        timestamp: new Date(Date.now() - 86400000).toISOString(),\n      },\n    ]);\n  });\n\n  // Messaging endpoints\n  app.get(\"/api/messaging/contacts\", async (req, res) => {\n    try {\n      const currentUser = await getCurrentUserFromRequest(req);\n      if (!currentUser) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      const users = await storage.getUsersByPractice(currentUser.practiceId);\n      const contactusers = users.filter(\n        (u) => u.employeeId !== currentUser.id,\n      );\n\n      const contacts = [];\n      for (const contactuser of contactusers) {\n        const person = await storage.getPerson(contactuser.employeeId);\n        if (person) {\n          contacts.push({\n            id: contactuser.employeeId,\n            practiceId: contactuser.practiceId,\n            role: contactuser.role,\n            email: person.email,\n            firstName: person.firstName,\n            lastName: person.lastName,\n          });\n        }\n      }\n\n      res.json(contacts);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get contacts\" });\n    }\n  });\n\n  app.get(\"/api/messaging/conversations\", async (req, res) => {\n    const currentUser = await getCurrentUserFromRequest(req);\n    if (!currentUser) {\n      return res.status(401).json({ message: \"Unauthorized\" });\n    }\n    /** const newconversations: InsertConversation[] = [\n      {\n        practiceId: \"practice1\",\n        participantIds: [\"user1\"],\n        title: \"dummy data\",\n      },\n    ];\n\n    console.log(\"create convo\");\n    storage.createConversation(newconversations[0]);*/\n    const testdata = await storage.getConversationsByUser(\n      currentUser.id,\n      currentUser.practiceId,\n    );\n    if (testdata.length < 2) {\n      const newuser0 = await storage.createUser({\n        employeeId: \"uuid 1\",\n        hashedPassword: \"string0\",\n        salt: makeSalt(),\n        practiceId: \"practice1\",\n        role: \"user\",\n      });\n      const newPerson0 = await storage.createPerson({\n        id: \"uuid 1\",\n        email: \"ask@gmail.com\",\n        firstName: \"Sister Jane\",\n        lastName: \"Smith\",\n      });\n      const newuser2 = await storage.createUser({\n        employeeId: \"uuid 2\",\n        hashedPassword: \"string1\",\n        salt: makeSalt(),\n        practiceId: \"practice1\",\n\n        role: \"user\",\n      });\n      const newPerson2 = await storage.createPerson({\n        id: \"uuid 2\",\n        email: \"string@gmailcom\",\n        firstName: \"Team\",\n        lastName: \"Chat\",\n      });\n      const newuser1 = await storage.createUser({\n        employeeId: \"uuid 3\",\n        hashedPassword: \"string2\",\n        salt: makeSalt(),\n        practiceId: \"practice1\",\n        role: \"user\",\n      });\n      const newPerson1 = await storage.createPerson({\n        id: \"uuid 3\",\n        email: \"help.gmail.com\",\n        firstName: \"Mark\",\n        lastName: \"Brown\",\n      });\n      const newconversations: InsertConversation[] = [\n        {\n          practiceId: \"practice1\",\n          participantIds: [newuser0.employeeId, \"user1\"],\n          title: \"Sister Jane Smith\",\n        },\n        {\n          practiceId: \"practice1\",\n          participantIds: [newuser1.employeeId, \"user1\"],\n          title: \"Mark Brown\",\n        },\n        {\n          practiceId: \"practice1\",\n          participantIds: [newuser2.employeeId, \"user1\"],\n          title: \"Team Chat\",\n        },\n      ];\n      const convo1 = await storage.createConversation(newconversations[0]);\n      const convo2 = await storage.createConversation(newconversations[1]);\n      const convo3 = await storage.createConversation(newconversations[2]);\n      await storage.createMessage({\n        conversationId: convo1.id,\n        senderId: newuser0.employeeId,\n        content:\n          \"Hi Dr. Wilson, the morning appointment results are ready for review.\",\n        blocked: null,\n        blockReason: null,\n      });\n      await storage.createMessage({\n        conversationId: convo2.id,\n        senderId: newuser1.employeeId,\n        content: \"CQC check ahead. Be ready.\",\n        blocked: null,\n        blockReason: null,\n      });\n      await storage.createMessage({\n        conversationId: convo3.id,\n        senderId: newuser2.employeeId,\n        content: \"Good morning! Hope everyone is ready for today's schedule.\",\n        blocked: null,\n        blockReason: null,\n      });\n    }\n\n    const conversations = await storage.getConversationsByUser(\n      currentUser.id,\n      currentUser.practiceId,\n    );\n\n    res.json(conversations);\n  });\n\n  app.post(\"/api/messaging/createconversations\", async (req, res) => {\n    try {\n      const currentUser = await getCurrentUserFromRequest(req);\n      if (!currentUser) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      \n      const newconversation: InsertConversation = insertConversationSchema.parse({\n        ...req.body,\n      });\n\n      await storage.createConversation(newconversation);\n      const conversations = await storage.getConversationsByUser(\n        currentUser.id,\n        currentUser.practiceId,\n      );\n      res.json(conversations);\n    } catch (error) {\n      console.error(\"Error creating conversation:\", error);\n      res.status(500).json({ message: \"Failed to create conversation\" });\n    }\n  });\n\n  app.get(\"/api/messaging/announcements\", async (req, res) => {\n    try {\n      const currentUser = await getCurrentUserFromRequest(req);\n      if (!currentUser) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      const UserbyPractice = await storage.getUsersByPractice(\n        currentUser.practiceId,\n      );\n      //fix when current user fix\n      const ids = UserbyPractice.map((user) => user.employeeId).concat(\n        currentUser.id,\n      );\n      const newconversation: InsertConversation =\n        insertConversationSchema.parse({\n          practiceId: currentUser.practiceId,\n          title: \"Announcements\",\n          participantIds: ids,\n        });\n\n      const testcreate = await storage.getConversationsByUser(\n        currentUser.id,\n        currentUser.practiceId,\n      );\n      if (testcreate.find((obj) => obj.title == \"Announcements\") == null) {\n        await storage.createConversation(newconversation);\n      }\n      const conversations = await storage.getConversationsByUser(\n        currentUser.id,\n        currentUser.practiceId,\n      );\n      const announcements = conversations.find(\n        (obj) => obj.title == \"Announcements\",\n      );\n      if (!announcements) {\n        res\n          .status(404)\n          .json({ message: \"Announcements conversation not found\" });\n        return;\n      }\n      const testdata = await storage.getMessagesByConversation(\n        announcements.id,\n      );\n      if (testdata.length == 0) {\n        await storage.createMessage({\n          conversationId: announcements.id,\n          senderId: \"user1\",\n          content: \"CQC Inspection! Preparation meeting tomorrow 3 PM\",\n          blocked: null,\n          blockReason: null,\n        });\n        await storage.createMessage({\n          conversationId: announcements.id,\n          senderId: \"user1\",\n          content: \"New Staff Member! Welcome Dr. Emily Chen starting Monday\",\n          blocked: null,\n          blockReason: null,\n        });\n        await storage.createMessage({\n          conversationId: announcements.id,\n          senderId: \"user1\",\n          content: \"System Maintenance! Scheduled downtime Sunday 2-4 AM\",\n          blocked: null,\n          blockReason: null,\n        });\n      }\n\n      const messageData = await storage.getMessagesByConversation(\n        announcements.id,\n      );\n      res.json(messageData);\n    } catch (error) {\n      res\n        .status(500)\n        .json({ message: \"Failed to retrieve announcements\", error });\n    }\n  });\n\n  app.get(\n    \"/api/messaging/initConversation/:conversationId\",\n    async (req, res) => {\n      try {\n        const conversationId = parseInt(req.params.conversationId, 10);\n        if (isNaN(conversationId)) {\n          res.status(400).json({ message: \"Invalid conversation ID\" });\n          return;\n        }\n        const messageData =\n          await storage.getMessagesByConversation(conversationId);\n        if (messageData.length == 0) {\n          res.status(200).json([]); // Return empty array instead of error\n          return;\n        }\n        res.json(messageData);\n      } catch (error) {\n        res.status(500).json({ message: \"Failed to retrieve message\" });\n      }\n    },\n  );\n\n  app.post(\"/api/messaging/messages\", async (req, res) => {\n    try {\n      const currentUser = await getCurrentUserFromRequest(req);\n      if (!currentUser) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      var messageData = insertMessageSchema.parse({\n        ...req.body,\n        senderId: currentUser.id,\n      });\n\n      /**if (messageData.conversationId == \"Anouncement\") {\n        const conversations = await storage.getConversationsByUser(\n          currentUser.id,\n          currentUser.practiceId,\n        );\n        const announcements = conversations.find(\n          (obj) => obj.title == \"announcements\",\n        );\n        messageData = insertMessageSchema.parse({\n          messageData,\n          conversationid: announcements.id,\n        });\n      }*/\n\n      // AI Safety Net\n      const safetyCheck = await analyzeMessageForPII(messageData.content);\n      if (!safetyCheck.safe) {\n        res.status(400).json({\n          message: \"Message blocked due to potential patient data\",\n          reason: safetyCheck.reason,\n        });\n        return;\n      }\n\n      // Verify conversation belongs to user's practice\n      const conversation = await storage.getConversation(\n        messageData.conversationId,\n        currentUser.practiceId,\n      );\n      if (!conversation) {\n        res.status(404).json({ message: \"Conversation not found\" });\n        return;\n      }\n\n      const message = await storage.createMessage(messageData);\n\n      // Broadcast to WebSocket clients\n      broadcastMessage(messageData.conversationId.toString(), message);\n\n      res.json(message);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res\n          .status(400)\n          .json({ message: \"Invalid message data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to send message\" });\n      }\n    }\n  });\n\n  // Money endpoints\n  app.get(\"/api/money/dashboard\", async (req, res) => {\n    const currentUser = await getCurrentUserFromRequest(req);\n    if (!currentUser) {\n      return res.status(401).json({ message: \"Unauthorized\" });\n    }\n    const transactions = await storage.getTransactionsByPractice(\n      currentUser.practiceId,\n    );\n    const invoices = await storage.getInvoicesByPractice(\n      currentUser.practiceId,\n    );\n\n    const revenue = transactions\n      .filter((t) => t.category === \"income\")\n      .reduce((sum, t) => sum + Number(t.amount), 0);\n\n    const expenses = transactions\n      .filter((t) => t.category === \"expense\")\n      .reduce((sum, t) => sum + Number(t.amount), 0);\n\n    const overdueInvoices = invoices.filter(\n      (i) => i.status === \"overdue\",\n    ).length;\n\n    res.json({\n      monthlyRevenue: revenue,\n      expenses,\n      profitLoss: revenue - expenses,\n      vatDue: revenue * 0.2, // 20% VAT estimate\n      overdueInvoices,\n    });\n  });\n\n  app.get(\"/api/money/transactions\", async (req, res) => {\n    const currentUser = await getCurrentUserFromRequest(req);\n    if (!currentUser) {\n      return res.status(401).json({ message: \"Unauthorized\" });\n    }\n    const transactions = await storage.getTransactionsByPractice(\n      currentUser.practiceId,\n    );\n    res.json(transactions);\n  });\n\n  app.post(\"/api/money/transactions\", async (req, res) => {\n    try {\n      const currentUser = await getCurrentUser(req.body.creator);\n      const transactionData = insertTransactionSchema.parse({\n        ...req.body,\n        practiceId: currentUser!.practiceId,\n      });\n\n      const transaction = await storage.createTransaction(transactionData);\n      res.json(transaction);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res\n          .status(400)\n          .json({ message: \"Invalid transaction data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to create transaction\" });\n      }\n    }\n  });\n\n  app.get(\"/api/money/invoices\", async (req, res) => {\n    const currentUser = await getCurrentUserFromRequest(req);\n    if (!currentUser) {\n      return res.status(401).json({ message: \"Unauthorized\" });\n    }\n    const invoices = await storage.getInvoicesByPractice(\n      currentUser.practiceId,\n    );\n    res.json(invoices);\n  });\n\n  app.post(\"/api/money/invoices\", async (req, res) => {\n    try {\n      const currentUser = await getCurrentUser(req.body.creator);\n      const invoiceData = insertInvoiceSchema.parse({\n        ...req.body,\n        practiceId: currentUser!.practiceId,\n      });\n\n      const invoice = await storage.createInvoice(invoiceData);\n      res.json(invoice);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res\n          .status(400)\n          .json({ message: \"Invalid invoice data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to create invoice\" });\n      }\n    }\n  });\n\n  app.get(\"/api/money/purchases\", async (req, res) => {\n    const currentUser = await getCurrentUserFromRequest(req);\n    if (!currentUser) {\n      return res.status(401).json({ message: \"Unauthorized\" });\n    }\n    const purchases = await storage.getPurchasesByPractice(\n      currentUser.practiceId,\n    );\n    res.json(purchases);\n  });\n\n  app.post(\"/api/money/purchases\", async (req, res) => {\n    try {\n      const currentUser = await getCurrentUser(req.body.creator);\n      const purchaseData = insertPurchaseSchema.parse({\n        ...req.body,\n        practiceId: currentUser!.practiceId,\n      });\n\n      const purchase = await storage.createPurchase(purchaseData);\n      res.json(purchase);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res\n          .status(400)\n          .json({ message: \"Invalid purchase data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to create purchase\" });\n      }\n    }\n  });\n\n  app.get(\"/api/money/reports/profit-and-loss\", async (req, res) => {\n    const currentUser = await getCurrentUserFromRequest(req);\n    if (!currentUser) {\n      return res.status(401).json({ message: \"Unauthorized\" });\n    }\n    const transactions = await storage.getTransactionsByPractice(\n      currentUser.practiceId,\n    );\n\n    const income = transactions\n      .filter((t) => t.category === \"income\")\n      .reduce((sum, t) => sum + Number(t.amount), 0);\n\n    const expenses = transactions\n      .filter((t) => t.category === \"expense\")\n      .reduce((sum, t) => sum + Number(t.amount), 0);\n\n    res.json({\n      income,\n      expenses,\n      netProfit: income - expenses,\n      profitMargin: income > 0 ? ((income - expenses) / income) * 100 : 0,\n    });\n  });\n\n  app.get(\"/api/money/calculations/corporation-tax\", async (req, res) => {\n    const currentUser = await getCurrentUserFromRequest(req);\n    if (!currentUser) {\n      return res.status(401).json({ message: \"Unauthorized\" });\n    }\n    const transactions = await storage.getTransactionsByPractice(\n      currentUser.practiceId,\n    );\n\n    const profit =\n      transactions\n        .filter((t) => t.category === \"income\")\n        .reduce((sum, t) => sum + Number(t.amount), 0) -\n      transactions\n        .filter((t) => t.category === \"expense\")\n        .reduce((sum, t) => sum + Number(t.amount), 0);\n\n    // UK Corporation Tax rate for small companies (19%)\n    const taxRate = 0.19;\n    const estimatedTax = Math.max(0, profit * taxRate);\n\n    res.json({\n      profit,\n      taxRate: taxRate * 100,\n      estimatedTax,\n      allowances: 0, // Placeholder for future implementation\n    });\n  });\n\n  // AI Chat endpoint\n  app.post(\"/api/ai/chat\", async (req, res) => {\n    try {\n      const { message } = req.body;\n\n      if (!message || typeof message !== \"string\") {\n        return res.status(400).json({ error: \"Message is required\" });\n      }\n\n      const aiResponse = await generateHealthcareResponse(message);\n\n      if (aiResponse.error) {\n        return res.status(500).json({ error: aiResponse.error });\n      }\n\n      res.json({\n        response: aiResponse.response,\n        timestamp: new Date().toISOString(),\n      });\n    } catch (error) {\n      console.error(\"AI Chat Error:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // File Upload Routes\n  // Get upload URL for secure file upload\n  app.post(\"/api/objects/upload\", async (req, res) => {\n    try {\n      const objectStorageService = new ObjectStorageService();\n      const uploadURL = await objectStorageService.getObjectEntityUploadURL();\n      res.json({ uploadURL });\n    } catch (error) {\n      console.error(\"Error getting upload URL:\", error);\n      res.status(500).json({ error: \"Failed to get upload URL\" });\n    }\n  });\n\n  // Set ACL policy after file upload\n  app.put(\"/api/files/uploaded\", async (req, res) => {\n    try {\n      const { fileURL, fileName, fileType, fileSize } = req.body;\n\n      if (!fileURL) {\n        return res.status(400).json({ error: \"fileURL is required\" });\n      }\n\n      const currentUser = await getCurrentUserFromRequest(req);\n      if (!currentUser) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      const objectStorageService = new ObjectStorageService();\n\n      const objectPath = await objectStorageService.trySetObjectEntityAclPolicy(\n        fileURL,\n        {\n          owner: currentUser.id,\n          visibility: \"private\", // Healthcare files should be private\n          aclRules: [\n            {\n              group: {\n                type: \"practice_members\" as any,\n                id: currentUser.practiceId,\n              },\n              permission: ObjectPermission.READ,\n            },\n          ],\n        },\n      );\n\n      res.json({\n        objectPath,\n        fileName,\n        fileType,\n        fileSize,\n      });\n    } catch (error) {\n      console.error(\"Error setting file ACL:\", error);\n      res.status(500).json({ error: \"Failed to set file permissions\" });\n    }\n  });\n\n  // Serve protected files\n  app.get(\"/objects/:objectPath(*)\", async (req, res) => {\n    try {\n      const currentUser = await getCurrentUser(req.body.creator);\n      const objectStorageService = new ObjectStorageService();\n\n      const objectFile = await objectStorageService.getObjectEntityFile(\n        req.path,\n      );\n      const canAccess = await objectStorageService.canAccessObjectEntity({\n        objectFile,\n        userId: currentUser!.id,\n        requestedPermission: ObjectPermission.READ,\n      });\n\n      if (!canAccess) {\n        return res.status(403).json({ error: \"Access denied\" });\n      }\n\n      objectStorageService.downloadObject(objectFile, res);\n    } catch (error) {\n      console.error(\"Error accessing file:\", error);\n      if (error instanceof ObjectNotFoundError) {\n        return res.status(404).json({ error: \"File not found\" });\n      }\n      return res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  return httpServer;\n}\n","size_bytes":46311},"server/storage.ts":{"content":"import {\n  type User,\n  type InsertUser,\n  type Staff,\n  type InsertStaff,\n  type CqcStandard,\n  type InsertCqcStandard,\n  type PracticeEvidence,\n  type InsertPracticeEvidence,\n  type Conversation,\n  type InsertConversation,\n  type Message,\n  type InsertMessage,\n  type Transaction,\n  type InsertTransaction,\n  type Invoice,\n  type InsertInvoice,\n  type Purchase,\n  type InsertPurchase,\n  type VatReturn,\n  type InsertVatReturn,\n  type Practice,\n  type Person,\n  type InsertPerson,\n  type AppraisalEvidence,\n  type InsertAppraisalEvidence,\n  type Policy,\n  type InsertPolicy,\n  type Rota,\n  type InsertRota,\n} from \"@shared/schema\";\nimport { db } from \"@shared/index\";\n\nexport interface IStorage {\n  // User methods\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n\n  //Person methods\n  getPerson(id: string): Promise<Person | undefined>;\n  getPersonByEmail(email: string): Promise<Person | undefined>;\n  createPerson(person: InsertPerson): Promise<Person>;\n  updatePerson(\n    id: string,\n    person: Partial<InsertPerson>,\n  ): Promise<Person | undefined>;\n\n  // Staff methods\n  getStaffByPractice(practiceId: string): Promise<Staff[]>;\n  getStaff(id: string): Promise<Staff | undefined>;\n  createStaff(staff: InsertStaff): Promise<Staff>;\n  updateStaff(\n    id: string,\n    staff: Partial<InsertStaff>,\n  ): Promise<Staff | undefined>;\n  deleteStaff(id: string): Promise<boolean>;\n\n  getAppraisalsByPractice(practiceId: string): Promise<AppraisalEvidence[]>;\n  createAppraisal(\n    evidence: InsertAppraisalEvidence,\n  ): Promise<AppraisalEvidence>;\n\n  getPoliciesByPractice(practiceId: string): Promise<Policy[]>;\n  createPolicy(evidence: InsertPolicy): Promise<Policy>;\n\n  // CQC methods\n  getCqcStandards(): Promise<CqcStandard[]>;\n  createCqcStandard(standard: InsertCqcStandard): Promise<CqcStandard>;\n  getPracticeEvidence(practiceId: string): Promise<PracticeEvidence[]>;\n  createPracticeEvidence(\n    evidence: InsertPracticeEvidence,\n  ): Promise<PracticeEvidence>;\n\n  // Messaging methods\n  getUsersByPractice(practiceId: string): Promise<User[]>;\n  getConversationsByUser(\n    userId: string,\n    practiceId: string,\n  ): Promise<Conversation[]>;\n  getConversation(\n    id: number,\n    practiceId: string,\n  ): Promise<Conversation | undefined>;\n  createConversation(conversation: InsertConversation): Promise<Conversation>;\n  getMessagesByConversation(conversationId: number): Promise<Message[]>;\n  createMessage(message: InsertMessage): Promise<Message>;\n\n  // Financial methods\n  getTransactionsByPractice(practiceId: string): Promise<Transaction[]>;\n  createTransaction(transaction: InsertTransaction): Promise<Transaction>;\n  getInvoicesByPractice(practiceId: string): Promise<Invoice[]>;\n  createInvoice(invoice: InsertInvoice): Promise<Invoice>;\n  updateInvoice(\n    id: string,\n    invoice: Partial<InsertInvoice>,\n  ): Promise<Invoice | undefined>;\n  getPurchasesByPractice(practiceId: string): Promise<Purchase[]>;\n  createPurchase(purchase: InsertPurchase): Promise<Purchase>;\n  getVatReturnsByPractice(practiceId: string): Promise<VatReturn[]>;\n  createVatReturn(vatReturn: InsertVatReturn): Promise<VatReturn>;\n\n  // Rota methods\n  getRotasByPractice(practiceId: string): Promise<Rota[]>;\n  getRotaByDay(practiceId: string, day: string): Promise<Rota | undefined>;\n  createRota(rota: InsertRota): Promise<Rota>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private people: Map<string, Person>;\n  private practices: Map<string, Practice>;\n  private staff: Map<string, Staff>;\n  private appraisals: Map<string, AppraisalEvidence>;\n  private policies: Map<string, Policy>;\n  private cqcStandards: Map<string, CqcStandard>;\n  private practiceEvidence: Map<string, PracticeEvidence>;\n  private conversations: Map<string, Conversation>;\n  private messages: Map<string, Message>;\n  private transactions: Map<string, Transaction>;\n  private invoices: Map<string, Invoice>;\n  private purchases: Map<string, Purchase>;\n  private vatReturns: Map<string, VatReturn>;\n  private rotas: Map<number, Rota>;\n  private rotaIdCounter: number;\n\n  constructor() {\n    this.users = new Map();\n    this.people = new Map();\n    this.practices = new Map();\n    this.staff = new Map();\n    this.appraisals = new Map();\n    this.policies = new Map();\n    this.cqcStandards = new Map();\n    this.practiceEvidence = new Map();\n    this.conversations = new Map();\n    this.messages = new Map();\n    this.transactions = new Map();\n    this.invoices = new Map();\n    this.purchases = new Map();\n    this.vatReturns = new Map();\n    this.rotas = new Map();\n    this.rotaIdCounter = 1;\n\n    // Initialize with some default CQC standards\n    this.initializeCqcStandards();\n  }\n\n  private initializeCqcStandards() {\n    const standards: InsertCqcStandard[] = [\n      {\n        regulationId: \"REG12\",\n        title: \"Safe care and treatment\",\n        summary:\n          \"People using services must be protected from avoidable harm and abuse\",\n        keyQuestion: \"Safe\",\n        sourceUrl:\n          \"https://www.cqc.org.uk/guidance-regulation/regulations/regulation-12-safe-care-treatment\",\n      },\n      {\n        regulationId: \"REG17\",\n        title: \"Good governance\",\n        summary:\n          \"Systems and processes must be established and operated effectively\",\n        keyQuestion: \"Well-led\",\n        sourceUrl:\n          \"https://www.cqc.org.uk/guidance-regulation/regulations/regulation-17-good-governance\",\n      },\n      {\n        regulationId: \"REG9\",\n        title: \"Person-centred care\",\n        summary:\n          \"Care and treatment must be appropriate and meet service users' needs\",\n        keyQuestion: \"Responsive\",\n        sourceUrl:\n          \"https://www.cqc.org.uk/guidance-regulation/regulations/regulation-9-person-centred-care\",\n      },\n    ];\n\n    standards.forEach((standard) => {\n      const cqcStandard: CqcStandard = {\n        ...standard,\n        summary: standard.summary ?? null,\n        sourceUrl: standard.sourceUrl ?? null,\n        lastCheckedForUpdate: new Date(),\n        createdAt: new Date(),\n      };\n      this.cqcStandards.set(cqcStandard.regulationId, cqcStandard);\n    });\n  }\n\n  // User methods\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    // Note: Users table doesn't have email directly - email is stored in people/staff tables\n    // This would require joining with people table in a real database implementation\n    // For in-memory storage, we'll need to look up via staff records that have email\n    const personWithEmail = Array.from(this.people.values()).find(\n      (person) => person.email === email,\n    );\n    if (personWithEmail) {\n      return this.users.get(personWithEmail.id);\n    }\n    return undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const user: User = {\n      ...insertUser,\n      role: insertUser.role ?? \"user\",\n      createdAt: new Date(),\n    };\n    this.users.set(user.employeeId, user);\n    // Note: Uncomment the line below when using actual database\n    // await db.insert(users).values(user);\n    return user;\n  }\n\n  //Person methods\n  async getPerson(id: string): Promise<Person | undefined> {\n    return this.people.get(id);\n  }\n\n  async getPersonByEmail(email: string): Promise<Person | undefined> {\n    return Array.from(this.people.values()).find(\n      (person) => person.email === email\n    );\n  }\n\n  async createPerson(insertPerson: InsertPerson): Promise<Person> {\n    const person: Person = {\n      ...insertPerson,\n    };\n    this.people.set(person.id, person);\n    // await db.insert(people).values(person);\n    return person;\n  }\n\n  async updatePerson(\n    id: string,\n    updates: Partial<InsertPerson>,\n  ): Promise<Person | undefined> {\n    const existing = this.people.get(id);\n    if (!existing) return undefined;\n\n    const updated: Person = { ...existing, ...updates };\n    this.people.set(id, updated);\n    return updated;\n  }\n\n  // Staff methods\n  async getStaffByPractice(practiceId: string): Promise<Staff[]> {\n    return Array.from(this.staff.values()).filter(\n      (s) => s.practiceId === practiceId,\n    );\n  }\n\n  async getStaff(id: string): Promise<Staff | undefined> {\n    return this.staff.get(id);\n  }\n\n  async createStaff(insertStaff: InsertStaff): Promise<Staff> {\n    const staffMember: Staff = {\n      ...insertStaff,\n      title: insertStaff.title ?? null,\n      email: insertStaff.email ?? null,\n      phone: insertStaff.phone ?? null,\n      address: insertStaff.address ?? null,\n      dateOfBirth: insertStaff.dateOfBirth ?? null,\n      niNumber: insertStaff.niNumber ?? null,\n      salary: insertStaff.salary ?? null,\n      workingHours: insertStaff.workingHours ?? null,\n      annualLeave: insertStaff.annualLeave ?? 28,\n      studyLeave: insertStaff.studyLeave ?? 5,\n      otherLeave: insertStaff.otherLeave ?? 0,\n      professionalBody: insertStaff.professionalBody ?? null,\n      professionalBodyNumber: insertStaff.professionalBodyNumber ?? null,\n      appraisalDate: insertStaff.appraisalDate ?? null,\n      nextAppraisal: insertStaff.nextAppraisal ?? null,\n      revalidationInfo: insertStaff.revalidationInfo ?? null,\n      dbsCheckExpiry: insertStaff.dbsCheckExpiry ?? null,\n      emergencyContactName: insertStaff.emergencyContactName ?? null,\n      emergencyContactPhone: insertStaff.emergencyContactPhone ?? null,\n      emergencyContactRelation: insertStaff.emergencyContactRelation ?? null,\n      status: insertStaff.status ?? \"active\",\n      createdAt: new Date(),\n    };\n    this.staff.set(staffMember.employeeId, staffMember);\n    // Note: Uncomment the line below when using actual database\n    // await db.insert(staff).values(staffMember);\n    return staffMember;\n  }\n\n  async updateStaff(\n    id: string,\n    updates: Partial<InsertStaff>,\n  ): Promise<Staff | undefined> {\n    const existing = this.staff.get(id);\n    if (!existing) return undefined;\n\n    const updated: Staff = { ...existing, ...updates };\n    this.staff.set(id, updated);\n    return updated;\n  }\n\n  async deleteStaff(id: string): Promise<boolean> {\n    return this.staff.delete(id);\n  }\n\n  //Appraisal methods\n  async getAppraisalsByPractice(\n    practiceId: string,\n  ): Promise<AppraisalEvidence[]> {\n    return Array.from(this.appraisals.values()).filter(\n      (appraisal) => appraisal.practiceId === practiceId,\n    );\n  }\n\n  // Method to create an appraisal\n  async createAppraisal(\n    evidence: InsertAppraisalEvidence,\n  ): Promise<AppraisalEvidence> {\n    const appraisal: AppraisalEvidence = {\n      ...evidence,\n      description: evidence.description ?? null,\n      createdAt: new Date(),\n    };\n    this.appraisals.set(appraisal.fileName, appraisal);\n    // Note: Uncomment the line below when using actual database\n    // await db.insert(appraisalEvidence).values(appraisal);\n    return appraisal;\n  }\n\n  //policy methods\n  async getPoliciesByPractice(practiceId: string): Promise<Policy[]> {\n    return Array.from(this.policies.values()).filter(\n      (policy) => policy.practiceId === practiceId,\n    );\n  }\n\n  // Method to create a policy\n  async createPolicy(evidence: InsertPolicy): Promise<Policy> {\n    const policy: Policy = {\n      ...evidence,\n      description: evidence.description ?? null,\n      createdAt: new Date(),\n    };\n    this.policies.set(policy.fileName, policy);\n    // Note: Uncomment the line below when using actual database\n    // await db.insert(appraisalEvidence).values(appraisal);\n    return policy;\n  }\n\n  // CQC methods\n  async getCqcStandards(): Promise<CqcStandard[]> {\n    return Array.from(this.cqcStandards.values());\n  }\n\n  async createCqcStandard(\n    insertStandard: InsertCqcStandard,\n  ): Promise<CqcStandard> {\n    const standard: CqcStandard = {\n      ...insertStandard,\n      summary: insertStandard.summary ?? null,\n      sourceUrl: insertStandard.sourceUrl ?? null,\n      lastCheckedForUpdate: new Date(),\n      createdAt: new Date(),\n    };\n    this.cqcStandards.set(standard.regulationId, standard);\n    // Note: Uncomment the line below when using actual database\n    // await db.insert(cqcStandards).values(standard);\n    return standard;\n  }\n\n  async getPracticeEvidence(practiceId: string): Promise<PracticeEvidence[]> {\n    return Array.from(this.practiceEvidence.values()).filter(\n      (e) => e.practiceId === practiceId,\n    );\n  }\n\n  async createPracticeEvidence(\n    insertEvidence: InsertPracticeEvidence,\n  ): Promise<PracticeEvidence> {\n    const evidence: PracticeEvidence = {\n      ...insertEvidence,\n      description: insertEvidence.description ?? null,\n      reviewStatus: insertEvidence.reviewStatus ?? \"needs_review\",\n      standardIds: insertEvidence.standardIds ?? null,\n      uploadDate: new Date(),\n      createdAt: new Date(),\n    };\n    this.practiceEvidence.set(evidence.fileName, evidence);\n    // Note: Uncomment the line below when using actual database\n    // await db.insert(practiceEvidence).values(evidence);\n    return evidence;\n  }\n\n  // Messaging methods\n  async getUsersByPractice(practiceId: string): Promise<User[]> {\n    return Array.from(this.users.values()).filter(\n      (u) => u.practiceId === practiceId,\n    );\n  }\n\n  async getConversationsByUser(\n    userId: string,\n    practiceId: string,\n  ): Promise<Conversation[]> {\n    return Array.from(this.conversations.values()).filter(\n      (c) => c.practiceId === practiceId && c.participantIds.includes(userId),\n    );\n  }\n\n  async getConversation(\n    id: number,\n    practiceId: string,\n  ): Promise<Conversation | undefined> {\n    const conversation = this.conversations.get(id.toString());\n    if (!conversation || conversation.practiceId !== practiceId)\n      return undefined;\n    return conversation;\n  }\n\n  async createConversation(\n    insertConversation: InsertConversation,\n  ): Promise<Conversation> {\n    const id = Math.floor(Math.random() * 1000000); // Simple ID for in-memory storage\n    const conversation: Conversation = {\n      ...insertConversation,\n      id,\n      title: insertConversation.title ?? null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.conversations.set(id.toString(), conversation);\n    // Note: Uncomment the line below when using actual database\n    // await db.insert(conversations).values(conversation);\n    return conversation;\n  }\n\n  async getMessagesByConversation(conversationId: number): Promise<Message[]> {\n    return Array.from(this.messages.values())\n      .filter((m) => m.conversationId === conversationId)\n      .sort((a, b) => a.createdAt!.getTime() - b.createdAt!.getTime());\n  }\n\n  async createMessage(insertMessage: InsertMessage): Promise<Message> {\n    const id = Math.floor(Math.random() * 1000000); // Simple ID for in-memory storage\n    const message: Message = {\n      ...insertMessage,\n      id,\n      blocked: insertMessage.blocked ?? null,\n      blockReason: insertMessage.blockReason ?? null,\n      createdAt: new Date(),\n    };\n    this.messages.set(id.toString(), message);\n    // Note: Uncomment the line below when using actual database\n    // await db.insert(messages).values(message);\n    return message;\n  }\n\n  // Financial methods\n  async getTransactionsByPractice(practiceId: string): Promise<Transaction[]> {\n    return Array.from(this.transactions.values()).filter(\n      (t) => t.practiceId === practiceId,\n    );\n  }\n\n  async createTransaction(\n    insertTransaction: InsertTransaction,\n  ): Promise<Transaction> {\n    const id = Math.floor(Math.random() * 1000000); // Simple ID for in-memory storage\n    const transaction: Transaction = {\n      ...insertTransaction,\n      id,\n      subcategory: insertTransaction.subcategory ?? null,\n      bankReference: insertTransaction.bankReference ?? null,\n      createdAt: new Date(),\n    };\n    this.transactions.set(id.toString(), transaction);\n    // Note: Uncomment the line below when using actual database\n    // await db.insert(transactions).values(transaction);\n    return transaction;\n  }\n\n  async getInvoicesByPractice(practiceId: string): Promise<Invoice[]> {\n    return Array.from(this.invoices.values()).filter(\n      (i) => i.practiceId === practiceId,\n    );\n  }\n\n  async createInvoice(insertInvoice: InsertInvoice): Promise<Invoice> {\n    const id = Math.floor(Math.random() * 1000000); // Simple ID for in-memory storage\n    const invoice: Invoice = {\n      ...insertInvoice,\n      id,\n      status: insertInvoice.status ?? null,\n      clientEmail: insertInvoice.clientEmail ?? null,\n      vatAmount: insertInvoice.vatAmount ?? null,\n      dueDate: insertInvoice.dueDate ?? null,\n      paidDate: insertInvoice.paidDate ?? null,\n      createdAt: new Date(),\n    };\n    this.invoices.set(id.toString(), invoice);\n    // Note: Uncomment the line below when using actual database\n    // await db.insert(invoices).values(invoice);\n    return invoice;\n  }\n\n  async updateInvoice(\n    id: string,\n    updates: Partial<InsertInvoice>,\n  ): Promise<Invoice | undefined> {\n    const existing = this.invoices.get(id);\n    if (!existing) return undefined;\n\n    const updated: Invoice = { ...existing, ...updates };\n    this.invoices.set(id, updated);\n    return updated;\n  }\n\n  async getPurchasesByPractice(practiceId: string): Promise<Purchase[]> {\n    return Array.from(this.purchases.values()).filter(\n      (p) => p.practiceId === practiceId,\n    );\n  }\n\n  async createPurchase(insertPurchase: InsertPurchase): Promise<Purchase> {\n    const id = Math.floor(Math.random() * 1000000); // Simple ID for in-memory storage\n    const purchase: Purchase = {\n      ...insertPurchase,\n      id,\n      vatAmount: insertPurchase.vatAmount ?? null,\n      receiptUrl: insertPurchase.receiptUrl ?? null,\n      createdAt: new Date(),\n    };\n    this.purchases.set(id.toString(), purchase);\n    // Note: Uncomment the line below when using actual database\n    // await db.insert(purchases).values(purchase);\n    return purchase;\n  }\n\n  async getVatReturnsByPractice(practiceId: string): Promise<VatReturn[]> {\n    return Array.from(this.vatReturns.values()).filter(\n      (v) => v.practiceId === practiceId,\n    );\n  }\n\n  async createVatReturn(insertVatReturn: InsertVatReturn): Promise<VatReturn> {\n    const id = Math.floor(Math.random() * 1000000); // Simple ID for in-memory storage\n    const vatReturn: VatReturn = {\n      ...insertVatReturn,\n      id,\n      status: insertVatReturn.status ?? null,\n      submittedAt: insertVatReturn.submittedAt ?? null,\n      createdAt: new Date(),\n    };\n    this.vatReturns.set(id.toString(), vatReturn);\n    // Note: Uncomment the line below when using actual database\n    // await db.insert(VatReturns).values(vatReturn);\n    return vatReturn;\n  }\n\n  async insertDBUsers(usersReg: User[]) {\n    usersReg.forEach((user) => {\n      this.users.set(user.employeeId, user);\n    });\n  }\n  async insertDBpractice(practiceReg: Practice) {\n    this.practices.set(practiceReg.email, practiceReg);\n  }\n  async insertDBstafflist(staffReg: Staff[]) {\n    staffReg.forEach((staffMember) => {\n      this.staff.set(staffMember.employeeId, staffMember);\n    });\n  }\n  async insertDBCQC(cqcReg: CqcStandard[]) {\n    cqcReg.forEach((cqc) => {\n      this.cqcStandards.set(cqc.regulationId, cqc);\n    });\n  }\n  async insertDBEvidence(evidenceList: PracticeEvidence[]) {\n    evidenceList.forEach((evidence) => {\n      this.practiceEvidence.set(evidence.fileName, evidence);\n    });\n  }\n  async insertDBconversations(conversationsList: Conversation[]) {\n    conversationsList.forEach((conversation) => {\n      this.conversations.set(conversation.id.toString(), conversation);\n    });\n  }\n  async insertDBtransactions(transactionsRec: Transaction[]) {\n    transactionsRec.forEach((transaction) => {\n      this.transactions.set(transaction.id.toString(), transaction);\n    });\n  }\n  async insertDBinvoices(invoicesRec: Invoice[]) {\n    invoicesRec.forEach((invoice) => {\n      this.invoices.set(invoice.id.toString(), invoice);\n    });\n  }\n  async insertDBpurchases(purchasesRec: Purchase[]) {\n    purchasesRec.forEach((purchase) => {\n      this.purchases.set(purchase.id.toString(), purchase);\n    });\n  }\n  async insertDBvatReturn(vatReturnRec: VatReturn[]) {\n    vatReturnRec.forEach((vatReturn) => {\n      this.vatReturns.set(vatReturn.id.toString(), vatReturn);\n    });\n  }\n\n  async insertMessages(messagelist: Message[]) {\n    messagelist.forEach((message) => {\n      this.messages.set(message.id.toString(), message);\n    });\n  }\n\n  // Rota methods\n  async getRotasByPractice(practiceId: string): Promise<Rota[]> {\n    return Array.from(this.rotas.values()).filter(\n      (rota) => rota.practiceId === practiceId\n    );\n  }\n\n  async getRotaByDay(practiceId: string, day: string): Promise<Rota | undefined> {\n    return Array.from(this.rotas.values()).find(\n      (rota) => rota.practiceId === practiceId && rota.day === day\n    );\n  }\n\n  async createRota(insertRota: InsertRota): Promise<Rota> {\n    const id = this.rotaIdCounter++;\n    const rota: Rota = {\n      practiceId: insertRota.practiceId,\n      day: insertRota.day,\n      requirements: insertRota.requirements,\n      assignments: insertRota.assignments,\n      id,\n      createdAt: new Date(),\n    };\n    this.rotas.set(id, rota);\n    return rota;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":21399},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/index.ts":{"content":"import { drizzle } from \"drizzle-orm/node-postgres\";\nimport { Pool } from \"pg\";\nimport cron from \"node-cron\";\nimport * as schema from \"./schema\";\n\nconst pool = new Pool({\n  user: process.env.PGUSER,\n  host: process.env.PGHOST,\n  database: process.env.PGDATABASE,\n  password: process.env.PGPASSWORD,\n  port: Number(process.env.PGPORT),\n  ssl: {\n    rejectUnauthorized: false,\n  },\n  connectionTimeoutMillis: 10000,\n  idleTimeoutMillis: 30000,\n  max: 10,\n  min: 2,\n});\n\n// Handle pool-level errors to prevent crashes\npool.on(\"error\", (err) => {\n  console.error(\"PostgreSQL pool error:\", err.message);\n  console.error(\"Connection will be retried automatically\");\n});\n\n// Handle individual client errors\npool.on(\"connect\", (client) => {\n  client.on(\"error\", (err) => {\n    console.error(\"PostgreSQL client error:\", err.message);\n  });\n});\n\n/**\n * Asynchronously verifies the PostgreSQL connection.\n * Ensures that any issues are logged immediately at application startup.\n */\nexport async function verifyConnection(): Promise<void> {\n  console.log(\"Testing database connection...\");\n  console.log(\"Host:\", process.env.PGHOST);\n  console.log(\"User:\", process.env.PGUSER);\n  console.log(\"Database:\", process.env.PGDATABASE);\n  console.log(\"Port:\", process.env.PGPORT);\n  try {\n    // Attempt to acquire a client from the pool\n    console.log(\"attempting connection\");\n    const client = await pool.connect();\n    console.log(\"✅ Connected to PostgreSQL database\");\n    client.release(); // Release the client back to the pool\n  } catch (error) {\n    console.error(\"❌ Error connecting to the database:\", error);\n  }\n}\n\n// Verify connection upon module load, but don't block startup on failure\nverifyConnection().catch((err) => {\n  console.error(\n    \"Initial database connection verification failed:\",\n    err.message,\n  );\n  console.log(\n    \"Application will continue, database operations may fail until connection is restored\",\n  );\n});\n\n// Export the pool to be used across the application.\nexport const db = drizzle(pool, { schema: schema });\n","size_bytes":2044},"shared/initialise.tsx":{"content":"import { db } from \"@shared/index\";\nimport {\n  users,\n  practices,\n  staff,\n  cqcStandards,\n  practiceEvidence,\n  conversations,\n  transactions,\n  invoices,\n  purchases,\n  vatReturns,\n  messages,\n} from \"./schema\";\nimport { eq } from \"drizzle-orm\";\nimport { storage } from \"server/storage\";\n\nexport async function getUsers() {\n  const result = await db.select().from(users);\n  storage.insertDBUsers(result);\n}\n\nexport async function getPracticeData(practice_id: string) {\n  const practice = await db\n    .select()\n    .from(practices)\n    .where(eq(practices.id, practice_id));\n\n  const stafflist = await db\n    .select()\n    .from(staff)\n    .where(eq(staff.practiceId, practice_id));\n\n  const cqcStandardsList = await db.select().from(cqcStandards);\n\n  const practiceEvidenceList = await db\n    .select()\n    .from(practiceEvidence)\n    .where(eq(practiceEvidence.practiceId, practice_id));\n\n  const conversationsList = await db\n    .select()\n    .from(conversations)\n    .where(eq(conversations.practiceId, practice_id));\n\n  const transactionsList = await db\n    .select()\n    .from(transactions)\n    .where(eq(transactions.practiceId, practice_id));\n\n  const invoicesList = await db\n    .select()\n    .from(invoices)\n    .where(eq(invoices.practiceId, practice_id));\n\n  const purchasesList = await db\n    .select()\n    .from(purchases)\n    .where(eq(purchases.practiceId, practice_id));\n\n  const vatReturnsList = await db\n    .select()\n    .from(vatReturns)\n    .where(eq(vatReturns.practiceId, practice_id));\n\n  storage.insertDBpractice(practice[0]);\n  storage.insertDBstafflist(stafflist);\n  storage.insertDBCQC(cqcStandardsList);\n  storage.insertDBEvidence(practiceEvidenceList);\n  storage.insertDBconversations(conversationsList);\n  storage.insertDBtransactions(transactionsList);\n  storage.insertDBinvoices(invoicesList);\n  storage.insertDBpurchases(purchasesList);\n  storage.insertDBvatReturn(vatReturnsList);\n}\n\nexport async function getMessageData(conversation_Id: string) {\n  const messagesList = await db\n    .select()\n    .from(messages)\n    .where(eq(messages.conversationId, conversation_Id));\n\n  storage.insertMessages(messagesList);\n}\n","size_bytes":2154},"shared/migrate.ts":{"content":"import { Pool } from \"pg\";\nimport { drizzle } from \"drizzle-orm/node-postgres\";\nimport { migrate } from \"drizzle-orm/node-postgres/migrator\";\nimport \"dotenv/config\";\n\nconst pool = new Pool({\n  connectionString: process.env.DATABASE_URL,\n});\n\nconst db = drizzle(pool);\n\nasync function main() {\n  console.log(\"migration started...\");\n  await migrate(db, { migrationsFolder: \"drizzle\" });\n  console.log(\"migration ended...\");\n  process.exit(0);\n}\n\nmain().catch((err) => {\n  console.log(err);\n  process.exit(0);\n});\n","size_bytes":512},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport {\n  pgTable,\n  text,\n  timestamp,\n  decimal,\n  integer,\n  boolean,\n  jsonb,\n  pgEnum,\n  primaryKey,\n  date,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Enums\n//staff is doctors nurses and janitors etc user is admin staff and poweruser practice manager\nexport const userRoleEnum = pgEnum(\"user_role\", [\"staff\", \"poweruser\", \"user\"]);\nexport const jobEnum = pgEnum(\"job\", [\n  \"doctor\",\n  \"nurse\",\n  \"business\",\n  \"admin\",\n  \"reception\",\n  \"pharmacy\",\n  \"physio\",\n  \"health visitor\",\n  \"dentist\",\n  \"dental therapist\",\n  \"hygienist\",\n]);\nexport const moduleStatusEnum = pgEnum(\"module_status\", [\n  \"good\",\n  \"attention\",\n  \"critical\",\n]);\nexport const staffContractTypeEnum = pgEnum(\"contract_type\", [\n  \"permanent\",\n  \"temporary\",\n  \"locum\",\n  \"contractor\",\n]);\nexport const reviewStatusEnum = pgEnum(\"review_status\", [\n  \"compliant\",\n  \"needs_review\",\n  \"non_compliant\",\n]);\nexport const shiftEnum = pgEnum(\"shift_pattern\", [\n  \"all day\",\n  \"am\",\n  \"pm\",\n  \"not in\",\n]);\nexport const transactionCategoryEnum = pgEnum(\"in_out\", [\"income\", \"expense\"]);\n\n// Users table\nexport const users = pgTable(\"users\", {\n  employeeId: text(\"employee_id\")\n    .primaryKey()\n    .references(() => people.id, { onDelete: \"no action\" })\n    .notNull(),\n  hashedPassword: text(\"hashed_password\").notNull(),\n  salt: text(\"salt\").notNull(),\n  practiceId: text(\"practice_id\")\n    .references(() => practices.email, { onDelete: \"no action\" })\n    .notNull(),\n  role: userRoleEnum(\"role\").notNull().default(\"user\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n//People table\nexport const people = pgTable(\"users\", {\n  id: text(\"id\").primaryKey(),\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  email: text(\"email\").notNull().unique(),\n});\n\n// Practices table\nexport const practices = pgTable(\"practices\", {\n  name: text(\"name\").notNull(),\n  address: text(\"address\"),\n  phone: text(\"phone\"),\n  email: text(\"email\").primaryKey(),\n  cqcRegistrationNumber: text(\"cqc_registration_number\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const shifts = pgTable(\"shifts\", {\n  email: text(\"email\")\n    .primaryKey()\n    .references(() => practices.email, { onDelete: \"no action\" }),\n  mon: shiftEnum(\"shift_pattern\"),\n  tue: shiftEnum(\"shift_pattern\"),\n  wed: shiftEnum(\"shift_pattern\"),\n  thu: shiftEnum(\"shift_pattern\"),\n  fri: shiftEnum(\"shift_pattern\"),\n});\n\n// Staff table\nexport const staff = pgTable(\"staff\", {\n  practiceId: text(\"practice_id\")\n    .references(() => practices.email, { onDelete: \"no action\" })\n    .notNull(),\n  employeeId: text(\"employee_id\")\n    .references(() => people.id, { onDelete: \"no action\" })\n    .notNull()\n    .primaryKey(),\n  title: text(\"title\"),\n  email: text(\"email\"),\n  phone: text(\"phone\"),\n  address: text(\"address\"),\n  dateOfBirth: date(\"date_of_birth\"),\n  niNumber: text(\"ni_number\"),\n  position: jobEnum(\"position\").notNull(),\n  department: text(\"department\").notNull(),\n  startDate: date(\"start_date\").notNull(),\n  contract: staffContractTypeEnum(\"contract\").notNull(),\n  salary: decimal(\"salary\", { precision: 10, scale: 2 }),\n  workingHours: shiftEnum(\"working_hours\").array(7),\n  annualLeave: integer(\"annual_leave\").default(28),\n  studyLeave: integer(\"study_leave\").default(5),\n  otherLeave: integer(\"other_leave\").default(0),\n  professionalBody: text(\"professional_body\"),\n  professionalBodyNumber: text(\"professional_body_number\"),\n  appraisalDate: date(\"appraisal_date\"),\n  nextAppraisal: date(\"appraisal_next\"),\n  revalidationInfo: text(\"revalidation_info\"),\n  dbsCheckExpiry: text(\"dbs_check_expiry\"),\n  emergencyContactName: text(\"emergency_contact_name\"),\n  emergencyContactPhone: text(\"emergency_contact_phone\"),\n  emergencyContactRelation: text(\"emergency_contact_relation\"),\n  status: text(\"status\").default(\"active\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// CQC Standards table\nexport const cqcStandards = pgTable(\"cqc_standards\", {\n  regulationId: text(\"regulation_id\").primaryKey().notNull(),\n  title: text(\"title\").notNull(),\n  summary: text(\"summary\"),\n  keyQuestion: text(\"key_question\").notNull(),\n  sourceUrl: text(\"source_url\"),\n  lastCheckedForUpdate: timestamp(\"last_checked_for_update\").defaultNow(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Practice Evidence table\nexport const practiceEvidence = pgTable(\"practice_evidence\", {\n  practiceId: text(\"practice_id\")\n    .references(() => practices.email, { onDelete: \"no action\" })\n    .notNull(),\n  fileName: text(\"file_name\").notNull().primaryKey(),\n  description: text(\"description\"),\n  uploadDate: timestamp(\"upload_date\").defaultNow(),\n  reviewStatus: reviewStatusEnum(\"status\").notNull().default(\"needs_review\"),\n  standardIds: text(\"standard_ids\").array(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Appraisal Evidence table\nexport const appraisalEvidence = pgTable(\"appraisal_evidence\", {\n  practiceId: text(\"practice_id\")\n    .references(() => practices.email, { onDelete: \"no action\" })\n    .notNull(),\n  fileName: text(\"file_name\").notNull().primaryKey(),\n  path: text(\"file_path\").notNull(),\n  description: text(\"description\"),\n  employeeId: text(\"employee_id\")\n    .references(() => people.id, { onDelete: \"no action\" })\n    .notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Policy table\nexport const policy = pgTable(\"policy\", {\n  practiceId: text(\"practice_id\")\n    .references(() => practices.email, { onDelete: \"no action\" })\n    .notNull(),\n  fileName: text(\"file_name\").notNull().primaryKey(),\n  path: text(\"file_path\").notNull(),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Conversations table\nexport const conversations = pgTable(\"conversations\", {\n  id: integer(\"conversation_id\").primaryKey().generatedAlwaysAsIdentity(),\n  practiceId: text(\"practice_id\")\n    .references(() => practices.email, { onDelete: \"no action\" })\n    .notNull(),\n  participantIds: text(\"participant_ids\").array().notNull(),\n  title: text(\"title\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Messages table\nexport const messages = pgTable(\"messages\", {\n  id: integer(\"message_id\").primaryKey().generatedAlwaysAsIdentity(),\n  conversationId: integer(\"conversation_id\")\n    .references(() => conversations.id, { onDelete: \"no action\" })\n    .notNull(),\n  senderId: text(\"sender_id\").notNull(),\n  content: text(\"content\").notNull(),\n  blocked: boolean(\"blocked\").default(false),\n  blockReason: text(\"block_reason\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Transactions table\nexport const transactions = pgTable(\"transactions\", {\n  id: integer(\"transaction_id\").primaryKey().generatedAlwaysAsIdentity(),\n  practiceId: text(\"practice_id\")\n    .references(() => practices.email, { onDelete: \"no action\" })\n    .notNull(),\n  description: text(\"description\").notNull(),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  category: transactionCategoryEnum(\"category\").notNull(),\n  subcategory: text(\"subcategory\"),\n  date: date(\"date\").notNull(),\n  bankReference: text(\"bank_reference\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Invoices table\nexport const invoices = pgTable(\"invoices\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  practiceId: text(\"practice_id\")\n    .references(() => practices.email, { onDelete: \"no action\" })\n    .notNull(),\n  invoiceNumber: text(\"invoice_number\").notNull(),\n  clientName: text(\"client_name\").notNull(),\n  clientEmail: text(\"client_email\"),\n  description: text(\"description\").notNull(),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  vatAmount: decimal(\"vat_amount\", { precision: 10, scale: 2 }),\n  totalAmount: decimal(\"total_amount\", { precision: 10, scale: 2 }).notNull(),\n  status: text(\"status\").default(\"draft\"),\n  dueDate: date(\"due_date\"),\n  paidDate: date(\"paid_date\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Purchases table\nexport const purchases = pgTable(\"purchases\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  practiceId: text(\"practice_id\")\n    .references(() => practices.email, { onDelete: \"no action\" })\n    .notNull(),\n  description: text(\"description\").notNull(),\n  supplier: text(\"supplier\").notNull(),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  vatAmount: decimal(\"vat_amount\", { precision: 10, scale: 2 }),\n  totalAmount: decimal(\"total_amount\", { precision: 10, scale: 2 }).notNull(),\n  category: text(\"category\").notNull(),\n  receiptUrl: text(\"receipt_url\"),\n  date: date(\"date\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// VAT Returns table\nexport const vatReturns = pgTable(\"vat_returns\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  practiceId: text(\"practice_id\")\n    .references(() => practices.email, { onDelete: \"no action\" })\n    .notNull(),\n  periodStart: date(\"period_start\").notNull(),\n  periodEnd: date(\"period_end\").notNull(),\n  vatDue: decimal(\"vat_due\", { precision: 10, scale: 2 }).notNull(),\n  vatReclaimed: decimal(\"vat_reclaimed\", { precision: 10, scale: 2 }).notNull(),\n  netVat: decimal(\"net_vat\", { precision: 10, scale: 2 }).notNull(),\n  status: text(\"status\").default(\"draft\"),\n  submittedAt: timestamp(\"submitted_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n//relational tables\nexport const userPersonRelation = pgTable(\"user_person_relation\", {\n  userId: text(\"user_id\")\n    .primaryKey()\n    .references(() => users.employeeId, { onDelete: \"cascade\" })\n    .notNull(),\n  personId: text(\"person_id\")\n    .references(() => people.id, { onDelete: \"cascade\" })\n    .notNull(),\n});\n\n// Rotas table\nexport const rotas = pgTable(\"rotas\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  practiceId: text(\"practice_id\")\n    .references(() => practices.email, { onDelete: \"no action\" })\n    .notNull(),\n  day: text(\"day\").notNull(),\n  requirements: jsonb(\"requirements\").notNull(),\n  assignments: jsonb(\"assignments\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  createdAt: true,\n});\n\nexport const insertPersonSchema = createInsertSchema(people);\n\nexport const insertStaffSchema = createInsertSchema(staff, {\n  employeeId: z.string().min(1, \"Id is required\"),\n}).omit({\n  createdAt: true,\n});\n\nexport const insertCqcStandardSchema = createInsertSchema(cqcStandards).omit({\n  createdAt: true,\n  lastCheckedForUpdate: true,\n});\n\nexport const insertPracticeEvidenceSchema = createInsertSchema(\n  practiceEvidence,\n).omit({\n  createdAt: true,\n  uploadDate: true,\n});\n\nexport const insertConversationSchema = createInsertSchema(conversations).omit({\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertMessageSchema = createInsertSchema(messages).omit({\n  createdAt: true,\n});\n\nexport const insertTransactionSchema = createInsertSchema(transactions).omit({\n  createdAt: true,\n});\n\nexport const insertInvoiceSchema = createInsertSchema(invoices).omit({\n  createdAt: true,\n});\n\nexport const insertPurchaseSchema = createInsertSchema(purchases).omit({\n  createdAt: true,\n});\n\nexport const insertVatReturnSchema = createInsertSchema(vatReturns).omit({\n  createdAt: true,\n});\n\nexport const insertShiftSchema = createInsertSchema(shifts);\n\nexport const insertAppraisalEvidenceSchema = createInsertSchema(\n  appraisalEvidence,\n).omit({\n  createdAt: true,\n});\n\nexport const insertPolicySchema = createInsertSchema(policy).omit({\n  createdAt: true,\n});\n\nexport const insertRotaSchema = createInsertSchema(rotas).omit({\n  createdAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type Practice = typeof practices.$inferSelect;\n\nexport type Staff = typeof staff.$inferSelect;\nexport type InsertStaff = z.infer<typeof insertStaffSchema>;\n\nexport type CqcStandard = typeof cqcStandards.$inferSelect;\nexport type InsertCqcStandard = z.infer<typeof insertCqcStandardSchema>;\n\nexport type PracticeEvidence = typeof practiceEvidence.$inferSelect;\nexport type InsertPracticeEvidence = z.infer<\n  typeof insertPracticeEvidenceSchema\n>;\n\nexport type Conversation = typeof conversations.$inferSelect;\nexport type InsertConversation = z.infer<typeof insertConversationSchema>;\n\nexport type Message = typeof messages.$inferSelect;\nexport type InsertMessage = z.infer<typeof insertMessageSchema>;\n\nexport type Transaction = typeof transactions.$inferSelect;\nexport type InsertTransaction = z.infer<typeof insertTransactionSchema>;\n\nexport type Invoice = typeof invoices.$inferSelect;\nexport type InsertInvoice = z.infer<typeof insertInvoiceSchema>;\n\nexport type Purchase = typeof purchases.$inferSelect;\nexport type InsertPurchase = z.infer<typeof insertPurchaseSchema>;\n\nexport type VatReturn = typeof vatReturns.$inferSelect;\nexport type InsertVatReturn = z.infer<typeof insertVatReturnSchema>;\n\nexport type Person = typeof people.$inferSelect;\nexport type InsertPerson = z.infer<typeof insertPersonSchema>;\n\nexport type Shift = typeof shifts.$inferSelect;\nexport type InsertShift = z.infer<typeof insertShiftSchema>;\n\nexport type AppraisalEvidence = typeof appraisalEvidence.$inferSelect;\nexport type InsertAppraisalEvidence = z.infer<\n  typeof insertAppraisalEvidenceSchema\n>;\n\nexport type Policy = typeof policy.$inferSelect;\nexport type InsertPolicy = z.infer<typeof insertPolicySchema>;\n\nexport type Rota = typeof rotas.$inferSelect;\nexport type InsertRota = z.infer<typeof insertRotaSchema>;\n","size_bytes":13749},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport NotFound from \"@/pages/not-found\";\nimport Home from \"@/pages/home\";\nimport { AuthProvider } from \"@/components/auth/authProvider\";\nimport { AuthGuard } from \"@/components/auth/authGuard\";\nimport { useAuth } from \"@/components/auth/authProvider\";\nimport ChironHR from \"@/pages/modules/hr\";\nimport ChironCQC from \"@/pages/modules/cqc\";\nimport ChironMessaging from \"@/pages/modules/messaging\";\nimport ChironMoney from \"@/pages/modules/money\";\nimport ChironStock from \"@/pages/modules/stock\";\nimport ChironFacilities from \"@/pages/modules/facilities\";\nimport { FileUploadDemo } from \"@/pages/FileUploadDemo\";\nimport { Button } from \"./components/ui/button\";\nimport { LogOut, User } from \"lucide-react\";\nimport LoginForm from \"./components/auth/login\";\n\nfunction Router() {\n  const { user, logout } = useAuth();\n\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/modules/hr\" component={ChironHR} />\n      <Route path=\"/modules/cqc\" component={ChironCQC} />\n      <Route path=\"/modules/messaging\" component={ChironMessaging} />\n      <Route path=\"/modules/money\" component={ChironMoney} />\n      <Route path=\"/modules/stock\" component={ChironStock} />\n      <Route path=\"/modules/facilities\" component={ChironFacilities} />\n      <Route path=\"/file-upload\" component={FileUploadDemo} />\n      {/* Fallback to 404 */}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <AuthProvider>\n      <QueryClientProvider client={queryClient}>\n        <AuthGuard>\n          <TooltipProvider>\n            <Toaster />\n            <Router />\n          </TooltipProvider>\n        </AuthGuard>\n      </QueryClientProvider>\n    </AuthProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1991},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(210, 25%, 7.8431%);\n  --card: hsl(180, 6.6667%, 97.0588%);\n  --card-foreground: hsl(210, 25%, 7.8431%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(210, 25%, 7.8431%);\n  --primary: hsl(229.61, 79.45%, 36.67%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(210, 25%, 7.8431%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(240, 1.9608%, 90%);\n  --muted-foreground: hsl(210, 25%, 7.8431%);\n  --accent: hsl(211.5789, 51.3514%, 92.7451%);\n  --accent-foreground: hsl(229.61, 79.45%, 36.67%);\n  --destructive: hsl(356.3033, 90.5579%, 54.3137%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(201.4286, 30.4348%, 90.9804%);\n  --input: hsl(200, 23.0769%, 97.4510%);\n  --ring: hsl(229.61, 79.45%, 36.67%);\n  --chart-1: hsl(229.61, 79.45%, 36.67%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(180, 6.6667%, 97.0588%);\n  --sidebar-foreground: hsl(210, 25%, 7.8431%);\n  --sidebar-primary: hsl(229.61, 79.45%, 36.67%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(211.5789, 51.3514%, 92.7451%);\n  --sidebar-accent-foreground: hsl(229.61, 79.45%, 36.67%);\n  --sidebar-border: hsl(205.0000, 25.0000%, 90.5882%);\n  --sidebar-ring: hsl(229.61, 79.45%, 36.67%);\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.75rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(229.61, 79.45%, 36.67% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(229.61, 79.45%, 36.67% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(229.61, 79.45%, 36.67% / 0.00), 0px 1px 2px -1px hsl(229.61, 79.45%, 36.67% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(229.61, 79.45%, 36.67% / 0.00), 0px 1px 2px -1px hsl(229.61, 79.45%, 36.67% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(229.61, 79.45%, 36.67% / 0.00), 0px 2px 4px -1px hsl(229.61, 79.45%, 36.67% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(229.61, 79.45%, 36.67% / 0.00), 0px 4px 6px -1px hsl(229.61, 79.45%, 36.67% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(229.61, 79.45%, 36.67% / 0.00), 0px 8px 10px -1px hsl(229.61, 79.45%, 36.67% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(229.61, 79.45%, 36.67% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n  \n  /* ChironIQ Custom Colors */\n  --chiron-blue: hsl(229.61, 79.45%, 36.67%);\n  --chiron-orange: hsl(28.97, 96.23%, 45.88%);\n  --medical-green: hsl(159.66, 94.29%, 35.29%);\n  --clinical-gray: hsl(214.29, 13.95%, 54.12%);\n  --alert-red: hsl(0, 74.42%, 49.41%);\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(200, 6.6667%, 91.1765%);\n  --card: hsl(228, 9.8039%, 10%);\n  --card-foreground: hsl(0, 0%, 85.0980%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(200, 6.6667%, 91.1765%);\n  --primary: hsl(229.61, 79.45%, 36.67%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(195.0000, 15.3846%, 94.9020%);\n  --secondary-foreground: hsl(210, 25%, 7.8431%);\n  --muted: hsl(0, 0%, 9.4118%);\n  --muted-foreground: hsl(210, 3.3898%, 46.2745%);\n  --accent: hsl(205.7143, 70%, 7.8431%);\n  --accent-foreground: hsl(229.61, 79.45%, 36.67%);\n  --destructive: hsl(356.3033, 90.5579%, 54.3137%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 5.2632%, 14.9020%);\n  --input: hsl(207.6923, 27.6596%, 18.4314%);\n  --ring: hsl(229.61, 79.45%, 36.67%);\n  --chart-1: hsl(229.61, 79.45%, 36.67%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(228, 9.8039%, 10%);\n  --sidebar-foreground: hsl(0, 0%, 85.0980%);\n  --sidebar-primary: hsl(229.61, 79.45%, 36.67%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(205.7143, 70%, 7.8431%);\n  --sidebar-accent-foreground: hsl(229.61, 79.45%, 36.67%);\n  --sidebar-border: hsl(205.7143, 15.7895%, 26.0784%);\n  --sidebar-ring: hsl(229.61, 79.45%, 36.67%);\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.75rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(229.61, 79.45%, 36.67% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(229.61, 79.45%, 36.67% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(229.61, 79.45%, 36.67% / 0.00), 0px 1px 2px -1px hsl(229.61, 79.45%, 36.67% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(229.61, 79.45%, 36.67% / 0.00), 0px 1px 2px -1px hsl(229.61, 79.45%, 36.67% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(229.61, 79.45%, 36.67% / 0.00), 0px 2px 4px -1px hsl(229.61, 79.45%, 36.67% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(229.61, 79.45%, 36.67% / 0.00), 0px 4px 6px -1px hsl(229.61, 79.45%, 36.67% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(229.61, 79.45%, 36.67% / 0.00), 0px 8 10px -1px hsl(229.61, 79.45%, 36.67% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(229.61, 79.45%, 36.67% / 0.00);\n\n  /* ChironIQ Custom Colors for Dark Mode */\n  --chiron-blue: hsl(229.61, 79.45%, 45%);\n  --chiron-orange: hsl(28.97, 96.23%, 55%);\n  --medical-green: hsl(159.66, 94.29%, 45%);\n  --clinical-gray: hsl(214.29, 13.95%, 64%);\n  --alert-red: hsl(0, 74.42%, 59%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-slate-50 text-foreground;\n    font-family: 'Inter', sans-serif;\n  }\n}\n\n@layer utilities {\n  .chiron-blue {\n    color: var(--chiron-blue);\n  }\n  \n  .bg-chiron-blue {\n    background-color: var(--chiron-blue);\n  }\n  \n  .chiron-orange {\n    color: var(--chiron-orange);\n  }\n  \n  .bg-chiron-orange {\n    background-color: var(--chiron-orange);\n  }\n  \n  .medical-green {\n    color: var(--medical-green);\n  }\n  \n  .bg-medical-green {\n    background-color: var(--medical-green);\n  }\n  \n  .clinical-gray {\n    color: var(--clinical-gray);\n  }\n  \n  .bg-clinical-gray {\n    background-color: var(--clinical-gray);\n  }\n  \n  .alert-red {\n    color: var(--alert-red);\n  }\n  \n  .bg-alert-red {\n    background-color: var(--alert-red);\n  }\n}\n","size_bytes":6305},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/llm-guide.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Card } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Bot, User, Loader2, Send } from \"lucide-react\";\n\ninterface LLMGuideProps {\n  title: string;\n  subtitle: string;\n  initialMessage: string;\n  placeholder?: string;\n  className?: string;\n}\n\ninterface ChatMessage {\n  id: string;\n  role: \"user\" | \"assistant\";\n  content: string;\n  timestamp: string;\n}\n\nexport default function LLMGuide({\n  title,\n  subtitle,\n  initialMessage,\n  placeholder = \"Ask anything...\",\n  className = \"\",\n}: LLMGuideProps) {\n  const [messages, setMessages] = useState<ChatMessage[]>([\n    {\n      id: \"initial\",\n      role: \"assistant\",\n      content: initialMessage,\n      timestamp: new Date().toISOString(),\n    },\n  ]);\n  const [inputMessage, setInputMessage] = useState(\"\");\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const { toast } = useToast();\n\n  // Auto-scroll to bottom when new messages are added\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [messages]);\n\n  const chatMutation = useMutation({\n    mutationFn: async (message: string) => {\n      const response = await fetch(\"/api/ai/chat\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ message }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || \"Failed to get AI response\");\n      }\n\n      return response.json();\n    },\n    onSuccess: (data) => {\n      const aiMessage: ChatMessage = {\n        id: Date.now().toString() + \"-ai\",\n        role: \"assistant\",\n        content: data.response,\n        timestamp: data.timestamp || new Date().toISOString(),\n      };\n      setMessages((prev) => [...prev, aiMessage]);\n    },\n    onError: (error) => {\n      toast({\n        title: \"AI Chat Error\",\n        description: error.message || \"Failed to get AI response\",\n        variant: \"destructive\",\n      });\n      console.error(\"AI Chat Error:\", error);\n    },\n  });\n\n  const handleSendMessage = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!inputMessage.trim() || chatMutation.isPending) return;\n\n    // Add user message immediately\n    const userMessage: ChatMessage = {\n      id: Date.now().toString() + \"-user\",\n      role: \"user\",\n      content: inputMessage.trim(),\n      timestamp: new Date().toISOString(),\n    };\n\n    setMessages((prev) => [...prev, userMessage]);\n    setInputMessage(\"\");\n\n    // Send to AI\n    chatMutation.mutate(userMessage.content);\n  };\n\n  const formatTime = (timestamp: string) => {\n    return new Date(timestamp).toLocaleTimeString(\"en-GB\", {\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n    });\n  };\n\n  return (\n    <Card className={`p-6 h-fit sticky top-8 ${className}`}>\n      <div className=\"flex items-center mb-4\">\n        <div className=\"w-10 h-10 bg-gradient-to-br from-chiron-blue to-chiron-orange rounded-lg flex items-center justify-center mr-3\">\n          <Bot className=\"w-5 h-5 text-white\" />\n        </div>\n        <div>\n          <h3 className=\"font-semibold text-slate-900\">{title}</h3>\n          <p className=\"text-xs text-clinical-gray\">{subtitle}</p>\n        </div>\n      </div>\n\n      <div\n        className=\"space-y-3 mb-4 max-h-64 overflow-y-auto\"\n        data-testid=\"chat-messages\"\n      >\n        {messages.map((message) => (\n          <div key={message.id} className=\"flex\">\n            <div\n              className={`w-6 h-6 rounded-full flex-shrink-0 flex items-center justify-center mr-2 ${\n                message.role === \"assistant\"\n                  ? \"bg-chiron-blue\"\n                  : \"bg-clinical-gray\"\n              }`}\n            >\n              {message.role === \"assistant\" ? (\n                <Bot className=\"w-3 h-3 text-white\" />\n              ) : (\n                <User className=\"w-3 h-3 text-white\" />\n              )}\n            </div>\n            <div\n              className={`rounded-lg p-3 text-sm max-w-xs ${\n                message.role === \"assistant\"\n                  ? \"bg-slate-50 text-slate-900\"\n                  : \"bg-chiron-blue text-white ml-auto\"\n              }`}\n            >\n              <p className=\"whitespace-pre-wrap\">{message.content}</p>\n              <p\n                className={`text-xs mt-1 ${\n                  message.role === \"assistant\"\n                    ? \"text-clinical-gray\"\n                    : \"text-blue-200\"\n                }`}\n              >\n                {formatTime(message.timestamp)}\n              </p>\n            </div>\n          </div>\n        ))}\n\n        {chatMutation.isPending && (\n          <div className=\"flex\">\n            <div className=\"w-6 h-6 bg-chiron-blue rounded-full flex-shrink-0 flex items-center justify-center mr-2\">\n              <Loader2 className=\"w-3 h-3 text-white animate-spin\" />\n            </div>\n            <div className=\"bg-slate-50 rounded-lg p-3 text-sm\">\n              <p className=\"text-clinical-gray\">AI is thinking...</p>\n            </div>\n          </div>\n        )}\n\n        <div ref={messagesEndRef} />\n      </div>\n\n      <form onSubmit={handleSendMessage} className=\"flex space-x-2\">\n        <Input\n          value={inputMessage}\n          onChange={(e) => setInputMessage(e.target.value)}\n          placeholder={placeholder}\n          className=\"flex-1 text-sm\"\n          disabled={chatMutation.isPending}\n          data-testid=\"input-ai-chat\"\n        />\n        <Button\n          type=\"submit\"\n          size=\"sm\"\n          className=\"bg-chiron-blue hover:bg-blue-800\"\n          disabled={chatMutation.isPending || !inputMessage.trim()}\n          data-testid=\"button-send-ai-message\"\n        >\n          {chatMutation.isPending ? (\n            <Loader2 className=\"w-4 h-4 animate-spin\" />\n          ) : (\n            <Send className=\"w-4 h-4\" />\n          )}\n        </Button>\n      </form>\n    </Card>\n  );\n}\n","size_bytes":6107},"client/src/components/module-logo.tsx":{"content":"import { LucideIcon } from \"lucide-react\";\nimport hrLogoPath from \"@assets/HR_1754837463723.png\";\nimport cqcLogoPath from \"@assets/cqc transparent_1754837827860.png\";\nimport messagingLogoPath from \"@assets/Screenshot 2025-08-10 at 16.15.57_1754839009063.png\";\nimport moneyLogoPath from \"@assets/Gemini_Generated_Image_ouh17aouh17aouh1_1754840637280.jpeg\";\nimport stockLogoPath from \"@assets/Screenshot 2025-08-10 at 16.48.12_1754840917179.png\";\nimport facilitiesLogoPath from \"@assets/Screenshot 2025-08-10 at 16.59.22_1754841619562.png\";\n\ninterface ModuleLogoProps {\n  moduleName: string;\n  icon: LucideIcon;\n  className?: string;\n  iconClassName?: string;\n}\n\nconst moduleColors = {\n  cqc: 'bg-chiron-blue',\n  hr: 'bg-chiron-blue', \n  messaging: 'bg-chiron-blue',\n  money: 'bg-chiron-orange',\n  stock: 'bg-chiron-orange',\n  facilities: 'bg-chiron-blue'\n};\n\nexport default function ModuleLogo({ moduleName, icon: IconComponent, className = \"w-10 h-10\", iconClassName = \"w-5 h-5\" }: ModuleLogoProps) {\n  const moduleColor = moduleColors[moduleName as keyof typeof moduleColors] || 'bg-chiron-blue';\n\n  if (moduleName === 'hr') {\n    return (\n      <img \n        src={hrLogoPath} \n        alt=\"HR Logo\" \n        className={`${className} object-contain`}\n      />\n    );\n  }\n\n  if (moduleName === 'cqc') {\n    return (\n      <img \n        src={cqcLogoPath} \n        alt=\"CQC Logo\" \n        className={`${className} object-contain`}\n      />\n    );\n  }\n\n  if (moduleName === 'messaging') {\n    return (\n      <img \n        src={messagingLogoPath} \n        alt=\"Messaging Logo\" \n        className={`${className} object-contain`}\n      />\n    );\n  }\n\n  if (moduleName === 'money') {\n    return (\n      <img \n        src={moneyLogoPath} \n        alt=\"Money Logo\" \n        className={`${className} object-contain`}\n      />\n    );\n  }\n\n  if (moduleName === 'stock') {\n    return (\n      <img \n        src={stockLogoPath} \n        alt=\"Stock Logo\" \n        className={`${className} object-contain`}\n      />\n    );\n  }\n\n  if (moduleName === 'facilities') {\n    return (\n      <img \n        src={facilitiesLogoPath} \n        alt=\"Facilities Logo\" \n        className={`${className} object-contain`}\n      />\n    );\n  }\n\n  // Fallback to default icon\n  return (\n    <div className={`${className} ${moduleColor} bg-opacity-10 rounded-lg flex items-center justify-center`}>\n      <IconComponent className={`${iconClassName} ${moduleColor.replace('bg-', 'text-')}`} />\n    </div>\n  );\n}","size_bytes":2471},"client/src/components/modules-grid.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { \n  ShieldCheck, \n  Users, \n  MessageSquare, \n  PoundSterling, \n  Package, \n  Building,\n  ArrowRight,\n  LucideIcon\n} from \"lucide-react\";\nimport hrLogoPath from \"@assets/HR_1754837463723.png\";\nimport cqcLogoPath from \"@assets/cqc transparent_1754837827860.png\";\nimport messagingLogoPath from \"@assets/Screenshot 2025-08-10 at 16.15.57_1754839009063.png\";\nimport moneyLogoPath from \"@assets/Gemini_Generated_Image_ouh17aouh17aouh1_1754840637280.jpeg\";\nimport stockLogoPath from \"@assets/Screenshot 2025-08-10 at 16.48.12_1754840917179.png\";\nimport facilitiesLogoPath from \"@assets/Screenshot 2025-08-10 at 16.59.22_1754841619562.png\";\n\ninterface Module {\n  id: string;\n  title: string;\n  name: string;\n  description: string;\n  icon: string;\n  status: 'good' | 'attention' | 'critical';\n}\n\nconst iconMap: Record<string, LucideIcon> = {\n  'shield-check': ShieldCheck,\n  'users': Users,\n  'message-square': MessageSquare,\n  'pound-sterling': PoundSterling,\n  'package': Package,\n  'building': Building,\n};\n\nconst statusColors = {\n  good: 'bg-medical-green',\n  attention: 'bg-amber-500',\n  critical: 'bg-alert-red'\n};\n\nconst moduleColors = {\n  cqc: 'bg-chiron-blue',\n  hr: 'bg-chiron-blue', \n  messaging: 'bg-chiron-blue',\n  money: 'bg-chiron-orange',\n  stock: 'bg-chiron-orange',\n  facilities: 'bg-chiron-blue'\n};\n\nexport default function ModulesGrid() {\n  const { data: modules, isLoading } = useQuery<Module[]>({\n    queryKey: ['/api/modules']\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"grid grid-cols-3 gap-6\">\n        {Array.from({ length: 6 }).map((_, i) => (\n          <Card key={i} className=\"p-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <Skeleton className=\"w-12 h-12 rounded-lg\" />\n              <Skeleton className=\"w-3 h-3 rounded-full\" />\n            </div>\n            <Skeleton className=\"h-6 mb-2\" />\n            <Skeleton className=\"h-16 mb-4\" />\n            <Skeleton className=\"h-4 w-32\" />\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  if (!modules) {\n    return (\n      <div className=\"text-center py-12\">\n        <p className=\"text-clinical-gray\">Failed to load modules</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"grid grid-cols-3 gap-6\">\n      {modules.map((module) => {\n        const IconComponent = iconMap[module.icon];\n        const statusColor = statusColors[module.status];\n        const moduleColor = moduleColors[module.name as keyof typeof moduleColors] || 'bg-chiron-blue';\n        \n        return (\n          <Link key={module.id} href={`/modules/${module.name}`}>\n            <Card className=\"p-6 hover:shadow-lg transition-shadow cursor-pointer group h-full\">\n              <CardHeader className=\"p-0 mb-4\">\n                <div className=\"flex items-center justify-between\">\n                  {module.name === 'hr' ? (\n                    <img \n                      src={hrLogoPath} \n                      alt=\"HR Logo\" \n                      className=\"w-12 h-12 object-contain\"\n                    />\n                  ) : module.name === 'cqc' ? (\n                    <img \n                      src={cqcLogoPath} \n                      alt=\"CQC Logo\" \n                      className=\"w-12 h-12 object-contain\"\n                    />\n                  ) : module.name === 'messaging' ? (\n                    <img \n                      src={messagingLogoPath} \n                      alt=\"Messaging Logo\" \n                      className=\"w-12 h-12 object-contain\"\n                    />\n                  ) : module.name === 'money' ? (\n                    <img \n                      src={moneyLogoPath} \n                      alt=\"Money Logo\" \n                      className=\"w-12 h-12 object-contain\"\n                    />\n                  ) : module.name === 'stock' ? (\n                    <img \n                      src={stockLogoPath} \n                      alt=\"Stock Logo\" \n                      className=\"w-12 h-12 object-contain\"\n                    />\n                  ) : module.name === 'facilities' ? (\n                    <img \n                      src={facilitiesLogoPath} \n                      alt=\"Facilities Logo\" \n                      className=\"w-12 h-12 object-contain\"\n                    />\n                  ) : (\n                    <div className={`w-12 h-12 ${moduleColor} bg-opacity-10 rounded-lg flex items-center justify-center`}>\n                      {IconComponent && (\n                        <IconComponent className={`w-6 h-6 ${moduleColor.replace('bg-', 'text-')}`} />\n                      )}\n                    </div>\n                  )}\n                  <div className={`w-3 h-3 ${statusColor} rounded-full`}></div>\n                </div>\n              </CardHeader>\n              <CardContent className=\"p-0\">\n                <h3 className=\"text-lg font-semibold text-slate-900 mb-2\">{module.title}</h3>\n                <p className=\"text-sm text-clinical-gray mb-4 line-clamp-3\">{module.description}</p>\n                <div className=\"flex items-center text-chiron-blue text-sm font-medium group-hover:text-chiron-orange transition-colors\">\n                  <span>\n                    {module.name === 'cqc' && 'Manage Compliance'}\n                    {module.name === 'hr' && 'Manage Team'}\n                    {module.name === 'messaging' && 'Open Messages'}\n                    {module.name === 'money' && 'Manage Finances'}\n                    {module.name === 'stock' && 'Manage Stock'}\n                    {module.name === 'facilities' && 'Manage Facilities'}\n                  </span>\n                  <ArrowRight className=\"w-4 h-4 ml-1\" />\n                </div>\n              </CardContent>\n            </Card>\n          </Link>\n        );\n      })}\n    </div>\n  );\n}\n","size_bytes":6022},"client/src/components/staff-management.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { ArrowLeft, Plus, Search, Eye, Edit, Trash2 } from \"lucide-react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport LLMGuide from \"@/components/llm-guide\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertStaffSchema, staff } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useState } from \"react\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { useAuth } from \"@/components/auth/authProvider\";\n\nconst staffSchema = createInsertSchema(staff).extend({\n  firstName: z.string(),\n  lastName: z.string(),\n});\n\ntype StaffData = z.infer<typeof staffSchema>;\n\nconst staffFormSchema = insertStaffSchema\n  .extend({\n    creator: z.string(),\n    practiceId: z.string().optional(),\n    // Person fields from insertPersonSchema\n    firstName: z.string().min(1, \"First name is required\"),\n    lastName: z.string().min(1, \"Last name is required\"),\n    // Use contract field directly from schema instead of contractType\n  })\n  .omit({\n    // Remove fields that will be handled separately\n  });\n\ntype StaffFormData = z.infer<typeof staffFormSchema>;\n\ninterface StaffManagementProps {\n  onBack: () => void;\n}\n\nexport default function StaffManagement({ onBack }: StaffManagementProps) {\n  const { user, logout } = useAuth();\n  const [selectedStaff, setSelectedStaff] = useState<StaffData | null>(null);\n  const [showAddDialog, setShowAddDialog] = useState(false);\n  const [viewMode, setViewMode] = useState<\"list\" | \"view\" | \"edit\">(\"list\");\n  const [search, setSearch] = useState<String | null>(null);\n  const { toast } = useToast();\n\n  const { data: staff, isLoading } = useQuery<StaffData[]>({\n    queryKey: [\"/api/hr/staff\"],\n    queryFn: async () => {\n      const response = await apiRequest(\"GET\", \"/api/hr/staff\", user?.email);\n      const result = await response.json();\n      return result.data || [];\n    },\n  });\n\n  const form = useForm<StaffFormData>({\n    resolver: zodResolver(staffFormSchema),\n    defaultValues: {\n      employeeId: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      title: \"\",\n      email: \"\",\n      phone: \"\",\n      address: \"\",\n      dateOfBirth: \"\",\n      niNumber: \"\",\n      position: \"admin\",\n      department: \"\",\n      startDate: \"\",\n      contract: \"permanent\", // Use contract instead of contractType\n      salary: \"0\",\n      workingHours: undefined,\n      professionalBody: \"\",\n      professionalBodyNumber: \"\",\n      appraisalDate: \"\",\n      nextAppraisal: \"\",\n      revalidationInfo: \"\",\n      dbsCheckExpiry: \"\",\n      emergencyContactName: \"\",\n      emergencyContactPhone: \"\",\n      emergencyContactRelation: \"\",\n      creator: user?.email,\n    },\n  });\n\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearch(e.currentTarget.value);\n  };\n\n  const createStaffMutation = useMutation({\n    mutationFn: async (data: StaffFormData) => {\n      const response = await apiRequest(\"POST\", \"/api/hr/createstaff\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hr/staff\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/hr/metrics\"] });\n      toast({\n        title: \"Success\",\n        description: \"Staff member added successfully\",\n      });\n      setShowAddDialog(false);\n      form.reset();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to add staff member\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateStaffMutation = useMutation({\n    mutationFn: async ({\n      employeeId,\n      data,\n    }: {\n      employeeId: string;\n      data: Partial<StaffFormData>;\n    }) => {\n      const response = await apiRequest(\n        \"PUT\",\n        `/api/hr/staff/${employeeId}`,\n        data,\n      );\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hr/staff\"] });\n      toast({\n        title: \"Success\",\n        description: \"Staff member updated successfully\",\n      });\n      setViewMode(\"view\");\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update staff member\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteStaffMutation = useMutation({\n    mutationFn: async (employeeId: string) => {\n      await apiRequest(\"DELETE\", `/api/hr/staff/${employeeId}`, user?.email);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hr/staff\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/hr/metrics\"] });\n      toast({\n        title: \"Success\",\n        description: \"Staff member deleted successfully\",\n      });\n      setViewMode(\"list\");\n      setSelectedStaff(null);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete staff member\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: StaffFormData) => {\n    if (viewMode === \"edit\" && selectedStaff) {\n      updateStaffMutation.mutate({\n        employeeId: selectedStaff.employeeId,\n        data,\n      });\n    } else {\n      createStaffMutation.mutate(data);\n    }\n  };\n\n  const handleViewStaff = (staffMember: StaffData) => {\n    setSelectedStaff(staffMember);\n    setViewMode(\"view\");\n  };\n\n  const handleEditStaff = (staffMember: StaffData) => {\n    setSelectedStaff(staffMember);\n    setViewMode(\"edit\");\n    // Populate form with staff data\n    form.reset(staffMember);\n  };\n\n  if (viewMode === \"view\" && selectedStaff) {\n    return (\n      <div className=\"min-h-screen bg-slate-50\">\n        <header className=\"bg-white border-b border-slate-200 px-6 py-4\">\n          <div className=\"max-w-7xl mx-auto flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                variant=\"ghost\"\n                onClick={() => setViewMode(\"list\")}\n                className=\"flex items-center space-x-2\"\n              >\n                <ArrowLeft className=\"w-4 h-4\" />\n                <span>Back to Staff List</span>\n              </Button>\n              <div className=\"w-px h-6 bg-slate-200\"></div>\n              <h1 className=\"text-xl font-semibold text-slate-900\">\n                Staff Profile\n              </h1>\n            </div>\n            <div className=\"flex space-x-2\">\n              <Button\n                variant=\"outline\"\n                onClick={() => handleEditStaff(selectedStaff)}\n              >\n                <Edit className=\"w-4 h-4 mr-2\" />\n                Edit\n              </Button>\n              <Button\n                variant=\"destructive\"\n                onClick={() =>\n                  deleteStaffMutation.mutate(selectedStaff.employeeId)\n                }\n                disabled={deleteStaffMutation.isPending}\n              >\n                <Trash2 className=\"w-4 h-4 mr-2\" />\n                Delete\n              </Button>\n            </div>\n          </div>\n        </header>\n\n        <main className=\"max-w-7xl mx-auto px-6 py-8\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-8\">\n            <div className=\"lg:col-span-3\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                {/* Contact Information */}\n                <Card className=\"p-6\">\n                  <h3 className=\"font-semibold text-slate-900 mb-4\">\n                    Contact Information\n                  </h3>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"w-16 h-16 bg-chiron-blue rounded-full flex items-center justify-center\">\n                        <span className=\"text-white font-semibold text-lg\">\n                          {selectedStaff.firstName[0]}\n                          {selectedStaff.lastName[0]}\n                        </span>\n                      </div>\n                      <div>\n                        <h4 className=\"text-lg font-semibold text-slate-900\">\n                          {selectedStaff.title} {selectedStaff.firstName}{\" \"}\n                          {selectedStaff.lastName}\n                        </h4>\n                        <p className=\"text-clinical-gray\">\n                          {selectedStaff.position}\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"grid grid-cols-1 gap-3 mt-4\">\n                      <div className=\"flex justify-between text-sm\">\n                        <span className=\"text-clinical-gray\">Email:</span>\n                        <span className=\"text-slate-900\">\n                          {selectedStaff.email || \"Not provided\"}\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between text-sm\">\n                        <span className=\"text-clinical-gray\">Phone:</span>\n                        <span className=\"text-slate-900\">\n                          {selectedStaff.phone || \"Not provided\"}\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between text-sm\">\n                        <span className=\"text-clinical-gray\">Address:</span>\n                        <span className=\"text-slate-900\">\n                          {selectedStaff.address || \"Not provided\"}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                </Card>\n\n                {/* Employment Details */}\n                <Card className=\"p-6\">\n                  <h3 className=\"font-semibold text-slate-900 mb-4\">\n                    Employment Details\n                  </h3>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-clinical-gray\">Employee ID:</span>\n                      <span className=\"text-slate-900\">\n                        {selectedStaff.employeeId}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-clinical-gray\">Department:</span>\n                      <span className=\"text-slate-900\">\n                        {selectedStaff.department}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-clinical-gray\">Start Date:</span>\n                      <span className=\"text-slate-900\">\n                        {selectedStaff.startDate}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-clinical-gray\">Contract Type:</span>\n                      <Badge variant=\"secondary\">\n                        {selectedStaff.contract}\n                      </Badge>\n                    </div>\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-clinical-gray\">Status:</span>\n                      <Badge className=\"bg-medical-green text-white\">\n                        {selectedStaff.status || \"Active\"}\n                      </Badge>\n                    </div>\n                  </div>\n                </Card>\n\n                {/* Professional Details */}\n                <Card className=\"p-6\">\n                  <h3 className=\"font-semibold text-slate-900 mb-4\">\n                    Professional Compliance\n                  </h3>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-clinical-gray\">\n                        Professional Body:\n                      </span>\n                      <span className=\"text-slate-900\">\n                        {selectedStaff.professionalBody || \"Not applicable\"}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-clinical-gray\">\n                        Registration Number:\n                      </span>\n                      <span className=\"text-slate-900\">\n                        {selectedStaff.professionalBodyNumber ||\n                          \"Not applicable\"}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-clinical-gray\">\n                        Last Appraisal:\n                      </span>\n                      <span className=\"text-slate-900\">\n                        {selectedStaff.appraisalDate || \"Needed\"}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-clinical-gray\">\n                        Next Appraisal:\n                      </span>\n                      <span className=\"text-slate-900\">\n                        {selectedStaff.nextAppraisal || \"Now\"}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-clinical-gray\">\n                        DBS Check Expiry:\n                      </span>\n                      <span className=\"text-slate-900\">\n                        {selectedStaff.dbsCheckExpiry || \"Not provided\"}\n                      </span>\n                    </div>\n                  </div>\n                </Card>\n\n                {/* Emergency Contact */}\n                <Card className=\"p-6\">\n                  <h3 className=\"font-semibold text-slate-900 mb-4\">\n                    Emergency Contact\n                  </h3>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-clinical-gray\">Name:</span>\n                      <span className=\"text-slate-900\">\n                        {selectedStaff.emergencyContactName || \"Not provided\"}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-clinical-gray\">Phone:</span>\n                      <span className=\"text-slate-900\">\n                        {selectedStaff.emergencyContactPhone || \"Not provided\"}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-clinical-gray\">Relation:</span>\n                      <span className=\"text-slate-900\">\n                        {selectedStaff.emergencyContactRelation ||\n                          \"Not provided\"}\n                      </span>\n                    </div>\n                  </div>\n                </Card>\n              </div>\n            </div>\n\n            <div className=\"lg:col-span-1\">\n              <LLMGuide\n                title=\"Staff Guide\"\n                subtitle=\"Management assistance\"\n                initialMessage=\"I can help you with staff records, compliance tracking, and HR policies. What would you like to know about this staff member?\"\n                placeholder=\"Ask about staff...\"\n              />\n            </div>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  if (viewMode === \"edit\" && selectedStaff) {\n    return (\n      <div className=\"min-h-screen bg-slate-50\">\n        <header className=\"bg-white border-b border-slate-200 px-6 py-4\">\n          <div className=\"max-w-7xl mx-auto flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                variant=\"ghost\"\n                onClick={() => setViewMode(\"view\")}\n                className=\"flex items-center space-x-2\"\n              >\n                <ArrowLeft className=\"w-4 h-4\" />\n                <span>Back to Profile</span>\n              </Button>\n              <div className=\"w-px h-6 bg-slate-200\"></div>\n              <h1 className=\"text-xl font-semibold text-slate-900\">\n                Edit Staff Member\n              </h1>\n            </div>\n          </div>\n        </header>\n\n        <main className=\"max-w-7xl mx-auto px-6 py-8\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-8\">\n            <div className=\"lg:col-span-3\">\n              <Card className=\"p-6\">\n                <Form {...form}>\n                  <form\n                    onSubmit={form.handleSubmit(onSubmit)}\n                    className=\"space-y-6\"\n                  >\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"employeeId\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Employee ID *</FormLabel>\n                            <FormControl>\n                              <Input {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name=\"title\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Title</FormLabel>\n                            <FormControl>\n                              <Input\n                                placeholder=\"Dr., Mr., Ms., etc.\"\n                                {...field}\n                                value={field.value || \"\"}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"firstName\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>First Name *</FormLabel>\n                            <FormControl>\n                              <Input {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name=\"lastName\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Last Name *</FormLabel>\n                            <FormControl>\n                              <Input {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"position\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Position</FormLabel>\n                            <Select\n                              onValueChange={field.onChange}\n                              defaultValue={field.value}\n                            >\n                              <FormControl>\n                                <SelectTrigger>\n                                  <SelectValue placeholder=\"Select a role\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                <SelectItem value=\"doctor\">Doctor</SelectItem>\n                                <SelectItem value=\"nurse\">Nurse</SelectItem>\n                                <SelectItem value=\"business\">\n                                  Business\n                                </SelectItem>\n                                <SelectItem value=\"admin\">Admin</SelectItem>\n                                <SelectItem value=\"reception\">\n                                  Reception\n                                </SelectItem>\n                                <SelectItem value=\"pharmacy\">\n                                  Pharmacy\n                                </SelectItem>\n                                <SelectItem value=\"physio\">Physio</SelectItem>\n                                <SelectItem value=\"health visitor\">\n                                  Health Visitor\n                                </SelectItem>\n                                <SelectItem value=\"dentist\">Dentist</SelectItem>\n                                <SelectItem value=\"dental therapist\">\n                                  Dental therapist\n                                </SelectItem>\n                                <SelectItem value=\"hygienist\">\n                                  Hygienist\n                                </SelectItem>\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name=\"department\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Department *</FormLabel>\n                            <FormControl>\n                              <Input {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"email\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Email</FormLabel>\n                            <FormControl>\n                              <Input\n                                type=\"email\"\n                                {...field}\n                                value={field.value || \"\"}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name=\"phone\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Phone</FormLabel>\n                            <FormControl>\n                              <Input {...field} value={field.value || \"\"} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"address\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Address</FormLabel>\n                            <FormControl>\n                              <Input {...field} value={field.value || \"\"} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name=\"dateOfBirth\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Date Of Birth</FormLabel>\n                            <FormControl>\n                              <Input\n                                type=\"date\"\n                                {...field}\n                                value={field.value || \"\"}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"dbsCheckExpiry\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>DBS Check Expiry Date</FormLabel>\n                            <FormControl>\n                              <Input\n                                type=\"date\"\n                                {...field}\n                                value={field.value || \"Now\"}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name=\"startDate\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Start Date</FormLabel>\n                            <FormControl>\n                              <Input\n                                type=\"date\"\n                                {...field}\n                                value={field.value || \"\"}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"niNumber\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Ni Number</FormLabel>\n                            <FormControl>\n                              <Input {...field} value={field.value || \"\"} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name=\"salary\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Salary</FormLabel>\n                            <FormControl>\n                              <Input {...field} value={field.value || \"\"} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"professionalBody\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Professional Body</FormLabel>\n                            <FormControl>\n                              <Input {...field} value={field.value || \"\"} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name=\"professionalBodyNumber\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Professional Body Number</FormLabel>\n                            <FormControl>\n                              <Input {...field} value={field.value || \"\"} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"emergencyContactName\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Emergency Contact Name</FormLabel>\n                            <FormControl>\n                              <Input {...field} value={field.value || \"\"} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name=\"emergencyContactPhone\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Emergency Contact Phone</FormLabel>\n                            <FormControl>\n                              <Input {...field} value={field.value || \"\"} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name=\"emergencyContactRelation\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Emergency Contact Relation</FormLabel>\n                            <FormControl>\n                              <Input {...field} value={field.value || \"\"} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <div className=\"flex justify-end space-x-4\">\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        onClick={() => setViewMode(\"view\")}\n                      >\n                        Cancel\n                      </Button>\n                      <Button\n                        type=\"submit\"\n                        disabled={updateStaffMutation.isPending}\n                      >\n                        {updateStaffMutation.isPending\n                          ? \"Updating...\"\n                          : \"Update Staff Member\"}\n                      </Button>\n                    </div>\n                  </form>\n                </Form>\n              </Card>\n            </div>\n\n            <div className=\"lg:col-span-1\">\n              <LLMGuide\n                title=\"Staff Guide\"\n                subtitle=\"Management assistance\"\n                initialMessage=\"I can help you with staff records, compliance tracking, and HR policies. What would you like to know?\"\n                placeholder=\"Ask about staff...\"\n              />\n            </div>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      <header className=\"bg-white border-b border-slate-200 px-6 py-4\">\n        <div className=\"max-w-7xl mx-auto flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <Button\n              variant=\"ghost\"\n              onClick={onBack}\n              className=\"flex items-center space-x-2\"\n            >\n              <ArrowLeft className=\"w-4 h-4\" />\n              <span>Back to HR</span>\n            </Button>\n            <div className=\"w-px h-6 bg-slate-200\"></div>\n            <h1 className=\"text-xl font-semibold text-slate-900\">\n              Staff Management\n            </h1>\n          </div>\n          <Dialog open={showAddDialog} onOpenChange={setShowAddDialog}>\n            <DialogTrigger asChild>\n              <Button className=\"bg-chiron-blue hover:bg-blue-800\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Add Staff Member\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n              <DialogHeader>\n                <DialogTitle>Add New Staff Member</DialogTitle>\n              </DialogHeader>\n              <Form {...form}>\n                <form\n                  onSubmit={form.handleSubmit(onSubmit)}\n                  className=\"space-y-4\"\n                >\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"employeeId\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Employee ID *</FormLabel>\n                          <FormControl>\n                            <Input {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"title\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Title</FormLabel>\n                          <FormControl>\n                            <Input\n                              placeholder=\"Dr., Mr., Ms., etc.\"\n                              {...field}\n                              value={field.value || \"\"}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"firstName\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>First Name *</FormLabel>\n                          <FormControl>\n                            <Input {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"lastName\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Last Name *</FormLabel>\n                          <FormControl>\n                            <Input {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"position\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Position</FormLabel>\n                          <Select\n                            onValueChange={field.onChange}\n                            defaultValue={field.value}\n                          >\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select a role\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"doctor\">Doctor</SelectItem>\n                              <SelectItem value=\"nurse\">Nurse</SelectItem>\n                              <SelectItem value=\"business\">Business</SelectItem>\n                              <SelectItem value=\"admin\">Admin</SelectItem>\n                              <SelectItem value=\"reception\">\n                                Reception\n                              </SelectItem>\n                              <SelectItem value=\"pharmacy\">Pharmacy</SelectItem>\n                              <SelectItem value=\"physio\">Physio</SelectItem>\n                              <SelectItem value=\"health visitor\">\n                                Health Visitor\n                              </SelectItem>\n                              <SelectItem value=\"dentist\">Dentist</SelectItem>\n                              <SelectItem value=\"dental therapist\">\n                                Dental therapist\n                              </SelectItem>\n                              <SelectItem value=\"hygienist\">\n                                hygienist\n                              </SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"department\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Department *</FormLabel>\n                          <FormControl>\n                            <Input {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"email\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Email</FormLabel>\n                          <FormControl>\n                            <Input\n                              type=\"email\"\n                              {...field}\n                              value={field.value || \"\"}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"phone\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Phone</FormLabel>\n                          <FormControl>\n                            <Input {...field} value={field.value || \"\"} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"address\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Address</FormLabel>\n                          <FormControl>\n                            <Input {...field} value={field.value || \"\"} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"dateOfBirth\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Date Of Birth</FormLabel>\n                          <FormControl>\n                            <Input\n                              type=\"date\"\n                              {...field}\n                              value={field.value || \"\"}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"dbsCheckExpiry\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>DBS Check Expiry Date</FormLabel>\n                          <FormControl>\n                            <Input\n                              type=\"date\"\n                              {...field}\n                              value={field.value || \"Now\"}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"startDate\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Start Date</FormLabel>\n                          <FormControl>\n                            <Input\n                              type=\"date\"\n                              {...field}\n                              value={field.value || \"\"}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"niNumber\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Ni Number</FormLabel>\n                          <FormControl>\n                            <Input {...field} value={field.value || \"\"} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"salary\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Salary</FormLabel>\n                          <FormControl>\n                            <Input {...field} value={field.value || \"\"} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"professionalBody\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Professional Body</FormLabel>\n                          <FormControl>\n                            <Input {...field} value={field.value || \"\"} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"professionalBodyNumber\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Professional Body Number</FormLabel>\n                          <FormControl>\n                            <Input {...field} value={field.value || \"\"} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"emergencyContactName\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Emergency Contact Name</FormLabel>\n                          <FormControl>\n                            <Input {...field} value={field.value || \"\"} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"emergencyContactPhone\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Emergency Contact Phone</FormLabel>\n                          <FormControl>\n                            <Input {...field} value={field.value || \"\"} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"emergencyContactRelation\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Emergency Contact Relation</FormLabel>\n                          <FormControl>\n                            <Input {...field} value={field.value || \"\"} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <div className=\"flex justify-end space-x-4\">\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={() => setShowAddDialog(false)}\n                    >\n                      Cancel\n                    </Button>\n                    <Button\n                      type=\"submit\"\n                      disabled={createStaffMutation.isPending}\n                    >\n                      {createStaffMutation.isPending\n                        ? \"Adding...\"\n                        : \"Add Staff Member\"}\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </header>\n\n      <main className=\"max-w-7xl mx-auto px-6 py-8\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-8\">\n          <div className=\"lg:col-span-3\">\n            {/* Search and Filters */}\n            <Card className=\"p-6 mb-6\">\n              <div className=\"flex space-x-4\">\n                <div className=\"flex-1 relative\">\n                  <Search className=\"w-4 h-4 absolute left-3 top-3 text-clinical-gray\" />\n                  <Input\n                    placeholder=\"Search staff members...\"\n                    className=\"pl-10\"\n                    onChange={onChange}\n                  />\n                </div>\n                <Select>\n                  <SelectTrigger className=\"w-48\">\n                    <SelectValue placeholder=\"All Departments\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Departments</SelectItem>\n                    <SelectItem value=\"clinical\">Clinical</SelectItem>\n                    <SelectItem value=\"administration\">\n                      Administration\n                    </SelectItem>\n                    <SelectItem value=\"management\">Management</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </Card>\n\n            {/* Staff Grid */}\n            {isLoading ? (\n              <div className=\"text-center py-8\">\n                <p className=\"text-clinical-gray\">Loading staff...</p>\n              </div>\n            ) : !staff || staff.length === 0 ? (\n              <div className=\"text-center py-12\">\n                <p className=\"text-clinical-gray mb-4\">\n                  No staff members found\n                </p>\n                <Button\n                  onClick={() => setShowAddDialog(true)}\n                  className=\"bg-chiron-blue hover:bg-blue-800\"\n                >\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Add First Staff Member\n                </Button>\n              </div>\n            ) : (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {staff.map((staffMember) => {\n                  if (\n                    search == null ||\n                    staffMember.firstName\n                      .toLowerCase()\n                      .includes(search.toLowerCase()) ||\n                    search == \"\" ||\n                    staffMember.lastName\n                      .toLowerCase()\n                      .includes(search.toLowerCase()) ||\n                    staffMember.employeeId\n                      .toLowerCase()\n                      .includes(search.toLowerCase())\n                  ) {\n                    return (\n                      <Card key={staffMember.employeeId} className=\"p-6\">\n                        <CardContent className=\"p-0\">\n                          <div className=\"flex items-center space-x-4 mb-4\">\n                            <div className=\"w-12 h-12 bg-chiron-blue rounded-full flex items-center justify-center\">\n                              <span className=\"text-white font-semibold\">\n                                {staffMember.firstName[0]}\n                                {staffMember.lastName[0]}\n                              </span>\n                            </div>\n                            <div>\n                              <h3 className=\"font-semibold text-slate-900\">\n                                {staffMember.firstName} {staffMember.lastName}\n                              </h3>\n                              <p className=\"text-sm text-clinical-gray\">\n                                {staffMember.position}\n                              </p>\n                            </div>\n                          </div>\n                          <div className=\"space-y-2 mb-4\">\n                            <div className=\"flex justify-between text-sm\">\n                              <span className=\"text-clinical-gray\">\n                                Employee ID:\n                              </span>\n                              <span className=\"text-slate-900\">\n                                {staffMember.employeeId}\n                              </span>\n                            </div>\n                            <div className=\"flex justify-between text-sm\">\n                              <span className=\"text-clinical-gray\">\n                                Department:\n                              </span>\n                              <span className=\"text-slate-900\">\n                                {staffMember.department}\n                              </span>\n                            </div>\n                            <div className=\"flex justify-between text-sm\">\n                              <span className=\"text-clinical-gray\">\n                                Status:\n                              </span>\n                              <Badge className=\"bg-medical-green text-white\">\n                                {staffMember.status || \"Active\"}\n                              </Badge>\n                            </div>\n                          </div>\n                          <div className=\"flex space-x-2\">\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              className=\"flex-1\"\n                              onClick={() => handleViewStaff(staffMember)}\n                            >\n                              <Eye className=\"w-3 h-3 mr-1\" />\n                              View\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              className=\"flex-1 bg-chiron-blue hover:bg-blue-800\"\n                              onClick={() => handleEditStaff(staffMember)}\n                            >\n                              <Edit className=\"w-3 h-3 mr-1\" />\n                              Edit\n                            </Button>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    );\n                  }\n                })}\n              </div>\n            )}\n          </div>\n\n          <div className=\"lg:col-span-1\">\n            <LLMGuide\n              title=\"Staff Guide\"\n              subtitle=\"Management assistance\"\n              initialMessage=\"I can help you with onboarding new staff, managing contracts, and ensuring compliance. What would you like to know?\"\n              placeholder=\"Ask about staff...\"\n            />\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":55005},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/use-websocket.ts":{"content":"import { useEffect, useState, useRef } from 'react';\n\ninterface UseWebSocketReturn {\n  socket: WebSocket | null;\n  isConnected: boolean;\n  error: string | null;\n}\n\nexport default function useWebSocket(path: string): UseWebSocketReturn {\n  const [socket, setSocket] = useState<WebSocket | null>(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const reconnectTimeoutRef = useRef<NodeJS.Timeout>();\n  const reconnectAttemptsRef = useRef(0);\n  const maxReconnectAttempts = 5;\n\n  useEffect(() => {\n    const connect = () => {\n      try {\n        const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n        const wsUrl = `${protocol}//${window.location.host}${path}`;\n        const ws = new WebSocket(wsUrl);\n\n        ws.onopen = () => {\n          setIsConnected(true);\n          setError(null);\n          reconnectAttemptsRef.current = 0;\n          console.log('WebSocket connected');\n        };\n\n        ws.onclose = (event) => {\n          setIsConnected(false);\n          setSocket(null);\n          \n          // Only attempt to reconnect if it wasn't a manual close\n          if (event.code !== 1000 && reconnectAttemptsRef.current < maxReconnectAttempts) {\n            const delay = Math.pow(2, reconnectAttemptsRef.current) * 1000; // Exponential backoff\n            reconnectTimeoutRef.current = setTimeout(() => {\n              reconnectAttemptsRef.current++;\n              console.log(`WebSocket reconnection attempt ${reconnectAttemptsRef.current}`);\n              connect();\n            }, delay);\n          } else if (reconnectAttemptsRef.current >= maxReconnectAttempts) {\n            setError('Failed to connect after multiple attempts');\n          }\n        };\n\n        ws.onerror = (error) => {\n          console.error('WebSocket error:', error);\n          setError('WebSocket connection error');\n        };\n\n        setSocket(ws);\n      } catch (err) {\n        console.error('Failed to create WebSocket:', err);\n        setError('Failed to create WebSocket connection');\n      }\n    };\n\n    connect();\n\n    return () => {\n      if (reconnectTimeoutRef.current) {\n        clearTimeout(reconnectTimeoutRef.current);\n      }\n      if (socket) {\n        socket.close(1000); // Normal closure\n      }\n    };\n  }, [path]);\n\n  return {\n    socket,\n    isConnected,\n    error\n  };\n}\n","size_bytes":2384},"client/src/lib/logo.tsx":{"content":"import logoPath from \"@assets/ChironIQ_transparent_1754836671859.png\";\n\n// The props allow you to still control the size, for example <ChironLogo size={48} />\nexport default function ChironLogo({ size = 203 }: { size?: number }) {\n  return (\n    <img \n      src={logoPath} \n      alt=\"ChironIQ Logo\" \n      style={{ width: size, height: 'auto' }} \n    />\n  );\n}\n","size_bytes":362},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\n //authentication\nexport  function generateToken(userid){\n  \n}\n","size_bytes":230},"client/src/pages/home.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport ModulesGrid from \"@/components/modules-grid\";\nimport LLMGuide from \"@/components/llm-guide\";\nimport ChironLogo from \"@/lib/logo\";\nimport { Bot, Send, User } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useLocation } from \"wouter\";\nimport { z } from \"zod\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/components/auth/authProvider\";\n\nconst userSchema = z.object({\n  id: z.string(),\n  practiceId: z.string(),\n  role: z.enum([\"staff\", \"powerUser\", \"user\"]),\n  email: z.string(),\n  firstName: z.string(),\n  lastName: z.string(),\n});\n\ntype UserData = z.infer<typeof userSchema>;\n\nexport default function Home() {\n  const [, setLocation] = useLocation();\n  const { user, logout } = useAuth();\n\n  const {\n    data: userData,\n    isLoading,\n    error,\n  } = useQuery({\n    queryKey: [\"/api/home\"],\n    queryFn: async () => {\n      const response = await apiRequest(\"GET\", \"/api/home\", user?.email);\n      if (!response.ok) {\n        throw new Error(\"Authentication failed\");\n      }\n      return (await response.json()) as UserData;\n    },\n    retry: false,\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-slate-50 flex items-center justify-center\">\n        Loading...\n      </div>\n    );\n  }\n\n  if (error || !userData) {\n    //setLocation(\"/login\");\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      {/* Header */}\n      <header className=\"bg-white border-b border-slate-200 px-6 py-4 pt-[0px] pb-[0px]\">\n        <div className=\"max-w-7xl mx-auto flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex items-center space-x-3\">\n              <ChironLogo />\n              <div>\n                <h1 className=\"text-2xl font-bold text-chiron-blue\"></h1>\n                <p className=\"text-3xl font-bold italic text-[#05335b]\">\n                  Focus On Patients\n                </p>\n              </div>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            <Badge\n              variant=\"secondary\"\n              className=\"bg-green-50 text-medical-green border-green-200 hover:bg-green-50\"\n            >\n              <div className=\"w-2 h-2 bg-medical-green rounded-full animate-pulse mr-2\"></div>\n              System Operational\n            </Badge>\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-8 h-8 bg-chiron-blue rounded-full flex items-center justify-center\">\n                <User className=\"w-4 h-4 text-white\" />\n              </div>\n              <span className=\"text-sm font-medium text-slate-700\">\n                {userData?.firstName} {userData?.lastName}\n              </span>\n            </div>\n          </div>\n        </div>\n      </header>\n      {/* Main Content */}\n      <main className=\"max-w-7xl mx-auto px-6 py-8\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-5 gap-8\">\n          {/* Practice Management Modules */}\n          <div className=\"lg:col-span-3\">\n            <div className=\"mb-6\">\n              <h2 className=\"text-2xl font-bold text-slate-900 mb-2\">\n                Practice Management Modules\n              </h2>\n              <p className=\"text-clinical-gray\">\n                Comprehensive tools to manage your healthcare practice\n                efficiently\n              </p>\n            </div>\n            <ModulesGrid />\n          </div>\n\n          {/* Chiron AI Assistant */}\n          <div className=\"lg:col-span-2\">\n            <LLMGuide\n              title=\"Chiron AI Assistant\"\n              subtitle=\"Always here to help\"\n              initialMessage=\"Good morning! Your CQC compliance score is at 98%. Would you like me to review the remaining items?\"\n              placeholder=\"Ask anything...\"\n              className=\"h-[605px]\"\n            />\n          </div>\n        </div>\n      </main>\n\n      {/* Footer */}\n      <footer className=\"bg-white border-t border-slate-200 px-6 py-6 mt-auto\">\n        <div className=\"max-w-7xl mx-auto text-center\">\n          <p className=\"text-sm text-clinical-gray mb-2\">\n            © 2025 ChironIQ Healthcare Management Platform. All rights\n            reserved.\n          </p>\n          <p className=\"text-xs text-clinical-gray\"> | GDPR Compliant | </p>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":4641},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/modules/cqc.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { Link } from \"wouter\";\nimport {\n  ArrowLeft,\n  ShieldCheck,\n  Upload,\n  FileText,\n  Activity,\n  AlertCircle,\n  CheckCircle,\n  Clock,\n} from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport LLMGuide from \"@/components/llm-guide\";\nimport ModuleLogo from \"@/components/module-logo\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface CQCDashboardMetrics {\n  complianceScore: number;\n  openIssues: number;\n  totalStandards: number;\n  evidenceCount: number;\n  keyQuestions: {\n    Safe: number;\n    Effective: number;\n    Caring: number;\n    Responsive: number;\n    WellLed: number;\n  };\n}\n\ninterface CQCStandard {\n  id: string;\n  regulationId: string;\n  title: string;\n  summary: string;\n  keyQuestion: string;\n  sourceUrl: string;\n}\n\ninterface CQCActivity {\n  id: string;\n  type: string;\n  description: string;\n  timestamp: string;\n}\n\nexport default function ChironCQC() {\n  const { toast } = useToast();\n\n  const { data: metrics, isLoading: metricsLoading } =\n    useQuery<CQCDashboardMetrics>({\n      queryKey: [\"/api/cqc/dashboard\"],\n    });\n\n  const { data: standards, isLoading: standardsLoading } = useQuery<\n    CQCStandard[]\n  >({\n    queryKey: [\"/api/cqc/standards\"],\n  });\n\n  const { data: activities, isLoading: activitiesLoading } = useQuery<\n    CQCActivity[]\n  >({\n    queryKey: [\"/api/cqc/activity\"],\n  });\n\n  const uploadEvidenceMutation = useMutation({\n    mutationFn: async (evidenceData: {\n      fileName: string;\n      description: string;\n      standardIds: string[];\n    }) => {\n      const response = await fetch(\"/api/cqc/evidence\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(evidenceData),\n      });\n      if (!response.ok) throw new Error(\"Failed to upload evidence\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/cqc/dashboard\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/cqc/activity\"] });\n      toast({\n        title: \"Success\",\n        description: \"Evidence uploaded successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to upload evidence\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getQuestionColor = (score: number) => {\n    if (score >= 95) return \"text-medical-green\";\n    if (score >= 85) return \"text-amber-600\";\n    return \"text-alert-red\";\n  };\n\n  const getQuestionBgColor = (score: number) => {\n    if (score >= 95) return \"bg-green-50 border-green-200\";\n    if (score >= 85) return \"bg-amber-50 border-amber-200\";\n    return \"bg-red-50 border-red-200\";\n  };\n\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      {/* Header */}\n      <header className=\"bg-white border-b border-slate-200 px-6 py-4\">\n        <div className=\"max-w-7xl mx-auto flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <Link\n              href=\"/\"\n              className=\"flex items-center space-x-2 text-clinical-gray hover:text-chiron-blue\"\n            >\n              <ArrowLeft className=\"w-4 h-4\" />\n              <span>Back to Dashboard</span>\n            </Link>\n            <div className=\"w-px h-6 bg-slate-200\"></div>\n            <div className=\"flex items-center space-x-3\">\n              <ModuleLogo moduleName=\"cqc\" icon={ShieldCheck} />\n              <h1 className=\"text-xl font-semibold text-slate-900\">\n                ChironCQC\n              </h1>\n            </div>\n          </div>\n          <Badge\n            variant=\"secondary\"\n            className=\"bg-green-50 text-medical-green border-green-200\"\n          >\n            <div className=\"w-2 h-2 bg-medical-green rounded-full mr-2\"></div>\n            Compliance Monitoring Active\n          </Badge>\n        </div>\n      </header>\n\n      <main className=\"max-w-7xl mx-auto px-6 py-8\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-8\">\n          <div className=\"lg:col-span-3\">\n            {/* Key Metrics */}\n            <div className=\"grid grid-cols-4 gap-6 mb-8\">\n              <Card className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <h3 className=\"text-sm font-medium text-clinical-gray\">\n                    Compliance Score\n                  </h3>\n                  <ShieldCheck className=\"w-5 h-5 text-chiron-blue\" />\n                </div>\n                <p className=\"text-2xl font-bold text-slate-900\">\n                  {metricsLoading ? \"...\" : `${metrics?.complianceScore}%`}\n                </p>\n                <p className=\"text-sm text-medical-green\">Above target</p>\n              </Card>\n\n              <Card className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <h3 className=\"text-sm font-medium text-clinical-gray\">\n                    Open Issues\n                  </h3>\n                  <AlertCircle className=\"w-5 h-5 text-chiron-orange\" />\n                </div>\n                <p className=\"text-2xl font-bold text-slate-900\">\n                  {metricsLoading ? \"...\" : metrics?.openIssues}\n                </p>\n                <p className=\"text-sm text-clinical-gray\">Needs attention</p>\n              </Card>\n\n              <Card className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <h3 className=\"text-sm font-medium text-clinical-gray\">\n                    Standards\n                  </h3>\n                  <FileText className=\"w-5 h-5 text-chiron-blue\" />\n                </div>\n                <p className=\"text-2xl font-bold text-slate-900\">\n                  {metricsLoading ? \"...\" : metrics?.totalStandards}\n                </p>\n                <p className=\"text-sm text-clinical-gray\">Total monitored</p>\n              </Card>\n\n              <Card className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <h3 className=\"text-sm font-medium text-clinical-gray\">\n                    Evidence Files\n                  </h3>\n                  <Upload className=\"w-5 h-5 text-chiron-blue\" />\n                </div>\n                <p className=\"text-2xl font-bold text-slate-900\">\n                  {metricsLoading ? \"...\" : metrics?.evidenceCount}\n                </p>\n                <p className=\"text-sm text-clinical-gray\">Uploaded</p>\n              </Card>\n            </div>\n\n            {/* CQC Five Key Questions */}\n            <Card className=\"p-6 mb-8\">\n              <h3 className=\"text-lg font-semibold text-slate-900 mb-6\">\n                CQC Five Key Questions\n              </h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n                {metrics?.keyQuestions &&\n                  Object.entries(metrics.keyQuestions).map(\n                    ([question, score]) => (\n                      <div\n                        key={question}\n                        className={`p-4 rounded-lg border ${getQuestionBgColor(score)}`}\n                      >\n                        <div className=\"text-center\">\n                          <div\n                            className={`text-2xl font-bold mb-1 ${getQuestionColor(score)}`}\n                          >\n                            {score}%\n                          </div>\n                          <div className=\"text-sm font-medium text-slate-700 mb-2\">\n                            {question === \"WellLed\" ? \"Well-led\" : question}\n                          </div>\n                          <Progress value={score} className=\"h-2\" />\n                        </div>\n                      </div>\n                    ),\n                  )}\n              </div>\n            </Card>\n\n            {/* Quick Actions */}\n            <Card className=\"p-6 mb-8\">\n              <h3 className=\"text-lg font-semibold text-slate-900 mb-4\">\n                Quick Actions\n              </h3>\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                <Button\n                  variant=\"outline\"\n                  className=\"flex flex-col items-center p-4 h-auto space-y-2 hover:bg-slate-50\"\n                  onClick={() => {\n                    const fileName = prompt(\"Enter evidence file name:\");\n                    const description = prompt(\"Enter evidence description:\");\n                    if (fileName && description) {\n                      uploadEvidenceMutation.mutate({\n                        fileName,\n                        description,\n                        standardIds: [\"reg12\"], // Mock standard ID\n                      });\n                    }\n                  }}\n                  disabled={uploadEvidenceMutation.isPending}\n                >\n                  <Upload className=\"w-8 h-8 text-chiron-blue\" />\n                  <span className=\"text-sm font-medium text-slate-700\">\n                    Upload Evidence\n                  </span>\n                </Button>\n\n                <Button\n                  variant=\"outline\"\n                  className=\"flex flex-col items-center p-4 h-auto space-y-2 hover:bg-slate-50\"\n                  disabled\n                >\n                  <FileText className=\"w-8 h-8 text-chiron-blue\" />\n                  <span className=\"text-sm font-medium text-slate-700\">\n                    Generate Report\n                  </span>\n                </Button>\n\n                <Button\n                  variant=\"outline\"\n                  className=\"flex flex-col items-center p-4 h-auto space-y-2 hover:bg-slate-50\"\n                  disabled\n                >\n                  <CheckCircle className=\"w-8 h-8 text-chiron-blue\" />\n                  <span className=\"text-sm font-medium text-slate-700\">\n                    Standards Browser\n                  </span>\n                </Button>\n\n                <Button\n                  variant=\"outline\"\n                  className=\"flex flex-col items-center p-4 h-auto space-y-2 hover:bg-slate-50\"\n                  disabled\n                >\n                  <Activity className=\"w-8 h-8 text-chiron-blue\" />\n                  <span className=\"text-sm font-medium text-slate-700\">\n                    Audit Trail\n                  </span>\n                </Button>\n              </div>\n            </Card>\n\n            {/* CQC Standards Overview */}\n            <Card className=\"p-6 mb-8\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h3 className=\"text-lg font-semibold text-slate-900\">\n                  CQC Standards\n                </h3>\n                <Button variant=\"outline\" size=\"sm\" disabled>\n                  View All\n                </Button>\n              </div>\n              <div className=\"space-y-3\">\n                {standardsLoading ? (\n                  <div className=\"text-center py-4\">\n                    <p className=\"text-clinical-gray\">Loading standards...</p>\n                  </div>\n                ) : (\n                  standards?.slice(0, 3).map((standard) => (\n                    <div\n                      key={standard.id}\n                      className=\"flex items-start justify-between p-4 bg-slate-50 rounded-lg\"\n                    >\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center space-x-3 mb-2\">\n                          <Badge\n                            variant=\"outline\"\n                            className=\"text-chiron-blue border-chiron-blue\"\n                          >\n                            {standard.regulationId}\n                          </Badge>\n                          <Badge variant=\"secondary\" className=\"text-slate-600\">\n                            {standard.keyQuestion}\n                          </Badge>\n                        </div>\n                        <h4 className=\"font-semibold text-slate-900 mb-1\">\n                          {standard.title}\n                        </h4>\n                        <p className=\"text-sm text-clinical-gray\">\n                          {standard.summary}\n                        </p>\n                      </div>\n                      <div className=\"ml-4\">\n                        <CheckCircle className=\"w-5 h-5 text-medical-green\" />\n                      </div>\n                    </div>\n                  ))\n                )}\n              </div>\n            </Card>\n\n            {/* Recent Activity */}\n            <Card className=\"p-6\">\n              <h3 className=\"text-lg font-semibold text-slate-900 mb-4\">\n                Recent Compliance Activity\n              </h3>\n              <div className=\"space-y-3\">\n                {activitiesLoading ? (\n                  <div className=\"text-center py-4\">\n                    <p className=\"text-clinical-gray\">Loading activities...</p>\n                  </div>\n                ) : (\n                  activities?.map((activity) => (\n                    <div\n                      key={activity.id}\n                      className=\"flex items-center space-x-3 p-3 bg-slate-50 rounded-lg\"\n                    >\n                      <div className=\"w-8 h-8 bg-chiron-blue bg-opacity-10 rounded-full flex items-center justify-center\">\n                        {activity.type === \"evidence_upload\" ? (\n                          <Upload className=\"w-4 h-4 text-chiron-blue\" />\n                        ) : (\n                          <Activity className=\"w-4 h-4 text-chiron-blue\" />\n                        )}\n                      </div>\n                      <div className=\"flex-1\">\n                        <p className=\"text-sm font-medium text-slate-900\">\n                          {activity.description}\n                        </p>\n                        <p className=\"text-xs text-clinical-gray\">\n                          {new Date(activity.timestamp).toLocaleDateString(\n                            \"en-GB\",\n                          )}\n                        </p>\n                      </div>\n                      <Clock className=\"w-4 h-4 text-clinical-gray\" />\n                    </div>\n                  ))\n                )}\n              </div>\n            </Card>\n          </div>\n\n          {/* LLM Guide */}\n          <div className=\"lg:col-span-1\">\n            <LLMGuide\n              title=\"CQC Assistant\"\n              subtitle=\"Compliance guidance\"\n              initialMessage=\"I can help you with CQC registration, compliance monitoring, and evidence management. I have detailed knowledge of all CQC regulations. What would you like to know?\"\n              placeholder=\"Ask about CQC...\"\n            />\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":14997},"client/src/pages/modules/facilities.tsx":{"content":"import { Link } from \"wouter\";\nimport {\n  ArrowLeft,\n  Building,\n  Wrench,\n  Calendar,\n  AlertCircle,\n  CheckCircle,\n  Settings,\n} from \"lucide-react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport LLMGuide from \"@/components/llm-guide\";\nimport ModuleLogo from \"@/components/module-logo\";\n\nexport default function ChironFacilities() {\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      {/* Header */}\n      <header className=\"bg-white border-b border-slate-200 px-6 py-4\">\n        <div className=\"max-w-7xl mx-auto flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <Link\n              href=\"/\"\n              className=\"flex items-center space-x-2 text-clinical-gray hover:text-chiron-blue\"\n            >\n              <ArrowLeft className=\"w-4 h-4\" />\n              <span>Back to Dashboard</span>\n            </Link>\n            <div className=\"w-px h-6 bg-slate-200\"></div>\n            <div className=\"flex items-center space-x-3\">\n              <ModuleLogo moduleName=\"facilities\" icon={Building} />\n              <h1 className=\"text-xl font-semibold text-slate-900\">\n                ChironFacilities\n              </h1>\n            </div>\n          </div>\n          <Badge\n            variant=\"secondary\"\n            className=\"bg-green-50 text-medical-green border-green-200\"\n          >\n            <div className=\"w-2 h-2 bg-medical-green rounded-full mr-2\"></div>\n            Planning Phase\n          </Badge>\n        </div>\n      </header>\n\n      <main className=\"max-w-7xl mx-auto px-6 py-8\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-8\">\n          <div className=\"lg:col-span-3\">\n            {/* Module Overview */}\n            <Card className=\"p-8 mb-8 text-center\">\n              <div className=\"w-16 h-16 bg-chiron-blue bg-opacity-10 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Building className=\"w-8 h-8 text-chiron-blue\" />\n              </div>\n              <h2 className=\"text-2xl font-bold text-slate-900 mb-2\">\n                ChironFacilities Module\n              </h2>\n              <p className=\"text-clinical-gray mb-6\">\n                Complete facility management solution for healthcare practices,\n                including maintenance tracking, asset management, and compliance\n                monitoring.\n              </p>\n              <Badge\n                variant=\"secondary\"\n                className=\"bg-blue-100 text-chiron-blue border-blue-200 mb-4\"\n              >\n                In Planning\n              </Badge>\n              <p className=\"text-sm text-clinical-gray\">\n                Comprehensive facility management tools designed specifically\n                for healthcare environments and regulatory requirements.\n              </p>\n            </Card>\n\n            {/* Key Features */}\n            <Card className=\"p-6 mb-8\">\n              <h3 className=\"text-lg font-semibold text-slate-900 mb-4\">\n                Key Features\n              </h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"flex items-start space-x-3 p-4 bg-slate-50 rounded-lg\">\n                  <Wrench className=\"w-6 h-6 text-chiron-blue mt-1 flex-shrink-0\" />\n                  <div>\n                    <h4 className=\"font-medium text-slate-900 mb-1\">\n                      Preventive Maintenance\n                    </h4>\n                    <p className=\"text-sm text-clinical-gray\">\n                      Scheduled maintenance for medical equipment, HVAC systems,\n                      and building infrastructure\n                    </p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start space-x-3 p-4 bg-slate-50 rounded-lg\">\n                  <Calendar className=\"w-6 h-6 text-medical-green mt-1 flex-shrink-0\" />\n                  <div>\n                    <h4 className=\"font-medium text-slate-900 mb-1\">\n                      Maintenance Scheduling\n                    </h4>\n                    <p className=\"text-sm text-clinical-gray\">\n                      Automated scheduling, reminders, and work order management\n                    </p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start space-x-3 p-4 bg-slate-50 rounded-lg\">\n                  <Settings className=\"w-6 h-6 text-chiron-orange mt-1 flex-shrink-0\" />\n                  <div>\n                    <h4 className=\"font-medium text-slate-900 mb-1\">\n                      Asset Management\n                    </h4>\n                    <p className=\"text-sm text-clinical-gray\">\n                      Complete asset lifecycle tracking, warranties, and\n                      depreciation\n                    </p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start space-x-3 p-4 bg-slate-50 rounded-lg\">\n                  <CheckCircle className=\"w-6 h-6 text-chiron-blue mt-1 flex-shrink-0\" />\n                  <div>\n                    <h4 className=\"font-medium text-slate-900 mb-1\">\n                      Compliance Monitoring\n                    </h4>\n                    <p className=\"text-sm text-clinical-gray\">\n                      Healthcare facility regulations, safety inspections, and\n                      certifications\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </Card>\n\n            {/* Placeholder Dashboard */}\n            <div className=\"grid grid-cols-4 gap-6 mb-8\">\n              <Card className=\"p-6 opacity-50\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <h3 className=\"text-sm font-medium text-clinical-gray\">\n                    Total Assets\n                  </h3>\n                  <Building className=\"w-5 h-5 text-chiron-blue\" />\n                </div>\n                <p className=\"text-2xl font-bold text-slate-900\">---</p>\n                <p className=\"text-sm text-clinical-gray\">Tracked items</p>\n              </Card>\n\n              <Card className=\"p-6 opacity-50\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <h3 className=\"text-sm font-medium text-clinical-gray\">\n                    Due Maintenance\n                  </h3>\n                  <Calendar className=\"w-5 h-5 text-chiron-orange\" />\n                </div>\n                <p className=\"text-2xl font-bold text-slate-900\">---</p>\n                <p className=\"text-sm text-clinical-gray\">This month</p>\n              </Card>\n\n              <Card className=\"p-6 opacity-50\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <h3 className=\"text-sm font-medium text-clinical-gray\">\n                    Open Issues\n                  </h3>\n                  <AlertCircle className=\"w-5 h-5 text-alert-red\" />\n                </div>\n                <p className=\"text-2xl font-bold text-slate-900\">---</p>\n                <p className=\"text-sm text-clinical-gray\">Require attention</p>\n              </Card>\n\n              <Card className=\"p-6 opacity-50\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <h3 className=\"text-sm font-medium text-clinical-gray\">\n                    Compliance\n                  </h3>\n                  <CheckCircle className=\"w-5 h-5 text-medical-green\" />\n                </div>\n                <p className=\"text-2xl font-bold text-slate-900\">---</p>\n                <p className=\"text-sm text-clinical-gray\">Overall status</p>\n              </Card>\n            </div>\n\n            {/* Regulatory Focus */}\n            <Card className=\"p-6 mb-8\">\n              <h3 className=\"text-lg font-semibold text-slate-900 mb-4\">\n                Healthcare Facility Compliance\n              </h3>\n              <div className=\"space-y-4\">\n                <div className=\"border border-slate-200 rounded-lg p-4\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <h4 className=\"font-medium text-slate-900\">\n                      Medical Equipment Maintenance\n                    </h4>\n                    <Badge\n                      variant=\"outline\"\n                      className=\"text-chiron-blue border-chiron-blue\"\n                    >\n                      MHRA Compliant\n                    </Badge>\n                  </div>\n                  <p className=\"text-sm text-clinical-gray mb-3\">\n                    Ensure all medical devices meet MHRA requirements with\n                    automated maintenance schedules and documentation.\n                  </p>\n                  <div className=\"bg-slate-50 rounded p-3\">\n                    <p className=\"text-xs text-clinical-gray\">\n                      Includes: Equipment calibration, safety testing,\n                      maintenance records, and compliance certificates\n                    </p>\n                  </div>\n                </div>\n\n                <div className=\"border border-slate-200 rounded-lg p-4\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <h4 className=\"font-medium text-slate-900\">\n                      Building Safety & Fire Systems\n                    </h4>\n                    <Badge\n                      variant=\"outline\"\n                      className=\"text-medical-green border-green-300\"\n                    >\n                      Fire Safety Order\n                    </Badge>\n                  </div>\n                  <p className=\"text-sm text-clinical-gray mb-3\">\n                    Comprehensive fire safety management including equipment\n                    testing, evacuation procedures, and documentation.\n                  </p>\n                  <div className=\"bg-slate-50 rounded p-3\">\n                    <p className=\"text-xs text-clinical-gray\">\n                      Includes: Fire alarm testing, emergency lighting,\n                      extinguisher maintenance, and risk assessments\n                    </p>\n                  </div>\n                </div>\n\n                <div className=\"border border-slate-200 rounded-lg p-4\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <h4 className=\"font-medium text-slate-900\">\n                      Environmental Controls\n                    </h4>\n                    <Badge\n                      variant=\"outline\"\n                      className=\"text-chiron-orange border-orange-300\"\n                    >\n                      Health & Safety\n                    </Badge>\n                  </div>\n                  <p className=\"text-sm text-clinical-gray mb-3\">\n                    Monitor and maintain optimal environmental conditions for\n                    patient care and staff safety.\n                  </p>\n                  <div className=\"bg-slate-50 rounded p-3\">\n                    <p className=\"text-xs text-clinical-gray\">\n                      Includes: HVAC maintenance, water quality testing,\n                      temperature monitoring, and air quality assessments\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </Card>\n\n            {/* Implementation Roadmap */}\n            <Card className=\"p-6\">\n              <h3 className=\"text-lg font-semibold text-slate-900 mb-4\">\n                Implementation Roadmap\n              </h3>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-start space-x-4 pb-4 border-b border-slate-200\">\n                  <div className=\"w-8 h-8 bg-chiron-blue rounded-full flex items-center justify-center text-white text-sm font-medium flex-shrink-0\">\n                    1\n                  </div>\n                  <div>\n                    <h4 className=\"font-medium text-slate-900\">\n                      Asset Registration & Cataloging\n                    </h4>\n                    <p className=\"text-sm text-clinical-gray\">\n                      Complete facility audit, asset tagging, and digital\n                      catalog creation\n                    </p>\n                    <p className=\"text-xs text-amber-600 mt-1\">\n                      Q2 2024 - Foundation Phase\n                    </p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start space-x-4 pb-4 border-b border-slate-200\">\n                  <div className=\"w-8 h-8 bg-slate-300 rounded-full flex items-center justify-center text-white text-sm font-medium flex-shrink-0\">\n                    2\n                  </div>\n                  <div>\n                    <h4 className=\"font-medium text-slate-900\">\n                      Maintenance Management System\n                    </h4>\n                    <p className=\"text-sm text-clinical-gray\">\n                      Automated scheduling, work orders, and maintenance\n                      tracking\n                    </p>\n                    <p className=\"text-xs text-clinical-gray mt-1\">\n                      Q3 2024 - Core Features\n                    </p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start space-x-4\">\n                  <div className=\"w-8 h-8 bg-slate-300 rounded-full flex items-center justify-center text-white text-sm font-medium flex-shrink-0\">\n                    3\n                  </div>\n                  <div>\n                    <h4 className=\"font-medium text-slate-900\">\n                      Compliance & Reporting Dashboard\n                    </h4>\n                    <p className=\"text-sm text-clinical-gray\">\n                      Regulatory compliance monitoring, automated reporting, and\n                      audit trails\n                    </p>\n                    <p className=\"text-xs text-clinical-gray mt-1\">\n                      Q4 2024 - Advanced Features\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </Card>\n          </div>\n\n          {/* LLM Guide */}\n          <div className=\"lg:col-span-1\">\n            <LLMGuide\n              title=\"Facilities Assistant\"\n              subtitle=\"Property & maintenance guidance\"\n              initialMessage=\"I can help you plan your facility management strategy, understand healthcare building regulations, and optimize maintenance workflows. What aspects of facility management are most important for your practice?\"\n              placeholder=\"Ask about facilities...\"\n            />\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":14772},"client/src/pages/modules/hr.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport {\n  ArrowLeft,\n  Users,\n  UserPlus,\n  Calendar,\n  FileText,\n  BookOpen,\n  Clock,\n  Clipboard,\n  TrendingUp,\n} from \"lucide-react\";\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n} from \"@/components/ui/table\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport LLMGuide from \"@/components/llm-guide\";\nimport StaffManagement from \"@/components/staff-management\";\nimport AppraisalManagement from \"@/components/appraisal\";\nimport RotaManagement from \"@/components/rota\";\nimport ModuleLogo from \"@/components/module-logo\";\nimport { useState, useMemo } from \"react\";\nimport { z } from \"zod\";\nimport { insertStaffSchema, staff } from \"@shared/schema\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { useAuth } from \"@/components/auth/authProvider\";\nimport { useMutation } from \"@tanstack/react-query\";\n\nconst staffSchema = createInsertSchema(staff).extend({\n  firstName: z.string(),\n  lastName: z.string(),\n});\n\ntype StaffData = z.infer<typeof staffSchema>;\n\ninterface HRMetrics {\n  totalStaff: number;\n  onDuty: number;\n  pendingReviews: number;\n  leaveRequests: number;\n}\n\nexport default function ChironHR() {\n  const [currentView, setCurrentView] = useState<\n    \"dashboard\" | \"staff\" | \"appraisals\" | \"rota\"\n  >(\"dashboard\");\n  var weekday = new Array(7);\n  weekday[0] = \"Sunday\";\n  weekday[1] = \"Monday\";\n  weekday[2] = \"Tuesday\";\n  weekday[3] = \"Wednesday\";\n  weekday[4] = \"Thursday\";\n  weekday[5] = \"Friday\";\n  weekday[6] = \"Saturday\";\n  const [selectedDay, setSelectedDay] = useState<string>(\n    weekday[new Date().getDay()],\n  );\n  const { user, logout } = useAuth();\n\n  const { data: staff, isLoading } = useQuery<StaffData[]>({\n    queryKey: [\"/api/hr/staff\"],\n  });\n\n  const { data: metrics, isLoading: metricsLoading } = useQuery<HRMetrics>({\n    queryKey: [\"/api/hr/metrics\"],\n  });\n\n  // Get staff working on selected day\n  const dailySchedule = useMemo(() => {\n    if (!staff) return [];\n\n    const dayIndex = weekday.indexOf(selectedDay);\n    if (dayIndex === -1) return [];\n\n    return staff\n      .filter((staffMember) => {\n        const workingHours = staffMember.workingHours?.[dayIndex];\n        return workingHours && workingHours !== \"not in\";\n      })\n      .map((staffMember) => ({\n        ...staffMember,\n        workingHours: staffMember.workingHours?.[dayIndex] || \"not in\",\n      }))\n      .sort((a, b) => {\n        // Sort by working hours: all day first, then am, then pm\n        const order = { \"all day\": 0, am: 1, pm: 2 };\n        return (\n          (order[a.workingHours as keyof typeof order] || 3) -\n          (order[b.workingHours as keyof typeof order] || 3)\n        );\n      });\n  }, [staff, selectedDay]);\n\n  if (currentView === \"staff\") {\n    return <StaffManagement onBack={() => setCurrentView(\"dashboard\")} />;\n  }\n\n  if (currentView === \"appraisals\") {\n    return <AppraisalManagement onBack={() => setCurrentView(\"dashboard\")} />;\n  }\n\n  if (currentView === \"rota\") {\n    return <RotaManagement onBack={() => setCurrentView(\"dashboard\")} />;\n  }\n\n  const getStatusBadge = (hours: string) => {\n    if (hours === \"not in\") {\n      return (\n        <Badge\n          variant=\"secondary\"\n          className=\"bg-red-50 text-red-700 border-red-200\"\n        >\n          Not In\n        </Badge>\n      );\n    }\n    return (\n      <Badge\n        variant=\"secondary\"\n        className=\"bg-green-50 text-green-700 border-green-200\"\n      >\n        {hours}\n      </Badge>\n    );\n  };\n\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      {/* Header */}\n      <header className=\"bg-white border-b border-slate-200 px-6 py-4\">\n        <div className=\"max-w-7xl mx-auto flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <Link\n              href=\"/\"\n              className=\"flex items-center space-x-2 text-clinical-gray hover:text-chiron-blue\"\n            >\n              <ArrowLeft className=\"w-4 h-4\" />\n              <span>Back to Dashboard</span>\n            </Link>\n            <div className=\"w-px h-6 bg-slate-200\"></div>\n            <div className=\"flex items-center space-x-3\">\n              <ModuleLogo moduleName=\"hr\" icon={Users} />\n              <h1 className=\"text-xl font-semibold text-slate-900\">ChironHR</h1>\n            </div>\n          </div>\n          <Badge\n            variant=\"secondary\"\n            className=\"bg-green-50 text-medical-green border-green-200\"\n          >\n            <div className=\"w-2 h-2 bg-medical-green rounded-full mr-2\"></div>\n            All Systems Operational\n          </Badge>\n        </div>\n      </header>\n\n      <main className=\"max-w-7xl mx-auto px-6 py-8\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-8\">\n          <div className=\"lg:col-span-3\">\n            {/* Key Metrics */}\n            <div className=\"grid grid-cols-4 gap-6 mb-8\">\n              <Card className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <h3 className=\"text-sm font-medium text-clinical-gray\">\n                    Total Staff\n                  </h3>\n                  <Users className=\"w-5 h-5 text-chiron-blue\" />\n                </div>\n                <p className=\"text-2xl font-bold text-slate-900\">\n                  {metricsLoading ? \"...\" : metrics?.totalStaff}\n                </p>\n                <p className=\"text-sm text-medical-green\"></p>\n              </Card>\n\n              <Card className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <h3 className=\"text-sm font-medium text-clinical-gray\">\n                    On Duty Today\n                  </h3>\n                  <Clock className=\"w-5 h-5 text-chiron-blue\" />\n                </div>\n                <p className=\"text-2xl font-bold text-slate-900\">\n                  {metricsLoading ? \"...\" : metrics?.onDuty}\n                </p>\n                <p className=\"text-sm text-clinical-gray\">\n                  {metricsLoading\n                    ? \"...\"\n                    : ((metrics?.onDuty || 0) / (metrics?.totalStaff || 1)) *\n                      100}\n                  {\"% of capacity\"}\n                </p>\n              </Card>\n\n              <Card className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <h3 className=\"text-sm font-medium text-clinical-gray\">\n                    Pending Reviews\n                  </h3>\n                  <Clipboard className=\"w-5 h-5 text-chiron-orange\" />\n                </div>\n                <p className=\"text-2xl font-bold text-slate-900\">\n                  {metricsLoading ? \"...\" : metrics?.pendingReviews}\n                </p>\n                <p className=\"text-sm text-amber-600\">Due this month</p>\n              </Card>\n\n              <Card className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <h3 className=\"text-sm font-medium text-clinical-gray\">\n                    Leave Requests\n                  </h3>\n                  <Calendar className=\"w-5 h-5 text-chiron-blue\" />\n                </div>\n                <p className=\"text-2xl font-bold text-slate-900\">\n                  {metricsLoading ? \"...\" : metrics?.leaveRequests}\n                </p>\n                <p className=\"text-sm text-clinical-gray\">Awaiting approval</p>\n              </Card>\n            </div>\n\n            {/* Quick Actions */}\n            <Card className=\"p-6 mb-8\">\n              <h3 className=\"text-lg font-semibold text-slate-900 mb-4\">\n                Quick Actions\n              </h3>\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setCurrentView(\"staff\")}\n                  className=\"flex flex-col items-center p-4 h-auto space-y-2 hover:bg-slate-50\"\n                >\n                  <UserPlus className=\"w-8 h-8 text-chiron-blue\" />\n                  <span className=\"text-sm font-medium text-slate-700\">\n                    Manage Staff\n                  </span>\n                </Button>\n\n                <Button\n                  variant=\"outline\"\n                  className=\"flex flex-col items-center p-4 h-auto space-y-2 hover:bg-slate-50\"\n                  onClick={() => setCurrentView(\"rota\")}\n                >\n                  <Calendar className=\"w-8 h-8 text-chiron-blue\" />\n                  <span className=\"text-sm font-medium text-slate-700\">\n                    View Rota\n                  </span>\n                </Button>\n\n                <Button\n                  variant=\"outline\"\n                  className=\"flex flex-col items-center p-4 h-auto space-y-2 hover:bg-slate-50\"\n                  onClick={() => setCurrentView(\"appraisals\")}\n                >\n                  <FileText className=\"w-8 h-8 text-chiron-blue\" />\n                  <span className=\"text-sm font-medium text-slate-700\">\n                    Appraisals\n                  </span>\n                </Button>\n\n                <Button\n                  variant=\"outline\"\n                  className=\"flex flex-col items-center p-4 h-auto space-y-2 hover:bg-slate-50\"\n                  disabled\n                >\n                  <BookOpen className=\"w-8 h-8 text-chiron-blue\" />\n                  <span className=\"text-sm font-medium text-slate-700\">\n                    Policies\n                  </span>\n                </Button>\n              </div>\n            </Card>\n\n            {/* Define an array of colors for staff members */}\n\n            {/* Today's Rota */}\n            <Card className=\"p-6\" id=\"Rota-Section\">\n              <h3 className=\"text-lg font-semibold text-slate-900 mb-4\">\n                Today's Rota\n              </h3>\n\n              <div>\n                {/* Daily Schedule Table */}\n                <div className=\"mt-8\">\n                  <div className=\"bg-white rounded-lg shadow-sm border border-slate-200 overflow-hidden\">\n                    <div className=\"px-6 py-4 border-b border-slate-200 bg-slate-50\">\n                      <div className=\"flex items-center justify-between\">\n                        <h2 className=\"text-lg font-semibold text-slate-900\">\n                          Daily Schedule\n                        </h2>\n                        <Select\n                          value={selectedDay}\n                          onValueChange={setSelectedDay}\n                        >\n                          <SelectTrigger className=\"w-48\">\n                            <SelectValue placeholder=\"Select day\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {weekday.map((day) => (\n                              <SelectItem key={day} value={day}>\n                                {day}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    </div>\n\n                    <Table>\n                      <TableHeader>\n                        <TableRow>\n                          <TableHead className=\"px-6 py-4 text-sm font-semibold text-slate-900 bg-slate-50\">\n                            Staff Member\n                          </TableHead>\n                          <TableHead className=\"px-6 py-4 text-sm font-semibold text-slate-900 bg-slate-50\">\n                            Position\n                          </TableHead>\n                          <TableHead className=\"px-6 py-4 text-sm font-semibold text-slate-900 bg-slate-50\">\n                            Department\n                          </TableHead>\n                          <TableHead className=\"px-6 py-4 text-sm font-semibold text-slate-900 bg-slate-50\">\n                            Working Hours\n                          </TableHead>\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {dailySchedule.length === 0 ? (\n                          <TableRow>\n                            <TableCell\n                              colSpan={4}\n                              className=\"text-center py-12 text-slate-500\"\n                            >\n                              <div className=\"flex flex-col items-center space-y-3\">\n                                <Users className=\"w-12 h-12 text-slate-300\" />\n                                <div>\n                                  <p className=\"text-lg font-medium\">\n                                    No staff scheduled\n                                  </p>\n                                  <p className=\"text-sm\">\n                                    No staff members are working on{\" \"}\n                                    {selectedDay}\n                                  </p>\n                                </div>\n                              </div>\n                            </TableCell>\n                          </TableRow>\n                        ) : (\n                          dailySchedule.map((staffMember) => (\n                            <TableRow\n                              key={staffMember.employeeId}\n                              className=\"border-b hover:bg-slate-50/50 transition-colors\"\n                            >\n                              <TableCell className=\"px-6 py-4\">\n                                <div className=\"font-medium text-slate-900\">\n                                  {staffMember.firstName} {staffMember.lastName}\n                                </div>\n                                <div className=\"text-sm text-slate-500\">\n                                  {staffMember.employeeId}\n                                </div>\n                              </TableCell>\n                              <TableCell className=\"px-6 py-4\">\n                                <Badge\n                                  variant=\"outline\"\n                                  className=\"capitalize bg-blue-50 text-blue-700 border-blue-200\"\n                                >\n                                  {staffMember.position}\n                                </Badge>\n                              </TableCell>\n                              <TableCell className=\"px-6 py-4\">\n                                <span className=\"text-slate-700\">\n                                  {staffMember.department || \"Not specified\"}\n                                </span>\n                              </TableCell>\n                              <TableCell className=\"px-6 py-4\">\n                                {getStatusBadge(staffMember.workingHours)}\n                              </TableCell>\n                            </TableRow>\n                          ))\n                        )}\n                      </TableBody>\n                    </Table>\n                  </div>\n                </div>\n              </div>\n            </Card>\n          </div>\n\n          {/* LLM Guide */}\n          <div className=\"lg:col-span-1\">\n            <LLMGuide\n              title=\"HR Assistant\"\n              subtitle=\"Staff management guidance\"\n              initialMessage=\"I can help you with staff onboarding, rota management, and compliance tracking. What would you like to know?\"\n              placeholder=\"Ask about HR...\"\n            />\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":15776},"client/src/pages/modules/messaging.tsx":{"content":"import { useQuery, useMutation, queryOptions } from \"@tanstack/react-query\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { Link } from \"wouter\";\nimport {\n  ArrowLeft,\n  MessageSquare,\n  Search,\n  Plus,\n  Send,\n  Shield,\n  Bell,\n  Users,\n  Radio,\n  Settings,\n} from \"lucide-react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport useWebSocket from \"@/hooks/use-websocket\";\nimport ModuleLogo from \"@/components/module-logo\";\nimport { useState, useEffect, useRef } from \"react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { optional, z } from \"zod\";\nimport { Controller, useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertConversationSchema, insertMessageSchema } from \"@shared/schema\";\nimport Select from \"react-select\";\nimport { useAuth } from \"@/components/auth/authProvider\";\n\ninterface ContactOption {\n  value: string;\n  label: string;\n}\n\ninterface User {\n  id: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  role: string;\n}\n\ninterface Conversation {\n  id: number;\n  title?: string;\n  participantIds: string[];\n  updatedAt: string;\n}\n\ninterface Message {\n  id: number;\n  conversationId: number;\n  senderId: string;\n  content: string;\n  blocked: boolean;\n  blockReason?: string;\n  createdAt: string;\n}\n\nconst userSchema = z.object({\n  id: z.string(),\n  practiceId: z.string(),\n  role: z.enum([\"staff\", \"powerUser\", \"user\"]),\n  email: z.string(),\n  firstName: z.string(),\n  lastName: z.string(),\n});\n\ntype UserData = z.infer<typeof userSchema>;\n\nexport default function ChironMessaging() {\n  const [selectedConversation, setSelectedConversation] = useState<\n    number | null\n  >(null);\n  const [showAddDialog, setShowAddDialog] = useState(false);\n  const [showAnouncementDialog, setShowAnouncementDialog] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [messageError, setMessageError] = useState<string | null>(null);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [searchMessageQuery, setSearchMessageQuery] = useState(\"\");\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const { user, logout } = useAuth();\n\n  const { toast } = useToast();\n\n  const { data: userDetails } = useQuery({\n    queryKey: [\"/api/home\"],\n    queryFn: async () => {\n      const response = await apiRequest(\"GET\", \"/api/home\", user?.email);\n\n      if (!response.ok) {\n        throw new Error(\"Authentication failed\");\n      }\n      return (await response.json()) as UserData;\n    },\n    retry: false,\n  });\n\n  const { data: contacts, refetch: refetchContacts } = useQuery<User[]>({\n    queryKey: [\"/api/messaging/contacts\"],\n    queryFn: async () => {\n      const response = await apiRequest(\"GET\", \"/api/messaging/contacts\");\n\n      if (!response.ok) {\n        throw new Error(\"Authentication failed\");\n      }\n      return (await response.json()) as UserData[];\n    },\n    retry: false,\n  });\n\n  const { data: conversations, refetch: refetchConversations } = useQuery<\n    Conversation[]\n  >({\n    queryKey: [\"/api/messaging/conversations\"],\n  });\n\n  const { data: messages, refetch: refetchMessages } = useQuery<Message[]>({\n    queryKey: [\"/api/messaging/messages\", selectedConversation],\n    enabled: selectedConversation !== null,\n  });\n\n  const { data: convomessages, refetch: refetchconvoMessages } = useQuery<\n    Message[] | null\n  >({\n    queryKey: [\"/api/messaging/initConversation\", selectedConversation],\n    queryFn: selectedConversation\n      ? () =>\n          fetch(`/api/messaging/initConversation/${selectedConversation}`).then(\n            (res) => res.json(),\n          )\n      : () => null,\n    enabled: selectedConversation !== null,\n  });\n\n  const { data: announcements, refetch: refetchAnnouncements } = useQuery<\n    Message[] | null\n  >({\n    queryKey: [\"/api/messaging/announcements\"],\n  });\n\n  // WebSocket connection for real-time messaging\n  const { socket, isConnected } = useWebSocket(\"/ws\");\n\n  useEffect(() => {\n    if (socket) {\n      const handleMessage = (event: MessageEvent) => {\n        try {\n          const data = JSON.parse(event.data);\n          if (data.type === \"new_message\") {\n            refetchMessages();\n            queryClient.invalidateQueries({\n              queryKey: [\"/api/messaging/conversations\"],\n            });\n          }\n        } catch (error) {\n          console.error(\"Error parsing WebSocket message:\", error);\n        }\n      };\n\n      socket.addEventListener(\"message\", handleMessage);\n\n      return () => {\n        socket.removeEventListener(\"message\", handleMessage);\n      };\n    }\n  }, [socket, refetchMessages]);\n\n  type ConvoFormData = z.infer<typeof insertConversationSchema>;\n\n  const form = useForm<ConvoFormData>({\n    resolver: zodResolver(insertConversationSchema),\n    defaultValues: {\n      title: undefined,\n      practiceId: userDetails?.practiceId,\n      participantIds: [userDetails?.id],\n    },\n  });\n\n  // create conversation\n  const createConvoMutation = useMutation({\n    mutationFn: async (data: ConvoFormData) => {\n      const response = await apiRequest(\n        \"POST\",\n        \"/api/messaging/createconversations\",\n        data,\n      );\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/messaging/conversations\"],\n      });\n      refetchConversations();\n      toast({\n        title: \"Success\",\n        description: \"conversation added successfully\",\n      });\n      form.reset();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create conversation\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onConvoSubmit = (data: ConvoFormData) => {\n    createConvoMutation.mutate(data);\n  };\n\n  // Join conversation when selected\n  useEffect(() => {\n    if (socket && selectedConversation && isConnected) {\n      socket.send(\n        JSON.stringify({\n          type: \"join_conversation\",\n          conversationId: selectedConversation,\n        }),\n      );\n    }\n  }, [socket, selectedConversation, isConnected]);\n\n  // Auto-scroll to bottom of messages\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [messages]);\n\n  const sendMessageMutation = useMutation({\n    mutationFn: async ({\n      content,\n      conversationId,\n    }: {\n      content: string;\n      conversationId: number;\n    }) => {\n      const response = await fetch(\"/api/messaging/messages\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ content, conversationId }),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.reason || \"Failed to send message\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      setNewMessage(\"\");\n      setMessageError(null);\n      refetchMessages();\n      refetchconvoMessages();\n    },\n    onError: (error: Error) => {\n      setMessageError(error.message);\n      toast({\n        title: \"Message Blocked\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSendMessage = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!newMessage.trim() || !selectedConversation) return;\n\n    sendMessageMutation.mutate({\n      content: newMessage.trim(),\n      conversationId: selectedConversation,\n    });\n  };\n\n  const onAnnouncementSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!newMessage.trim()) return;\n\n    const announcements = conversations?.find(\n      (obj) => obj.title == \"Announcements\",\n    );\n    const conversationid = announcements?.id!;\n    sendMessageMutation.mutate({\n      content: newMessage.trim(),\n      conversationId: conversationid!,\n    });\n  };\n\n  const formatTime = (timestamp: string) => {\n    // need to add : if timestamp = 1 day ago set data not time\n    return new Date(timestamp).toLocaleTimeString(\"en-GB\", {\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n    });\n  };\n\n  const contactTags: ContactOption[] | undefined = contacts\n    ?.map((contact) => ({\n      value: contact.id,\n      label: `${contact.firstName} ${contact.lastName}`,\n    }))\n    .concat([\n      { value: userDetails!.id, label: `${user!.firstName} ${user!.lastName}` },\n    ]);\n\n  type contactType = { label: string; value: string };\n\n  const getContactName = (userId: string) => {\n    const contact = contacts?.find((c) => c.id === userId);\n    if (userId == userDetails?.id) {\n      return user ? `${user.firstName} ${user.lastName}` : \"UU\";\n    }\n    return contact\n      ? `${contact.firstName} ${contact.lastName}`\n      : \"Unknown User\";\n  };\n\n  const getContactInitials = (userId: string) => {\n    refetchContacts();\n    refetchConversations();\n    refetchAnnouncements();\n    const contact = contacts?.find((c) => c.id === userId);\n    if (userId == userDetails?.id) {\n      return user ? `${user.firstName[0]}${user.lastName[0]}` : \"UU\";\n    }\n    return contact ? `${contact.firstName[0]}${contact.lastName[0]}` : \"help\";\n  };\n\n  // Filter conversations based on search query\n  const filteredConversations = conversations?.filter((conversation) => {\n    if (!searchQuery.trim()) return true;\n\n    const query = searchQuery.toLowerCase();\n\n    // Search by conversation title\n    if (\n      conversation.title &&\n      conversation.title.toLowerCase().includes(query)\n    ) {\n      return true;\n    }\n\n    // Search by participant names\n    const participantNames = conversation.participantIds.map(\n      (participantId) => {\n        return getContactName(participantId).toLowerCase();\n      },\n    );\n\n    return participantNames.some((name) => name.includes(query));\n  });\n\n  // Filter messages based on search query\n  const filteredMessages = convomessages?.filter((message) => {\n    if (!searchMessageQuery.trim()) return true;\n\n    const query = searchMessageQuery.toLowerCase();\n\n    // Search by message contents\n    if (message.content && message.content.toLowerCase().includes(query)) {\n      return true;\n    }\n\n    // Search by participant names\n    const participantNames = getContactName(message.senderId).toLowerCase();\n\n    return participantNames.includes(query);\n  });\n\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      {/* Header */}\n      <header className=\"bg-white border-b border-slate-200 px-6 py-4\">\n        <div className=\"max-w-7xl mx-auto flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <Link\n              href=\"/\"\n              className=\"flex items-center space-x-2 text-clinical-gray hover:text-chiron-blue\"\n            >\n              <ArrowLeft className=\"w-4 h-4\" />\n              <span>Back to Dashboard</span>\n            </Link>\n            <div className=\"w-px h-6 bg-slate-200\"></div>\n            <div className=\"flex items-center space-x-3\">\n              <ModuleLogo moduleName=\"messaging\" icon={MessageSquare} />\n              <h1 className=\"text-xl font-semibold text-slate-900\">\n                ChironMessaging\n              </h1>\n            </div>\n          </div>\n          <Badge\n            variant=\"secondary\"\n            className=\"bg-green-50 text-medical-green border-green-200\"\n          >\n            <div className=\"w-2 h-2 bg-medical-green rounded-full mr-2\"></div>\n            {isConnected ? \"Secure Connection Active\" : \"Connecting...\"}\n          </Badge>\n        </div>\n      </header>\n\n      <main className=\"max-w-7xl mx-auto px-6 py-6\">\n        <div className=\"grid grid-cols-12 gap-6 h-[calc(100vh-140px)]\">\n          {/* Left Column - Conversations */}\n          <div className=\"col-span-3 bg-white rounded-xl border border-slate-200 overflow-hidden\">\n            <div className=\"p-4 border-b border-slate-200\">\n              <h3 className=\"font-semibold text-slate-900 mb-3\">Messages</h3>\n              <div className=\"flex space-x-2\">\n                <div className=\"relative flex-1\">\n                  <Search className=\"w-4 h-4 absolute left-3 top-2.5 text-clinical-gray\" />\n                  <Input\n                    placeholder=\"Search conversations...\"\n                    className=\"pl-10 text-sm\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                  />\n                </div>\n                {/* new converstaion*/}\n                <Dialog open={showAddDialog} onOpenChange={setShowAddDialog}>\n                  <DialogTrigger asChild>\n                    <Button\n                      size=\"sm\"\n                      className=\"bg-chiron-blue hover:bg-blue-800\"\n                    >\n                      <Plus className=\"w-4 h-4 mr-2\" />\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n                    <DialogHeader>\n                      <DialogTitle>Add Conversation</DialogTitle>\n                    </DialogHeader>\n                    <Form {...form}>\n                      <form\n                        onSubmit={form.handleSubmit(onConvoSubmit)}\n                        className=\"space-y-4\"\n                      >\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                          <FormField\n                            control={form.control}\n                            name=\"title\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>title *</FormLabel>\n                                <FormControl>\n                                  <Input {...field} value={field.value || \"\"} />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                          <FormField\n                            control={form.control}\n                            name=\"participantIds\"\n                            render={({ field: { value, onChange } }) => (\n                              <FormItem>\n                                <FormLabel>Participants</FormLabel>\n                                <Select\n                                  isMulti={true}\n                                  name=\"participantIds\"\n                                  value={contactTags?.filter((el) =>\n                                    value?.includes(el.value),\n                                  )}\n                                  onChange={(\n                                    option: readonly contactType[],\n                                  ) => {\n                                    if (option === null) {\n                                      onChange(null);\n\n                                      return;\n                                    }\n                                    onChange(option.map((el) => el.value));\n                                  }}\n                                  options={contactTags}\n                                  className=\"basic-multi-select\"\n                                  classNamePrefix=\"select\"\n                                />\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n\n                        <div className=\"flex justify-end space-x-4\">\n                          <Button\n                            type=\"button\"\n                            variant=\"outline\"\n                            onClick={() => setShowAddDialog(false)}\n                          >\n                            Cancel\n                          </Button>\n                          <Button\n                            type=\"submit\"\n                            disabled={createConvoMutation.isPending}\n                            onClick={() => setShowAddDialog(false)}\n                          >\n                            {createConvoMutation.isPending\n                              ? \"Adding...\"\n                              : \"Add Conversation\"}\n                          </Button>\n                        </div>\n                      </form>\n                    </Form>\n                  </DialogContent>\n                </Dialog>\n              </div>\n              {searchQuery && (\n                <div className=\"mt-2 flex items-center justify-between\">\n                  <p className=\"text-xs text-clinical-gray\">\n                    {filteredConversations?.length || 0} of{\" \"}\n                    {conversations?.length || 0} conversations\n                  </p>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => setSearchQuery(\"\")}\n                    className=\"text-xs h-6 px-2\"\n                  >\n                    Clear\n                  </Button>\n                </div>\n              )}\n            </div>\n            <div className=\"overflow-y-auto h-full\">\n              <div className=\"p-2 space-y-1\">\n                {filteredConversations?.length === 0 ? (\n                  <div className=\"text-center py-8\">\n                    <MessageSquare className=\"w-8 h-8 text-clinical-gray mx-auto mb-2\" />\n                    {searchQuery ? (\n                      <>\n                        <p className=\"text-sm text-clinical-gray\">\n                          No conversations found\n                        </p>\n                        <p className=\"text-xs text-clinical-gray\">\n                          Try adjusting your search terms\n                        </p>\n                      </>\n                    ) : (\n                      <>\n                        <p className=\"text-sm text-clinical-gray\">\n                          No conversations yet\n                        </p>\n                        <p className=\"text-xs text-clinical-gray\">\n                          Start messaging with your team\n                        </p>\n                      </>\n                    )}\n                  </div>\n                ) : (\n                  <>\n                    {filteredConversations?.map((conversation) => (\n                      <div\n                        key={conversation.id}\n                        className={`p-3 hover:bg-slate-50 rounded-lg cursor-pointer ${selectedConversation === conversation.id ? \"border-l-4 border-chiron-blue bg-blue-50\" : \"\"}`}\n                        onClick={() => setSelectedConversation(conversation.id)}\n                      >\n                        <div className=\"flex items-center space-x-3 mb-1\">\n                          <div className=\"w-8 h-8 bg-medical-green rounded-full flex items-center justify-center\">\n                            <span className=\"text-white font-medium text-xs\">\n                              {getContactInitials(\n                                conversation.participantIds[0],\n                              )}\n                            </span>\n                          </div>\n                          <div className=\"flex-1 min-w-0\">\n                            <p className=\"text-sm font-medium text-slate-900 truncate\">\n                              {conversation.title\n                                ? conversation.title\n                                : getContactName(\n                                    conversation.participantIds[0],\n                                  )}\n                            </p>\n                            <p className=\"text-xs text-clinical-gray\">\n                              {formatTime(conversation.updatedAt)}\n                            </p>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {/* Center Column - Chat */}\n          <div className=\"col-span-6 bg-white rounded-xl border border-slate-200 flex flex-col\">\n            {selectedConversation ? (\n              <>\n                <div className=\"p-4 border-b border-slate-200\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-10 h-10 bg-medical-green rounded-full flex items-center justify-center\">\n                      <span className=\"text-white font-semibold text-sm\">\n                        {conversations !== undefined\n                          ? getContactInitials(\n                              conversations.find(\n                                (i) => i.id! == selectedConversation,\n                              )!.participantIds[0],\n                            )\n                          : \"\"}\n                      </span>\n                    </div>\n                    <div>\n                      <h3 className=\"font-semibold text-slate-900\">\n                        {conversations !== undefined &&\n                        conversations.find((i) => i.id == selectedConversation)!\n                          .title !== null\n                          ? conversations.find(\n                              (i) => i.id == selectedConversation,\n                            )!.title\n                          : conversations !== undefined\n                            ? getContactName(\n                                conversations.find(\n                                  (i) => i.id == selectedConversation,\n                                )!.participantIds[0],\n                              )\n                            : \"error\"}\n                      </h3>\n                      <p className=\"text-sm text-medical-green flex items-center\">\n                        <span className=\"w-2 h-2 bg-medical-green rounded-full mr-2\"></span>\n                        {conversations\n                          ?.find((i) => i.id! == selectedConversation)!\n                          .participantIds.map((x) =>\n                            getContactName(x).concat(\" \"),\n                          )}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n                  {convomessages?.map((message) =>\n                    message.senderId !== userDetails?.id ? (\n                      <div key={message.id} className=\"flex\">\n                        <div className=\"w-8 h-8 bg-medical-green rounded-full flex items-center justify-center mr-3 flex-shrink-0\">\n                          <span className=\"text-white font-medium text-xs\">\n                            {getContactInitials(message.senderId)}\n                          </span>\n                        </div>\n                        <div className=\"bg-slate-100 rounded-lg p-3 max-w-xs\">\n                          <p className=\"text-sm text-slate-900\">\n                            {message.content}\n                          </p>\n                          <p className=\"text-xs text-clinical-gray mt-1\">\n                            {getContactName(message.senderId)}\n                          </p>\n                          <p className=\"text-xs text-clinical-gray mt-1\">\n                            {message.createdAt}\n                          </p>\n                        </div>\n                      </div>\n                    ) : (\n                      <div key={message.id} className=\"flex justify-end\">\n                        <div className=\"bg-chiron-blue text-white rounded-lg p-3 max-w-xs\">\n                          <p className=\"text-sm\">{message.content}</p>\n                          <p className=\"text-xs text-blue-200 mt-1\">\n                            {getContactName(message.senderId)}\n                          </p>\n                          <p className=\"text-xs text-blue-200 mt-1\">\n                            {message.createdAt}\n                          </p>\n                        </div>\n                      </div>\n                    ),\n                  )}\n\n                  {/* AI Safety Net Indicator */}\n                  <div className=\"flex justify-center\">\n                    <div className=\"bg-amber-50 border border-amber-200 rounded-lg p-3\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Shield className=\"w-4 h-4 text-amber-600\" />\n                        <span className=\"text-sm text-amber-800\">\n                          Messages are monitored by AI safety system\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div ref={messagesEndRef} />\n                </div>\n                <div className=\"p-4 border-t border-slate-200\">\n                  <form onSubmit={handleSendMessage} className=\"flex space-x-3\">\n                    <Input\n                      value={newMessage}\n                      onChange={(e) => {\n                        setNewMessage(e.target.value);\n                        setMessageError(null);\n                      }}\n                      placeholder=\"Type a secure message...\"\n                      className=\"flex-1\"\n                    />\n\n                    <Button\n                      type=\"submit\"\n                      className=\"bg-chiron-blue hover:bg-blue-800\"\n                      disabled={\n                        sendMessageMutation.isPending ||\n                        !newMessage.trim() ||\n                        selectedConversation ===\n                          conversations?.find(\n                            (obj) => obj.title == \"Announcements\",\n                          )?.id\n                      }\n                      onClick={() => setShowAddDialog(false)}\n                    >\n                      <Send className=\"w-4 h-4\" />\n                    </Button>\n                  </form>\n                  {messageError && (\n                    <p className=\"text-xs text-alert-red mt-2\">\n                      {messageError}\n                    </p>\n                  )}\n                  <p className=\"text-xs text-clinical-gray mt-2\">\n                    Messages are encrypted and monitored for patient data\n                    protection\n                  </p>\n                  <div className=\"relative flex-1\">\n                    <Search className=\"w-4 h-4 absolute left-3 top-2.5 text-clinical-gray\" />\n                    <Input\n                      placeholder=\"Search Messages...\"\n                      className=\"pl-10 text-sm\"\n                      value={searchMessageQuery}\n                      onChange={(e) => setSearchMessageQuery(e.target.value)}\n                    />\n                  </div>\n                  {searchMessageQuery && (\n                    <div className=\"mt-2 flex items-center justify-between\">\n                      <p className=\"text-xs text-clinical-gray\">\n                        {filteredMessages?.length || 0} of{\" \"}\n                        {convomessages?.length || 0} message\n                      </p>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => setSearchMessageQuery(\"\")}\n                        className=\"text-xs h-6 px-2\"\n                      >\n                        Clear\n                      </Button>\n                    </div>\n                  )}\n                </div>\n              </>\n            ) : (\n              <div className=\"flex-1 flex items-center justify-center\">\n                <div className=\"text-center\">\n                  <MessageSquare className=\"w-12 h-12 text-clinical-gray mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-medium text-slate-900 mb-2\">\n                    Select a conversation\n                  </h3>\n                  <p className=\"text-clinical-gray\">\n                    Choose a conversation from the sidebar to start messaging\n                  </p>\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Right Column - Announcements */}\n          <div className=\"col-span-3 bg-white rounded-xl border border-slate-200\">\n            <div className=\"p-4 border-b border-slate-200\">\n              <h3 className=\"font-semibold text-slate-900\">Practice Updates</h3>\n            </div>\n            <div className=\"p-4 space-y-4\">\n              <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n                {announcements?.map((message) => (\n                  <div key={message.id} className=\"flex\">\n                    <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-3\">\n                      <div className=\"flex items-start space-x-2\">\n                        <Bell className=\"w-4 h-4 text-amber-600 mt-0.5\" />\n                        <div>\n                          <span className=\"text-sm font-medium text-chiron-blue\">\n                            {getContactName(message.senderId)}\n                          </span>\n                          <p className=\"text-xs text-blue-700 mt-1\">\n                            {message.content}\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n\n              <div className=\"pt-4 border-t border-slate-200\">\n                <h4 className=\"font-medium text-slate-900 mb-3\">\n                  Quick Actions\n                </h4>\n                <div className=\"space-y-2\">\n                  <Dialog\n                    open={showAnouncementDialog}\n                    onOpenChange={setShowAnouncementDialog}\n                  >\n                    <DialogTrigger asChild>\n                      <Button className=\"w-full justify-start text-sm text-clinical-gray hover:bg-slate-50\">\n                        <Radio className=\"w-4 h-4 mr-2\" />\n                        Send Announcement\n                      </Button>\n                    </DialogTrigger>\n                    <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n                      <DialogHeader>\n                        <DialogTitle>Add Anouncement</DialogTitle>\n                      </DialogHeader>\n\n                      <form\n                        onSubmit={onAnnouncementSubmit}\n                        className=\"flex space-x-3\"\n                      >\n                        <Input\n                          value={newMessage}\n                          onChange={(e) => {\n                            setNewMessage(e.target.value);\n                            setMessageError(null);\n                          }}\n                          placeholder=\"Type a secure message...\"\n                          className=\"flex-1\"\n                        />\n\n                        <div className=\"flex justify-end space-x-4\">\n                          <Button\n                            type=\"button\"\n                            variant=\"outline\"\n                            onClick={() => setShowAnouncementDialog(false)}\n                          >\n                            Cancel\n                          </Button>\n                          <Button\n                            type=\"submit\"\n                            disabled={\n                              sendMessageMutation.isPending ||\n                              userDetails?.role === \"staff\"\n                            }\n                          >\n                            {sendMessageMutation.isPending\n                              ? \"Adding...\"\n                              : \"Add Anouncement\"}\n                          </Button>\n                        </div>\n                      </form>\n                      {messageError && (\n                        <p className=\"text-xs text-alert-red mt-2\">\n                          {messageError}\n                        </p>\n                      )}\n                    </DialogContent>\n                  </Dialog>\n                  <Link\n                    href=\"/modules/hr\"\n                    className=\"flex items-center space-x-2 text-clinical-gray hover:text-chiron-blue\"\n                  >\n                    <Button\n                      variant=\"ghost\"\n                      className=\"w-full justify-start text-sm text-clinical-gray hover:bg-slate-50\"\n                    >\n                      <Users className=\"w-4 h-4 mr-2\" />\n                      View All Staff\n                    </Button>\n                  </Link>\n                  <Button\n                    variant=\"ghost\"\n                    className=\"w-full justify-start text-sm text-clinical-gray hover:bg-slate-50\"\n                    disabled\n                  >\n                    <Settings className=\"w-4 h-4 mr-2\" />\n                    Message Settings\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":33416},"client/src/pages/modules/money.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { Link } from \"wouter\";\nimport { ArrowLeft, PoundSterling, TrendingUp, CreditCard, BarChart3, AlertCircle, FilePlus, Receipt, Building2, Calculator, FileText, Info } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport LLMGuide from \"@/components/llm-guide\";\nimport ModuleLogo from \"@/components/module-logo\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useState } from \"react\";\n\ninterface MoneyDashboardMetrics {\n  monthlyRevenue: number;\n  expenses: number;\n  profitLoss: number;\n  vatDue: number;\n  overdueInvoices: number;\n}\n\ninterface Transaction {\n  id: string;\n  description: string;\n  amount: string;\n  category: 'income' | 'expense';\n  date: string;\n  subcategory?: string;\n}\n\ninterface Invoice {\n  id: string;\n  invoiceNumber: string;\n  clientName: string;\n  description: string;\n  totalAmount: string;\n  status: string;\n  dueDate: string;\n}\n\ninterface TaxCalculation {\n  profit: number;\n  taxRate: number;\n  estimatedTax: number;\n  allowances: number;\n}\n\nconst transactionSchema = z.object({\n  description: z.string().min(1, \"Description is required\"),\n  amount: z.string().min(1, \"Amount is required\"),\n  category: z.enum(['income', 'expense']),\n  subcategory: z.string().optional(),\n  date: z.string().min(1, \"Date is required\")\n});\n\nconst invoiceSchema = z.object({\n  invoiceNumber: z.string().min(1, \"Invoice number is required\"),\n  clientName: z.string().min(1, \"Client name is required\"),\n  clientEmail: z.string().email().optional().or(z.literal(\"\")),\n  description: z.string().min(1, \"Description is required\"),\n  amount: z.string().min(1, \"Amount is required\"),\n  vatAmount: z.string().optional(),\n  dueDate: z.string().optional()\n});\n\ntype TransactionFormData = z.infer<typeof transactionSchema>;\ntype InvoiceFormData = z.infer<typeof invoiceSchema>;\n\nexport default function ChironMoney() {\n  const [showTransactionDialog, setShowTransactionDialog] = useState(false);\n  const [showInvoiceDialog, setShowInvoiceDialog] = useState(false);\n  const { toast } = useToast();\n\n  const { data: metrics, isLoading: metricsLoading } = useQuery<MoneyDashboardMetrics>({\n    queryKey: ['/api/money/dashboard']\n  });\n\n  const { data: transactions } = useQuery<Transaction[]>({\n    queryKey: ['/api/money/transactions']\n  });\n\n  const { data: taxCalculation } = useQuery<TaxCalculation>({\n    queryKey: ['/api/money/calculations/corporation-tax']\n  });\n\n  const transactionForm = useForm<TransactionFormData>({\n    resolver: zodResolver(transactionSchema),\n    defaultValues: {\n      description: '',\n      amount: '',\n      category: 'income',\n      subcategory: '',\n      date: new Date().toISOString().split('T')[0]\n    }\n  });\n\n  const invoiceForm = useForm<InvoiceFormData>({\n    resolver: zodResolver(invoiceSchema),\n    defaultValues: {\n      invoiceNumber: '',\n      clientName: '',\n      clientEmail: '',\n      description: '',\n      amount: '',\n      vatAmount: '',\n      dueDate: ''\n    }\n  });\n\n  const createTransactionMutation = useMutation({\n    mutationFn: async (data: TransactionFormData) => {\n      const response = await fetch('/api/money/transactions', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error('Failed to create transaction');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/money/dashboard'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/money/transactions'] });\n      toast({ title: \"Success\", description: \"Transaction created successfully\" });\n      setShowTransactionDialog(false);\n      transactionForm.reset();\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to create transaction\", variant: \"destructive\" });\n    }\n  });\n\n  const createInvoiceMutation = useMutation({\n    mutationFn: async (data: InvoiceFormData) => {\n      const totalAmount = data.vatAmount ? \n        (parseFloat(data.amount) + parseFloat(data.vatAmount)).toString() : \n        data.amount;\n      \n      const response = await fetch('/api/money/invoices', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ ...data, totalAmount }),\n      });\n      if (!response.ok) throw new Error('Failed to create invoice');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/money/dashboard'] });\n      toast({ title: \"Success\", description: \"Invoice created successfully\" });\n      setShowInvoiceDialog(false);\n      invoiceForm.reset();\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to create invoice\", variant: \"destructive\" });\n    }\n  });\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-GB', {\n      style: 'currency',\n      currency: 'GBP'\n    }).format(amount);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      {/* Header */}\n      <header className=\"bg-white border-b border-slate-200 px-6 py-4\">\n        <div className=\"max-w-7xl mx-auto flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <Link href=\"/\" className=\"flex items-center space-x-2 text-clinical-gray hover:text-chiron-blue\">\n              <ArrowLeft className=\"w-4 h-4\" />\n              <span>Back to Dashboard</span>\n            </Link>\n            <div className=\"w-px h-6 bg-slate-200\"></div>\n            <div className=\"flex items-center space-x-3\">\n              <ModuleLogo moduleName=\"money\" icon={PoundSterling} />\n              <h1 className=\"text-xl font-semibold text-slate-900\">ChironMoney</h1>\n            </div>\n          </div>\n          <Badge variant=\"secondary\" className=\"bg-amber-100 text-amber-700 border-amber-200\">\n            <div className=\"w-2 h-2 bg-amber-500 rounded-full mr-2\"></div>\n            Bank Connection Required\n          </Badge>\n        </div>\n      </header>\n\n      <main className=\"max-w-7xl mx-auto px-6 py-8\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-8\">\n          <div className=\"lg:col-span-3\">\n            {/* Financial Disclaimer */}\n            <div className=\"bg-amber-50 border border-amber-200 rounded-xl p-4 mb-6\">\n              <div className=\"flex items-start space-x-2\">\n                <Info className=\"w-5 h-5 text-amber-600 mt-0.5 flex-shrink-0\" />\n                <div>\n                  <p className=\"text-sm text-amber-800\">\n                    <strong>Disclaimer:</strong> ChironMoney provides financial estimates for informational purposes only and is not a substitute for professional accounting advice. Please consult with a qualified accountant for financial decisions.\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            {/* Key Financial Metrics */}\n            <div className=\"grid grid-cols-4 gap-6 mb-8\">\n              <Card className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <h3 className=\"text-sm font-medium text-clinical-gray\">Monthly Revenue</h3>\n                  <TrendingUp className=\"w-5 h-5 text-medical-green\" />\n                </div>\n                <p className=\"text-2xl font-bold text-slate-900\">\n                  {metricsLoading ? '...' : formatCurrency(metrics?.monthlyRevenue || 0)}\n                </p>\n                <p className=\"text-sm text-medical-green\">+12% vs last month</p>\n              </Card>\n              \n              <Card className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <h3 className=\"text-sm font-medium text-clinical-gray\">Expenses</h3>\n                  <CreditCard className=\"w-5 h-5 text-chiron-orange\" />\n                </div>\n                <p className=\"text-2xl font-bold text-slate-900\">\n                  {metricsLoading ? '...' : formatCurrency(metrics?.expenses || 0)}\n                </p>\n                <p className=\"text-sm text-clinical-gray\">This month</p>\n              </Card>\n              \n              <Card className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <h3 className=\"text-sm font-medium text-clinical-gray\">Profit/Loss</h3>\n                  <BarChart3 className=\"w-5 h-5 text-chiron-blue\" />\n                </div>\n                <p className=\"text-2xl font-bold text-slate-900\">\n                  {metricsLoading ? '...' : formatCurrency(metrics?.profitLoss || 0)}\n                </p>\n                <p className=\"text-sm text-medical-green\">\n                  {metrics?.monthlyRevenue && metrics.monthlyRevenue > 0 ? \n                    `${((metrics.profitLoss / metrics.monthlyRevenue) * 100).toFixed(1)}% margin` : \n                    'No data'\n                  }\n                </p>\n              </Card>\n              \n              <Card className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <h3 className=\"text-sm font-medium text-clinical-gray\">VAT Due</h3>\n                  <FileText className=\"w-5 h-5 text-alert-red\" />\n                </div>\n                <p className=\"text-2xl font-bold text-slate-900\">\n                  {metricsLoading ? '...' : formatCurrency(metrics?.vatDue || 0)}\n                </p>\n                <p className=\"text-sm text-alert-red\">Due in 12 days</p>\n              </Card>\n            </div>\n\n            {/* Quick Actions */}\n            <Card className=\"p-6 mb-8\">\n              <h3 className=\"text-lg font-semibold text-slate-900 mb-4\">Quick Actions</h3>\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                <Dialog open={showInvoiceDialog} onOpenChange={setShowInvoiceDialog}>\n                  <DialogTrigger asChild>\n                    <Button\n                      variant=\"outline\"\n                      className=\"flex flex-col items-center p-4 h-auto space-y-2 hover:bg-slate-50\"\n                    >\n                      <FilePlus className=\"w-8 h-8 text-chiron-blue\" />\n                      <span className=\"text-sm font-medium text-slate-700\">Create Invoice</span>\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent>\n                    <DialogHeader>\n                      <DialogTitle>Create New Invoice</DialogTitle>\n                    </DialogHeader>\n                    <Form {...invoiceForm}>\n                      <form onSubmit={invoiceForm.handleSubmit((data) => createInvoiceMutation.mutate(data))} className=\"space-y-4\">\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <FormField\n                            control={invoiceForm.control}\n                            name=\"invoiceNumber\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Invoice Number *</FormLabel>\n                                <FormControl>\n                                  <Input {...field} />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          <FormField\n                            control={invoiceForm.control}\n                            name=\"clientName\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Client Name *</FormLabel>\n                                <FormControl>\n                                  <Input {...field} />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n                        \n                        <FormField\n                          control={invoiceForm.control}\n                          name=\"description\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Description *</FormLabel>\n                              <FormControl>\n                                <Textarea {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        \n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <FormField\n                            control={invoiceForm.control}\n                            name=\"amount\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Amount (£) *</FormLabel>\n                                <FormControl>\n                                  <Input type=\"number\" step=\"0.01\" {...field} />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          <FormField\n                            control={invoiceForm.control}\n                            name=\"vatAmount\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>VAT Amount (£)</FormLabel>\n                                <FormControl>\n                                  <Input type=\"number\" step=\"0.01\" {...field} />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n                        \n                        <div className=\"flex justify-end space-x-4\">\n                          <Button type=\"button\" variant=\"outline\" onClick={() => setShowInvoiceDialog(false)}>\n                            Cancel\n                          </Button>\n                          <Button type=\"submit\" disabled={createInvoiceMutation.isPending}>\n                            {createInvoiceMutation.isPending ? 'Creating...' : 'Create Invoice'}\n                          </Button>\n                        </div>\n                      </form>\n                    </Form>\n                  </DialogContent>\n                </Dialog>\n                \n                <Dialog open={showTransactionDialog} onOpenChange={setShowTransactionDialog}>\n                  <DialogTrigger asChild>\n                    <Button\n                      variant=\"outline\"\n                      className=\"flex flex-col items-center p-4 h-auto space-y-2 hover:bg-slate-50\"\n                    >\n                      <Receipt className=\"w-8 h-8 text-chiron-blue\" />\n                      <span className=\"text-sm font-medium text-slate-700\">Log Expense</span>\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent>\n                    <DialogHeader>\n                      <DialogTitle>Log Transaction</DialogTitle>\n                    </DialogHeader>\n                    <Form {...transactionForm}>\n                      <form onSubmit={transactionForm.handleSubmit((data) => createTransactionMutation.mutate(data))} className=\"space-y-4\">\n                        <FormField\n                          control={transactionForm.control}\n                          name=\"description\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Description *</FormLabel>\n                              <FormControl>\n                                <Input {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        \n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <FormField\n                            control={transactionForm.control}\n                            name=\"amount\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Amount (£) *</FormLabel>\n                                <FormControl>\n                                  <Input type=\"number\" step=\"0.01\" {...field} />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          <FormField\n                            control={transactionForm.control}\n                            name=\"category\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Category *</FormLabel>\n                                <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                  <FormControl>\n                                    <SelectTrigger>\n                                      <SelectValue placeholder=\"Select category\" />\n                                    </SelectTrigger>\n                                  </FormControl>\n                                  <SelectContent>\n                                    <SelectItem value=\"income\">Income</SelectItem>\n                                    <SelectItem value=\"expense\">Expense</SelectItem>\n                                  </SelectContent>\n                                </Select>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n                        \n                        <FormField\n                          control={transactionForm.control}\n                          name=\"date\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Date *</FormLabel>\n                              <FormControl>\n                                <Input type=\"date\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        \n                        <div className=\"flex justify-end space-x-4\">\n                          <Button type=\"button\" variant=\"outline\" onClick={() => setShowTransactionDialog(false)}>\n                            Cancel\n                          </Button>\n                          <Button type=\"submit\" disabled={createTransactionMutation.isPending}>\n                            {createTransactionMutation.isPending ? 'Saving...' : 'Save Transaction'}\n                          </Button>\n                        </div>\n                      </form>\n                    </Form>\n                  </DialogContent>\n                </Dialog>\n                \n                <Button\n                  variant=\"outline\"\n                  className=\"flex flex-col items-center p-4 h-auto space-y-2 hover:bg-slate-50\"\n                  disabled\n                >\n                  <Building2 className=\"w-8 h-8 text-chiron-blue\" />\n                  <span className=\"text-sm font-medium text-slate-700\">Connect Bank</span>\n                </Button>\n                \n                <Button\n                  variant=\"outline\"\n                  className=\"flex flex-col items-center p-4 h-auto space-y-2 hover:bg-slate-50\"\n                  disabled\n                >\n                  <Calculator className=\"w-8 h-8 text-chiron-blue\" />\n                  <span className=\"text-sm font-medium text-slate-700\">Tax Calculator</span>\n                </Button>\n              </div>\n            </Card>\n\n            {/* Recent Transactions */}\n            <Card className=\"p-6 mb-8\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h3 className=\"text-lg font-semibold text-slate-900\">Recent Transactions</h3>\n                <Button variant=\"outline\" size=\"sm\" disabled>View All</Button>\n              </div>\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full text-sm\">\n                  <thead>\n                    <tr className=\"border-b border-slate-200 text-left\">\n                      <th className=\"py-2 font-medium text-clinical-gray\">Date</th>\n                      <th className=\"py-2 font-medium text-clinical-gray\">Description</th>\n                      <th className=\"py-2 font-medium text-clinical-gray\">Category</th>\n                      <th className=\"py-2 font-medium text-clinical-gray text-right\">Amount</th>\n                    </tr>\n                  </thead>\n                  <tbody className=\"divide-y divide-slate-100\">\n                    {transactions?.length === 0 ? (\n                      <tr>\n                        <td colSpan={4} className=\"text-center py-8 text-clinical-gray\">\n                          No transactions found. Add your first transaction above.\n                        </td>\n                      </tr>\n                    ) : (\n                      <>\n                        {/* Sample transactions for demonstration */}\n                        <tr>\n                          <td className=\"py-3 text-slate-900\">Dec 15</td>\n                          <td className=\"py-3 text-slate-900\">Patient Consultation Fee</td>\n                          <td className=\"py-3\">\n                            <Badge className=\"bg-green-100 text-medical-green border-green-200\">Income</Badge>\n                          </td>\n                          <td className=\"py-3 text-right text-medical-green font-medium\">+£180.00</td>\n                        </tr>\n                        <tr>\n                          <td className=\"py-3 text-slate-900\">Dec 14</td>\n                          <td className=\"py-3 text-slate-900\">Medical Supplies Purchase</td>\n                          <td className=\"py-3\">\n                            <Badge className=\"bg-orange-100 text-chiron-orange border-orange-200\">Expense</Badge>\n                          </td>\n                          <td className=\"py-3 text-right text-slate-900 font-medium\">-£245.50</td>\n                        </tr>\n                        <tr>\n                          <td className=\"py-3 text-slate-900\">Dec 14</td>\n                          <td className=\"py-3 text-slate-900\">Private Health Check</td>\n                          <td className=\"py-3\">\n                            <Badge className=\"bg-green-100 text-medical-green border-green-200\">Income</Badge>\n                          </td>\n                          <td className=\"py-3 text-right text-medical-green font-medium\">+£350.00</td>\n                        </tr>\n                      </>\n                    )}\n                  </tbody>\n                </table>\n              </div>\n            </Card>\n\n            {/* Tax & Compliance Alerts */}\n            <Card className=\"p-6\">\n              <h3 className=\"text-lg font-semibold text-slate-900 mb-4\">Tax & Compliance Alerts</h3>\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center p-3 bg-red-50 border border-red-200 rounded-lg\">\n                  <AlertCircle className=\"w-5 h-5 text-alert-red mr-3\" />\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm font-medium text-red-800\">VAT Return Due Soon</p>\n                    <p className=\"text-xs text-red-600\">VAT return for Q4 due on 31st December (12 days remaining)</p>\n                  </div>\n                  <Button variant=\"outline\" size=\"sm\" className=\"text-alert-red border-red-300 hover:bg-red-50\" disabled>\n                    Submit\n                  </Button>\n                </div>\n                \n                <div className=\"flex items-center p-3 bg-amber-50 border border-amber-200 rounded-lg\">\n                  <Calculator className=\"w-5 h-5 text-amber-600 mr-3\" />\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm font-medium text-amber-800\">Corporation Tax Estimation</p>\n                    <p className=\"text-xs text-amber-600\">\n                      Estimated liability: {taxCalculation ? formatCurrency(taxCalculation.estimatedTax) : '£0.00'}\n                    </p>\n                  </div>\n                  <Button variant=\"outline\" size=\"sm\" className=\"text-amber-600 border-amber-300 hover:bg-amber-50\" disabled>\n                    Calculate\n                  </Button>\n                </div>\n                \n                <div className=\"flex items-center p-3 bg-blue-50 border border-blue-200 rounded-lg\">\n                  <Building2 className=\"w-5 h-5 text-chiron-blue mr-3\" />\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm font-medium text-blue-800\">Open Banking Integration</p>\n                    <p className=\"text-xs text-blue-600\">Connect your business bank account for automatic transaction imports</p>\n                  </div>\n                  <Button variant=\"outline\" size=\"sm\" className=\"text-chiron-blue border-blue-300 hover:bg-blue-50\" disabled>\n                    Connect\n                  </Button>\n                </div>\n              </div>\n            </Card>\n          </div>\n\n          {/* LLM Financial Guide */}\n          <div className=\"lg:col-span-1\">\n            <LLMGuide\n              title=\"Financial Assistant\"\n              subtitle=\"Tax & accounting guidance\"\n              initialMessage=\"I can help you with VAT submissions, corporation tax calculations, and expense categorization. Your VAT return is due soon - shall I help you prepare it?\"\n              placeholder=\"Ask about finances...\"\n            />\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":26939},"client/src/pages/modules/stock.tsx":{"content":"import { Link } from \"wouter\";\nimport { ArrowLeft, Package, AlertTriangle, TrendingDown, BarChart3 } from \"lucide-react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport LLMGuide from \"@/components/llm-guide\";\nimport ModuleLogo from \"@/components/module-logo\";\n\nexport default function ChironStock() {\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      {/* Header */}\n      <header className=\"bg-white border-b border-slate-200 px-6 py-4\">\n        <div className=\"max-w-7xl mx-auto flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <Link href=\"/\" className=\"flex items-center space-x-2 text-clinical-gray hover:text-chiron-blue\">\n              <ArrowLeft className=\"w-4 h-4\" />\n              <span>Back to Dashboard</span>\n            </Link>\n            <div className=\"w-px h-6 bg-slate-200\"></div>\n            <div className=\"flex items-center space-x-3\">\n              <ModuleLogo moduleName=\"stock\" icon={Package} />\n              <h1 className=\"text-xl font-semibold text-slate-900\">ChironStock</h1>\n            </div>\n          </div>\n          <Badge variant=\"secondary\" className=\"bg-amber-100 text-amber-700 border-amber-200\">\n            <div className=\"w-2 h-2 bg-amber-500 rounded-full mr-2\"></div>\n            Development Mode\n          </Badge>\n        </div>\n      </header>\n\n      <main className=\"max-w-7xl mx-auto px-6 py-8\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-8\">\n          <div className=\"lg:col-span-3\">\n            {/* Coming Soon Notice */}\n            <Card className=\"p-8 mb-8 text-center\">\n              <div className=\"w-16 h-16 bg-chiron-orange bg-opacity-10 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Package className=\"w-8 h-8 text-chiron-orange\" />\n              </div>\n              <h2 className=\"text-2xl font-bold text-slate-900 mb-2\">ChironStock Module</h2>\n              <p className=\"text-clinical-gray mb-6\">\n                Comprehensive inventory management system for medical supplies, equipment tracking, and automated reordering workflows.\n              </p>\n              <Badge variant=\"secondary\" className=\"bg-amber-100 text-amber-700 border-amber-200 mb-4\">\n                Coming Soon\n              </Badge>\n              <p className=\"text-sm text-clinical-gray\">\n                This module is currently in development and will include advanced features for stock management, supplier integration, and compliance tracking.\n              </p>\n            </Card>\n\n            {/* Planned Features */}\n            <Card className=\"p-6 mb-8\">\n              <h3 className=\"text-lg font-semibold text-slate-900 mb-4\">Planned Features</h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"flex items-start space-x-3 p-4 bg-slate-50 rounded-lg\">\n                  <Package className=\"w-6 h-6 text-chiron-blue mt-1 flex-shrink-0\" />\n                  <div>\n                    <h4 className=\"font-medium text-slate-900 mb-1\">Inventory Tracking</h4>\n                    <p className=\"text-sm text-clinical-gray\">Real-time stock levels, batch tracking, and expiry monitoring</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-start space-x-3 p-4 bg-slate-50 rounded-lg\">\n                  <AlertTriangle className=\"w-6 h-6 text-chiron-orange mt-1 flex-shrink-0\" />\n                  <div>\n                    <h4 className=\"font-medium text-slate-900 mb-1\">Automated Alerts</h4>\n                    <p className=\"text-sm text-clinical-gray\">Low stock warnings, expiry notifications, and reorder reminders</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-start space-x-3 p-4 bg-slate-50 rounded-lg\">\n                  <TrendingDown className=\"w-6 h-6 text-medical-green mt-1 flex-shrink-0\" />\n                  <div>\n                    <h4 className=\"font-medium text-slate-900 mb-1\">Smart Reordering</h4>\n                    <p className=\"text-sm text-clinical-gray\">AI-powered demand forecasting and automatic purchase orders</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-start space-x-3 p-4 bg-slate-50 rounded-lg\">\n                  <BarChart3 className=\"w-6 h-6 text-chiron-blue mt-1 flex-shrink-0\" />\n                  <div>\n                    <h4 className=\"font-medium text-slate-900 mb-1\">Usage Analytics</h4>\n                    <p className=\"text-sm text-clinical-gray\">Consumption patterns, cost analysis, and waste reduction insights</p>\n                  </div>\n                </div>\n              </div>\n            </Card>\n\n            {/* Placeholder Metrics */}\n            <div className=\"grid grid-cols-4 gap-6 mb-8\">\n              <Card className=\"p-6 opacity-50\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <h3 className=\"text-sm font-medium text-clinical-gray\">Total Items</h3>\n                  <Package className=\"w-5 h-5 text-chiron-blue\" />\n                </div>\n                <p className=\"text-2xl font-bold text-slate-900\">---</p>\n                <p className=\"text-sm text-clinical-gray\">Items tracked</p>\n              </Card>\n              \n              <Card className=\"p-6 opacity-50\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <h3 className=\"text-sm font-medium text-clinical-gray\">Low Stock</h3>\n                  <AlertTriangle className=\"w-5 h-5 text-chiron-orange\" />\n                </div>\n                <p className=\"text-2xl font-bold text-slate-900\">---</p>\n                <p className=\"text-sm text-clinical-gray\">Items need reorder</p>\n              </Card>\n              \n              <Card className=\"p-6 opacity-50\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <h3 className=\"text-sm font-medium text-clinical-gray\">Expiring Soon</h3>\n                  <AlertTriangle className=\"w-5 h-5 text-alert-red\" />\n                </div>\n                <p className=\"text-2xl font-bold text-slate-900\">---</p>\n                <p className=\"text-sm text-clinical-gray\">Within 30 days</p>\n              </Card>\n              \n              <Card className=\"p-6 opacity-50\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <h3 className=\"text-sm font-medium text-clinical-gray\">Stock Value</h3>\n                  <BarChart3 className=\"w-5 h-5 text-chiron-blue\" />\n                </div>\n                <p className=\"text-2xl font-bold text-slate-900\">---</p>\n                <p className=\"text-sm text-clinical-gray\">Total inventory</p>\n              </Card>\n            </div>\n\n            {/* Development Timeline */}\n            <Card className=\"p-6\">\n              <h3 className=\"text-lg font-semibold text-slate-900 mb-4\">Development Timeline</h3>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center space-x-4 pb-4 border-b border-slate-200\">\n                  <div className=\"w-3 h-3 bg-chiron-blue rounded-full flex-shrink-0\"></div>\n                  <div>\n                    <h4 className=\"font-medium text-slate-900\">Phase 1: Core Inventory Management</h4>\n                    <p className=\"text-sm text-clinical-gray\">Basic stock tracking, add/remove items, search functionality</p>\n                    <p className=\"text-xs text-amber-600 mt-1\">Q1 2024</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center space-x-4 pb-4 border-b border-slate-200\">\n                  <div className=\"w-3 h-3 bg-slate-300 rounded-full flex-shrink-0\"></div>\n                  <div>\n                    <h4 className=\"font-medium text-slate-900\">Phase 2: Automated Reordering</h4>\n                    <p className=\"text-sm text-clinical-gray\">Smart alerts, supplier integration, purchase order automation</p>\n                    <p className=\"text-xs text-clinical-gray mt-1\">Q2 2024</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"w-3 h-3 bg-slate-300 rounded-full flex-shrink-0\"></div>\n                  <div>\n                    <h4 className=\"font-medium text-slate-900\">Phase 3: Advanced Analytics</h4>\n                    <p className=\"text-sm text-clinical-gray\">Usage analytics, cost optimization, predictive insights</p>\n                    <p className=\"text-xs text-clinical-gray mt-1\">Q3 2024</p>\n                  </div>\n                </div>\n              </div>\n            </Card>\n          </div>\n\n          {/* LLM Guide */}\n          <div className=\"lg:col-span-1\">\n            <LLMGuide\n              title=\"Stock Assistant\"\n              subtitle=\"Inventory guidance\"\n              initialMessage=\"While the ChironStock module is in development, I can help you plan your inventory management needs and provide guidance on best practices for medical supply tracking. What would you like to know?\"\n              placeholder=\"Ask about stock management...\"\n            />\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":9432},"server/ai-service.ts":{"content":"import { GoogleGenAI } from \"@google/genai\";\n\n// Use the Google API key for Gemma 3 API\nconst ai = new GoogleGenAI({ apiKey: process.env.GOOGLE_API_KEY || \"\" });\n\nexport interface ChatMessage {\n  role: \"user\" | \"assistant\";\n  content: string;\n  timestamp: string;\n}\n\nexport interface ChatResponse {\n  response: string;\n  error?: string;\n}\n\nexport async function generateAIResponse(\n  messages: ChatMessage[],\n): Promise<ChatResponse> {\n  try {\n    // Convert messages to Gemma 3 format\n    const prompt =\n      messages.map((msg) => `${msg.role}: ${msg.content}`).join(\"\\n\") +\n      \"\\nassistant:\";\n\n    const response = await ai.models.generateContent({\n      model: \"gemma-3-27b-it\",\n      contents: prompt,\n    });\n\n    const aiResponse =\n      response.text || \"I'm sorry, I couldn't generate a response.\";\n\n    return {\n      response: aiResponse.trim(),\n    };\n  } catch (error) {\n    console.error(\"AI Service Error:\", error);\n    return {\n      response:\n        \"I'm experiencing technical difficulties. Please try again later.\",\n      error: error instanceof Error ? error.message : \"Unknown error\",\n    };\n  }\n}\n\nexport async function generateHealthcareResponse(\n  userMessage: string,\n): Promise<ChatResponse> {\n  try {\n    const systemPrompt = `You are ChironIQ Assistant, an AI helper for UK healthcare practice management. \nYou help with:\n- CQC compliance questions\n- HR and staff management\n- Practice administration\n- General healthcare practice queries\n- Financial management for medical practices\n\nKeep responses professional, concise, and relevant to UK healthcare practices. \nIf asked about patient-specific medical advice, politely redirect to appropriate healthcare professionals.\n\nUser question: ${userMessage}`;\n\n    const response = await ai.models.generateContent({\n      model: \"gemma-3-27b-it\",\n      contents: systemPrompt,\n    });\n\n    const aiResponse =\n      response.text || \"I'm sorry, I couldn't generate a response.\";\n\n    return {\n      response: aiResponse.trim(),\n    };\n  } catch (error) {\n    console.error(\"Healthcare AI Service Error:\", error);\n    return {\n      response:\n        \"I'm experiencing technical difficulties. Please try again later.\",\n      error: error instanceof Error ? error.message : \"Unknown error\",\n    };\n  }\n}\n","size_bytes":2278},"shared/client-schema.ts":{"content":"import { z } from \"zod\";\n\n// Enum values (client-safe)\nexport const USER_ROLES = [\"staff\", \"poweruser\", \"user\"] as const;\nexport const JOBS = [\n  \"doctor\",\n  \"nurse\",\n  \"business\",\n  \"admin\",\n  \"reception\",\n  \"pharmacy\",\n  \"physio\",\n  \"health visitor\",\n  \"dentist\",\n  \"dental therapist\",\n  \"hygienist\",\n] as const;\nexport const MODULE_STATUSES = [\"good\", \"attention\", \"critical\"] as const;\nexport const CONTRACT_TYPES = [\n  \"permanent\",\n  \"temporary\",\n  \"locum\",\n  \"contractor\",\n] as const;\nexport const REVIEW_STATUSES = [\n  \"compliant\",\n  \"needs_review\",\n  \"non_compliant\",\n] as const;\nexport const SHIFTS = [\"all day\", \"am\", \"pm\", \"not in\"] as const;\nexport const TRANSACTION_CATEGORIES = [\"income\", \"expense\"] as const;\n\n// Zod schemas for validation (client-safe)\nexport const insertUserSchema = z.object({\n  employeeId: z.string(),\n  hashedPassword: z.string(),\n  salt: z.string(),\n  practiceId: z.string(),\n  role: z.enum(USER_ROLES).default(\"user\"),\n});\n\nexport const insertPersonSchema = z.object({\n  id: z.string(),\n  firstName: z.string(),\n  lastName: z.string(),\n  email: z.string().email(),\n});\n\nexport const insertStaffSchema = z.object({\n  practiceId: z.string(),\n  employeeId: z.string(),\n  title: z.string().optional(),\n  email: z.string().optional(),\n  phone: z.string().optional(),\n  address: z.string().optional(),\n  dateOfBirth: z.date().optional(),\n  niNumber: z.string().optional(),\n  position: z.enum(JOBS),\n  department: z.string(),\n  startDate: z.date(),\n  contract: z.enum(CONTRACT_TYPES),\n  salary: z.number().optional(),\n  workingHours: z.array(z.enum(SHIFTS)).max(5).optional(),\n  annualLeave: z.number().default(28).optional(),\n  studyLeave: z.number().default(5).optional(),\n  otherLeave: z.number().default(0).optional(),\n  professionalBody: z.string().optional(),\n  professionalBodyNumber: z.string().optional(),\n  appraisalDate: z.date().optional(),\n  revalidationInfo: z.string().optional(),\n  dbsCheckExpiry: z.date().optional(),\n  emergencyContactName: z.string().optional(),\n  emergencyContactPhone: z.string().optional(),\n  emergencyContactRelation: z.string().optional(),\n  status: z.string().default(\"active\").optional(),\n});\n\nexport const insertCqcStandardSchema = z.object({\n  regulationId: z.string(),\n  title: z.string(),\n  summary: z.string().optional(),\n  keyQuestion: z.string(),\n  sourceUrl: z.string().optional(),\n});\n\nexport const insertPracticeEvidenceSchema = z.object({\n  practiceId: z.string(),\n  fileName: z.string(),\n  description: z.string().optional(),\n  reviewStatus: z.enum(REVIEW_STATUSES).default(\"needs_review\"),\n  standardIds: z.array(z.string()).optional(),\n});\n\nexport const insertConversationSchema = z.object({\n  practiceId: z.string(),\n  participantIds: z.array(z.string()),\n  title: z.string().optional(),\n});\n\nexport const insertMessageSchema = z.object({\n  conversationId: z.number(),\n  senderId: z.string(),\n  content: z.string(),\n  blocked: z.boolean().default(false).optional(),\n  blockReason: z.string().optional(),\n});\n\nexport const insertTransactionSchema = z.object({\n  practiceId: z.string(),\n  description: z.string(),\n  amount: z.string(),\n  category: z.enum(TRANSACTION_CATEGORIES),\n  subcategory: z.string().optional(),\n  date: z.date(),\n  bankReference: z.string().optional(),\n});\n\nexport const insertInvoiceSchema = z.object({\n  practiceId: z.string(),\n  invoiceNumber: z.string(),\n  clientName: z.string(),\n  clientEmail: z.string().optional(),\n  description: z.string(),\n  amount: z.string(),\n  vatAmount: z.string().optional(),\n  totalAmount: z.string(),\n  status: z.string().default(\"draft\").optional(),\n  dueDate: z.date().optional(),\n  paidDate: z.date().optional(),\n});\n\nexport const insertPurchaseSchema = z.object({\n  practiceId: z.string(),\n  description: z.string(),\n  supplier: z.string(),\n  amount: z.string(),\n  vatAmount: z.string().optional(),\n  totalAmount: z.string(),\n  category: z.string(),\n  receiptUrl: z.string().optional(),\n  date: z.date(),\n});\n\nexport const insertVatReturnSchema = z.object({\n  practiceId: z.string(),\n  periodStart: z.date(),\n  periodEnd: z.date(),\n  vatDue: z.string(),\n  vatReclaimed: z.string(),\n  netVat: z.string(),\n  status: z.string().default(\"draft\").optional(),\n  submittedAt: z.date().optional(),\n});\n\nexport const insertShiftSchema = z.object({\n  email: z.string(),\n  mon: z.enum(SHIFTS).optional(),\n  tue: z.enum(SHIFTS).optional(),\n  wed: z.enum(SHIFTS).optional(),\n  thu: z.enum(SHIFTS).optional(),\n  fri: z.enum(SHIFTS).optional(),\n});\n\n// TypeScript types (inferred from Zod schemas)\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type InsertPerson = z.infer<typeof insertPersonSchema>;\nexport type InsertStaff = z.infer<typeof insertStaffSchema>;\nexport type InsertCqcStandard = z.infer<typeof insertCqcStandardSchema>;\nexport type InsertPracticeEvidence = z.infer<\n  typeof insertPracticeEvidenceSchema\n>;\nexport type InsertConversation = z.infer<typeof insertConversationSchema>;\nexport type InsertMessage = z.infer<typeof insertMessageSchema>;\nexport type InsertTransaction = z.infer<typeof insertTransactionSchema>;\nexport type InsertInvoice = z.infer<typeof insertInvoiceSchema>;\nexport type InsertPurchase = z.infer<typeof insertPurchaseSchema>;\nexport type InsertVatReturn = z.infer<typeof insertVatReturnSchema>;\nexport type InsertShift = z.infer<typeof insertShiftSchema>;\n\n// Select types (for data coming from the server)\nexport type User = {\n  employeeId: string;\n  hashedPassword: string;\n  salt: string;\n  practiceId: string;\n  role: (typeof USER_ROLES)[number];\n  createdAt: Date | null;\n};\n\nexport type Practice = {\n  name: string;\n  address: string | null;\n  phone: string | null;\n  email: string;\n  cqcRegistrationNumber: string | null;\n  createdAt: Date | null;\n};\n\nexport type Staff = {\n  practiceId: string;\n  employeeId: string;\n  title: string | null;\n  email: string | null;\n  phone: string | null;\n  address: string | null;\n  dateOfBirth: Date | null;\n  niNumber: string | null;\n  position: (typeof JOBS)[number];\n  department: string;\n  startDate: Date;\n  contract: (typeof CONTRACT_TYPES)[number];\n  salary: string | null;\n  workingHours: (typeof SHIFTS)[number][] | null;\n  annualLeave: number | null;\n  studyLeave: number | null;\n  otherLeave: number | null;\n  professionalBody: string | null;\n  professionalBodyNumber: string | null;\n  appraisalDate: Date | null;\n  revalidationInfo: string | null;\n  dbsCheckExpiry: string | null;\n  emergencyContactName: string | null;\n  emergencyContactPhone: string | null;\n  emergencyContactRelation: string | null;\n  status: string | null;\n  createdAt: Date | null;\n};\n\nexport type CqcStandard = {\n  regulationId: string;\n  title: string;\n  summary: string | null;\n  keyQuestion: string;\n  sourceUrl: string | null;\n  lastCheckedForUpdate: Date | null;\n  createdAt: Date | null;\n};\n\nexport type PracticeEvidence = {\n  practiceId: string;\n  fileName: string;\n  description: string | null;\n  uploadDate: Date | null;\n  reviewStatus: (typeof REVIEW_STATUSES)[number];\n  standardIds: string[] | null;\n  createdAt: Date | null;\n};\n\nexport type Conversation = {\n  id: number;\n  practiceId: string;\n  participantIds: string[];\n  title: string | null;\n  createdAt: Date | null;\n  updatedAt: Date | null;\n};\n\nexport type Message = {\n  id: number;\n  conversationId: number;\n  senderId: string;\n  content: string;\n  blocked: boolean | null;\n  blockReason: string | null;\n  createdAt: Date | null;\n};\n\nexport type Transaction = {\n  id: number;\n  practiceId: string;\n  description: string;\n  amount: string;\n  category: (typeof TRANSACTION_CATEGORIES)[number];\n  subcategory: string | null;\n  date: string;\n  bankReference: string | null;\n  createdAt: Date | null;\n};\n\nexport type Invoice = {\n  id: number;\n  practiceId: string;\n  invoiceNumber: string;\n  clientName: string;\n  clientEmail: string | null;\n  description: string;\n  amount: string;\n  vatAmount: string | null;\n  totalAmount: string;\n  status: string | null;\n  dueDate: Date | null;\n  paidDate: Date | null;\n  createdAt: Date | null;\n};\n\nexport type Purchase = {\n  id: number;\n  practiceId: string;\n  description: string;\n  supplier: string;\n  amount: string;\n  vatAmount: string | null;\n  totalAmount: string;\n  category: string;\n  receiptUrl: string | null;\n  date: Date;\n  createdAt: Date | null;\n};\n\nexport type VatReturn = {\n  id: number;\n  practiceId: string;\n  periodStart: Date;\n  periodEnd: Date;\n  vatDue: string;\n  vatReclaimed: string;\n  netVat: string;\n  status: string | null;\n  submittedAt: Date | null;\n  createdAt: Date | null;\n};\n\nexport type Person = {\n  id: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n};\n\nexport type Shift = {\n  email: string;\n  mon: (typeof SHIFTS)[number] | null;\n  tue: (typeof SHIFTS)[number] | null;\n  wed: (typeof SHIFTS)[number] | null;\n  thu: (typeof SHIFTS)[number] | null;\n  fri: (typeof SHIFTS)[number] | null;\n};\n","size_bytes":8873},"client/src/components/appraisal.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport {\n  ArrowLeft,\n  Plus,\n  Search,\n  Eye,\n  Edit,\n  Trash2,\n  Upload,\n  FileText,\n} from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport LLMGuide from \"@/components/llm-guide\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport {\n  insertStaffSchema,\n  staff,\n  AppraisalEvidence,\n  insertAppraisalEvidenceSchema,\n} from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useState } from \"react\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { FileUploader } from \"@/components/FileUploader\";\nimport { useAuth } from \"@/components/auth/authProvider\";\n\nconst staffSchema = createInsertSchema(staff).extend({\n  firstName: z.string(),\n  lastName: z.string(),\n});\n\ntype StaffData = z.infer<typeof staffSchema>;\n\nconst staffFormSchema = insertStaffSchema\n  .extend({\n    practiceId: z.string().optional(),\n    // Person fields from insertPersonSchema\n    firstName: z.string().min(1, \"First name is required\"),\n    lastName: z.string().min(1, \"Last name is required\"),\n    // Use contract field directly from schema instead of contractType\n  })\n  .omit({\n    // Remove fields that will be handled separately\n  });\n\ntype StaffFormData = z.infer<typeof staffFormSchema>;\n\ninterface AppraisalManagementProps {\n  onBack: () => void;\n}\n\nexport default function AppraisalManagement({\n  onBack,\n}: AppraisalManagementProps) {\n  const { user, logout } = useAuth();\n  const [selectedStaff, setSelectedStaff] = useState<StaffData | null>(null);\n  const [showAddDialog, setShowAddDialog] = useState(false);\n  const [viewMode, setViewMode] = useState<\"list\" | \"view\" | \"edit\">(\"list\");\n  const [search, setSearch] = useState<String | null>(null);\n  const [department, setDepartment] = useState<String | null>(null);\n  const { toast } = useToast();\n\n  const { data: staff, isLoading } = useQuery<StaffData[]>({\n    queryKey: [\"/api/hr/staff\"],\n    queryFn: async () => {\n      const response = await apiRequest(\"GET\", \"/api/hr/staff\", user?.email);\n      const result = await response.json();\n      return result.data || [];\n    },\n  });\n\n  const { data: appraisals, isLoading: isAppraisalsLoading } = useQuery<\n    AppraisalEvidence[]\n  >({\n    queryKey: [\"/api/hr/appraisals\"],\n    queryFn: async () => {\n      const response = await apiRequest(\n        \"GET\",\n        \"/api/hr/appraisals\",\n        user?.email,\n      );\n      const result = await response.json();\n      return result.data || [];\n    },\n  });\n\n  const form = useForm<StaffFormData>({\n    resolver: zodResolver(staffFormSchema),\n    defaultValues: {\n      employeeId: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      title: \"\",\n      email: \"\",\n      phone: \"\",\n      address: \"\",\n      dateOfBirth: \"\",\n      niNumber: \"\",\n      position: \"admin\",\n      department: \"\",\n      startDate: \"\",\n      contract: \"permanent\", // Use contract instead of contractType\n      salary: \"0\",\n      workingHours: undefined,\n      professionalBody: \"\",\n      professionalBodyNumber: \"\",\n      appraisalDate: \"\",\n      nextAppraisal: \"\",\n      revalidationInfo: \"\",\n      dbsCheckExpiry: \"\",\n      emergencyContactName: \"\",\n      emergencyContactPhone: \"\",\n      emergencyContactRelation: \"\",\n    },\n  });\n\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearch(e.currentTarget.value);\n  };\n\n  const updateStaffMutation = useMutation({\n    mutationFn: async ({\n      employeeId,\n      data,\n    }: {\n      employeeId: string;\n      data: Partial<StaffFormData>;\n    }) => {\n      const response = await apiRequest(\n        \"PUT\",\n        `/api/hr/staff/${employeeId}`,\n        data,\n      );\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hr/staff\"] });\n      toast({\n        title: \"Success\",\n        description: \"Staff member updated successfully\",\n      });\n      setViewMode(\"view\");\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update staff member\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const uploadAppraisalMutation = useMutation({\n    mutationFn: async (evidenceData: {\n      fileName: string;\n      path: string;\n      description?: string;\n      employeeId: string;\n    }) => {\n      const response = await apiRequest(\n        \"POST\",\n        \"/api/hr/appraisal\",\n        evidenceData,\n      );\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hr/appraisals\"] });\n      toast({\n        title: \"Success\",\n        description: \"Appraisal evidence uploaded successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to upload evidence\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleViewStaff = (staffMember: StaffData) => {\n    setSelectedStaff(staffMember);\n    setViewMode(\"view\");\n  };\n\n  const handleUploadComplete = (filePath: string) => {\n    const fileName = prompt(\"Enter evidence name:\");\n    const description = prompt(\"Enter evidence description:\");\n    const months = prompt(\"Enter month to next appraisal:\");\n    if (!selectedStaff) {\n      return;\n    }\n\n    const evidenceData = {\n      fileName: fileName || `Appraisal_${new Date().toLocaleString()}`,\n      path: filePath,\n      description:\n        description ||\n        `Appraisal of ${selectedStaff.firstName} ${selectedStaff.lastName} - ${new Date().toLocaleString()}`,\n      employeeId: selectedStaff.employeeId,\n    };\n    var next = new Date();\n    next.setMonth(next.getMonth() + parseInt(months || \"12\"));\n    uploadAppraisalMutation.mutate(evidenceData);\n    updateStaffMutation.mutate({\n      employeeId: selectedStaff.employeeId,\n\n      data: {\n        ...selectedStaff,\n        appraisalDate: new Date().toISOString().split(\"T\")[0],\n        nextAppraisal: next.toISOString().split(\"T\")[0],\n      },\n    });\n  };\n\n  if (viewMode === \"view\" && selectedStaff) {\n    return (\n      <div className=\"min-h-screen bg-slate-50\">\n        <header className=\"bg-white border-b border-slate-200 px-6 py-4\">\n          <div className=\"max-w-7xl mx-auto flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                variant=\"ghost\"\n                onClick={() => setViewMode(\"list\")}\n                className=\"flex items-center space-x-2\"\n              >\n                <ArrowLeft className=\"w-4 h-4\" />\n                <span>Back to Staff List</span>\n              </Button>\n              <div className=\"w-px h-6 bg-slate-200\"></div>\n              <h1 className=\"text-xl font-semibold text-slate-900\">\n                Staff Profile\n              </h1>\n            </div>\n          </div>\n        </header>\n\n        <main className=\"max-w-7xl mx-auto px-6 py-8\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-8\">\n            <div className=\"lg:col-span-3\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                {/* Contact Information */}\n                <Card className=\"p-6\">\n                  <h3 className=\"font-semibold text-slate-900 mb-4\">\n                    Contact Information\n                  </h3>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"w-16 h-16 bg-chiron-blue rounded-full flex items-center justify-center\">\n                        <span className=\"text-white font-semibold text-lg\">\n                          {selectedStaff.firstName[0]}\n                          {selectedStaff.lastName[0]}\n                        </span>\n                      </div>\n                      <div>\n                        <h4 className=\"text-lg font-semibold text-slate-900\">\n                          {selectedStaff.title} {selectedStaff.firstName}{\" \"}\n                          {selectedStaff.lastName}\n                        </h4>\n                        <p className=\"text-clinical-gray\">\n                          {selectedStaff.position}\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"grid grid-cols-1 gap-3 mt-4\">\n                      <div className=\"flex justify-between text-sm\">\n                        <span className=\"text-clinical-gray\">Email:</span>\n                        <span className=\"text-slate-900\">\n                          {selectedStaff.email || \"Not provided\"}\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between text-sm\">\n                        <span className=\"text-clinical-gray\">Phone:</span>\n                        <span className=\"text-slate-900\">\n                          {selectedStaff.phone || \"Not provided\"}\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between text-sm\">\n                        <span className=\"text-clinical-gray\">Address:</span>\n                        <span className=\"text-slate-900\">\n                          {selectedStaff.address || \"Not provided\"}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                </Card>\n\n                {/* Employment Details */}\n                <Card className=\"p-6\">\n                  <h3 className=\"font-semibold text-slate-900 mb-4\">\n                    Employment Details\n                  </h3>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-clinical-gray\">Employee ID:</span>\n                      <span className=\"text-slate-900\">\n                        {selectedStaff.employeeId}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-clinical-gray\">Department:</span>\n                      <span className=\"text-slate-900\">\n                        {selectedStaff.department}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-clinical-gray\">Start Date:</span>\n                      <span className=\"text-slate-900\">\n                        {selectedStaff.startDate}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-clinical-gray\">Contract Type:</span>\n                      <Badge variant=\"secondary\">\n                        {selectedStaff.contract}\n                      </Badge>\n                    </div>\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-clinical-gray\">Status:</span>\n                      <Badge className=\"bg-medical-green text-white\">\n                        {selectedStaff.status || \"Active\"}\n                      </Badge>\n                    </div>\n                  </div>\n                </Card>\n\n                {/* Professional Details */}\n                <Card className=\"p-6\">\n                  <h3 className=\"font-semibold text-slate-900 mb-4\">\n                    Professional Compliance\n                  </h3>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-clinical-gray\">\n                        Professional Body:\n                      </span>\n                      <span className=\"text-slate-900\">\n                        {selectedStaff.professionalBody || \"Not applicable\"}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-clinical-gray\">\n                        Registration Number:\n                      </span>\n                      <span className=\"text-slate-900\">\n                        {selectedStaff.professionalBodyNumber ||\n                          \"Not applicable\"}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-clinical-gray\">\n                        Next Appraisal:\n                      </span>\n                      <Button\n                        variant=\"ghost\"\n                        onClick={() => {\n                          const months = prompt(\n                            \"Enter month to next appraisal:\",\n                          );\n                          if (!selectedStaff) {\n                            return;\n                          }\n                          var next = new Date();\n                          next.setMonth(\n                            next.getMonth() + parseInt(months || \"12\"),\n                          );\n                          updateStaffMutation.mutate({\n                            employeeId: selectedStaff.employeeId,\n\n                            data: {\n                              ...selectedStaff,\n                              nextAppraisal: next.toISOString().split(\"T\")[0],\n                            },\n                          });\n                        }}\n                        className=\"flex items-center space-x-2\"\n                        disabled={updateStaffMutation.isPending}\n                      >\n                        <Badge className=\"bg-medical-green text-white\">\n                          {selectedStaff.nextAppraisal || \"Now\"}\n                        </Badge>\n                      </Button>\n                    </div>\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-clinical-gray\">\n                        DBS Check Expiry:\n                      </span>\n                      <span className=\"text-slate-900\">\n                        {selectedStaff.dbsCheckExpiry || \"Not provided\"}\n                      </span>\n                    </div>\n                  </div>\n                </Card>\n\n                <Card className=\"p-6\">\n                  <h3 className=\"font-semibold text-slate-900 mb-4\">\n                    Add Appraisal\n                  </h3>\n                  <div className=\"flex space-x-2\">\n                    <div>\n                      <FileUploader\n                        onUploadComplete={handleUploadComplete}\n                        maxFileSize={25}\n                        acceptedTypes=\".pdf,.doc,.docx,.jpg,.jpeg,.png,.xls,.xlsx\"\n                        disabled={uploadAppraisalMutation.isPending}\n                      />\n                    </div>\n                  </div>\n                </Card>\n\n                {appraisals &&\n                  appraisals.filter(\n                    (appraisal) =>\n                      appraisal.employeeId === selectedStaff.employeeId,\n                  ).length > 0 && (\n                    <Card data-testid=\"card-uploaded-files\">\n                      <CardHeader>\n                        <CardTitle>Appraisal Evidence</CardTitle>\n                      </CardHeader>\n                      <CardContent>\n                        <div className=\"space-y-2\">\n                          {appraisals\n                            .filter(\n                              (appraisal) =>\n                                appraisal.employeeId ===\n                                selectedStaff.employeeId,\n                            )\n                            .map((evidence, index) => (\n                              <div\n                                key={evidence.fileName}\n                                className=\"flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-800 rounded-lg\"\n                                data-testid={`uploaded-file-${index}`}\n                              >\n                                <div className=\"flex items-center gap-2\">\n                                  <FileText className=\"w-4 h-4 text-gray-500\" />\n                                  <span className=\"text-sm font-medium\">\n                                    {evidence.fileName}\n                                  </span>\n                                  {evidence.description && (\n                                    <span className=\"text-xs text-gray-500 italic\">\n                                      - {evidence.description}\n                                    </span>\n                                  )}\n                                </div>\n                                <span className=\"text-xs text-gray-500\">\n                                  {evidence.createdAt\n                                    ? new Date(\n                                        evidence.createdAt,\n                                      ).toLocaleDateString()\n                                    : \"Recently uploaded\"}\n                                </span>\n                              </div>\n                            ))}\n                        </div>\n                      </CardContent>\n                    </Card>\n                  )}\n              </div>\n            </div>\n\n            <div className=\"lg:col-span-1\">\n              <LLMGuide\n                title=\"Staff Guide\"\n                subtitle=\"Management assistance\"\n                initialMessage=\"I can help you with staff records, compliance tracking, and HR policies. What would you like to know about this staff member?\"\n                placeholder=\"Ask about staff...\"\n              />\n            </div>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      <header className=\"bg-white border-b border-slate-200 px-6 py-4\">\n        <div className=\"max-w-7xl mx-auto flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <Button\n              variant=\"ghost\"\n              onClick={onBack}\n              className=\"flex items-center space-x-2\"\n            >\n              <ArrowLeft className=\"w-4 h-4\" />\n              <span>Back to HR</span>\n            </Button>\n            <div className=\"w-px h-6 bg-slate-200\"></div>\n            <h1 className=\"text-xl font-semibold text-slate-900\">\n              Appraisal Management\n            </h1>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"max-w-7xl mx-auto px-6 py-8\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-8\">\n          <div className=\"lg:col-span-3\">\n            {/* Search and Filters */}\n            <Card className=\"p-6 mb-6\">\n              <div className=\"flex space-x-4\">\n                <div className=\"flex-1 relative\">\n                  <Search className=\"w-4 h-4 absolute left-3 top-3 text-clinical-gray\" />\n                  <Input\n                    placeholder=\"Search staff members...\"\n                    className=\"pl-10\"\n                    onChange={onChange}\n                  />\n                </div>\n                <Select>\n                  <SelectTrigger className=\"w-48\">\n                    <SelectValue placeholder=\"All Departments\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Departments</SelectItem>\n                    <SelectItem value=\"clinical\">Clinical</SelectItem>\n                    <SelectItem value=\"administration\">\n                      Administration\n                    </SelectItem>\n                    <SelectItem value=\"management\">Management</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </Card>\n\n            {/* Staff Grid */}\n            {isAppraisalsLoading || isLoading ? (\n              <div className=\"text-center py-8\">\n                <p className=\"text-clinical-gray\">Loading staff...</p>\n              </div>\n            ) : !staff || staff.length === 0 ? (\n              <div className=\"text-center py-12\">\n                <p className=\"text-clinical-gray mb-4\">\n                  No staff members found\n                </p>\n              </div>\n            ) : (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {staff\n                  .sort((a, b) => {\n                    // Priority order: No date first, then oldest dates\n                    if (!a.appraisalDate && !b.appraisalDate) return 0;\n                    if (!a.appraisalDate) return -1; // Staff without dates go FIRST\n                    if (!b.appraisalDate) return 1; // Staff without dates go FIRST\n                    return (\n                      new Date(a.appraisalDate).getTime() -\n                      new Date(b.appraisalDate).getTime()\n                    );\n                  })\n                  .map((staffMember) => {\n                    if (\n                      search == null ||\n                      staffMember.firstName\n                        .toLowerCase()\n                        .includes(search.toLowerCase()) ||\n                      search == \"\" ||\n                      staffMember.lastName\n                        .toLowerCase()\n                        .includes(search.toLowerCase()) ||\n                      staffMember.employeeId\n                        .toLowerCase()\n                        .includes(search.toLowerCase())\n                    ) {\n                      return (\n                        <Card key={staffMember.employeeId} className=\"p-6\">\n                          <CardContent className=\"p-0\">\n                            <div className=\"flex items-center space-x-4 mb-4\">\n                              <div className=\"w-12 h-12 bg-chiron-blue rounded-full flex items-center justify-center\">\n                                <span className=\"text-white font-semibold\">\n                                  {staffMember.firstName[0]}\n                                  {staffMember.lastName[0]}\n                                </span>\n                              </div>\n                              <div>\n                                <h3 className=\"font-semibold text-slate-900\">\n                                  {staffMember.firstName} {staffMember.lastName}\n                                </h3>\n                                <p className=\"text-sm text-clinical-gray\">\n                                  {staffMember.position}\n                                </p>\n                              </div>\n                            </div>\n                            <div className=\"space-y-2 mb-4\">\n                              <div className=\"flex justify-between text-sm\">\n                                <span className=\"text-clinical-gray\">\n                                  Employee ID:\n                                </span>\n                                <span className=\"text-slate-900\">\n                                  {staffMember.employeeId}\n                                </span>\n                              </div>\n                              <div className=\"flex justify-between text-sm\">\n                                <span className=\"text-clinical-gray\">\n                                  Department:\n                                </span>\n                                <span className=\"text-slate-900\">\n                                  {staffMember.department}\n                                </span>\n                              </div>\n                              <div className=\"flex justify-between text-sm\">\n                                <span className=\"text-clinical-gray\">\n                                  Last Appraisal:\n                                </span>\n                                <Badge className=\"bg-medical-green text-white\">\n                                  {staffMember.appraisalDate || \"None\"}\n                                </Badge>\n                              </div>\n\n                              <div className=\"flex justify-between text-sm\">\n                                <span className=\"text-clinical-gray\">\n                                  Next Appraisal:\n                                </span>\n                                <Button\n                                  variant=\"ghost\"\n                                  onClick={() => {\n                                    const months = prompt(\n                                      \"Enter month to next appraisal:\",\n                                    );\n\n                                    var next = new Date();\n                                    next.setMonth(\n                                      next.getMonth() +\n                                        parseInt(months || \"12\"),\n                                    );\n                                    updateStaffMutation.mutate({\n                                      employeeId: staffMember.employeeId,\n\n                                      data: {\n                                        ...staffMember,\n                                        nextAppraisal: next\n                                          .toISOString()\n                                          .split(\"T\")[0],\n                                      },\n                                    });\n                                  }}\n                                  className=\"flex items-center space-x-2\"\n                                  disabled={updateStaffMutation.isPending}\n                                >\n                                  <Badge className=\"bg-medical-green text-white\">\n                                    {staffMember.nextAppraisal || \"Now\"}\n                                  </Badge>\n                                </Button>\n                              </div>\n                            </div>\n                            <div className=\"flex space-x-2\">\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                className=\"flex-1\"\n                                onClick={() => handleViewStaff(staffMember)}\n                              >\n                                <Eye className=\"w-3 h-3 mr-1\" />\n                                View Appraisal\n                              </Button>\n                            </div>\n                          </CardContent>\n                        </Card>\n                      );\n                    }\n                  })}\n              </div>\n            )}\n          </div>\n\n          <div className=\"lg:col-span-1\">\n            <LLMGuide\n              title=\"Staff Guide\"\n              subtitle=\"Management assistance\"\n              initialMessage=\"I can help you with managing staff appraisals. What would you like to know?\"\n              placeholder=\"Ask about staff/appraisals...\"\n            />\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":27739},"server/objectAcl.ts":{"content":"import { File } from \"@google-cloud/storage\";\n\nconst ACL_POLICY_METADATA_KEY = \"custom:aclPolicy\";\n\n// The type of the access group for ChironIQ healthcare platform\nexport enum ObjectAccessGroupType {\n  PRACTICE_MEMBERS = \"practice_members\", // Users in the same practice\n  ROLE_BASED = \"role_based\", // Users with specific roles (doctor, nurse, admin, etc.)\n}\n\n// The logic user group that can access the object.\nexport interface ObjectAccessGroup {\n  type: ObjectAccessGroupType;\n  id: string; // practice ID for practice_members, role for role_based\n}\n\nexport enum ObjectPermission {\n  READ = \"read\",\n  WRITE = \"write\",\n}\n\nexport interface ObjectAclRule {\n  group: ObjectAccessGroup;\n  permission: ObjectPermission;\n}\n\n// The ACL policy of the object.\nexport interface ObjectAclPolicy {\n  owner: string;\n  visibility: \"public\" | \"private\";\n  aclRules?: Array<ObjectAclRule>;\n}\n\n// Check if the requested permission is allowed based on the granted permission.\nfunction isPermissionAllowed(\n  requested: ObjectPermission,\n  granted: ObjectPermission,\n): boolean {\n  // Users granted with read or write permissions can read the object.\n  if (requested === ObjectPermission.READ) {\n    return [ObjectPermission.READ, ObjectPermission.WRITE].includes(granted);\n  }\n\n  // Only users granted with write permissions can write the object.\n  return granted === ObjectPermission.WRITE;\n}\n\n// Base access group implementation for healthcare platform\nabstract class BaseObjectAccessGroup implements ObjectAccessGroup {\n  constructor(\n    public readonly type: ObjectAccessGroupType,\n    public readonly id: string,\n  ) {}\n\n  // Check if the user is a member of the group.\n  public abstract hasMember(userId: string): Promise<boolean>;\n}\n\n// Practice members access group - users in the same practice can access\nclass PracticeMembersAccessGroup extends BaseObjectAccessGroup {\n  constructor(practiceId: string) {\n    super(ObjectAccessGroupType.PRACTICE_MEMBERS, practiceId);\n  }\n\n  async hasMember(userId: string): Promise<boolean> {\n    // TODO: Implement actual practice membership check from database\n    // For now, return true as a stub - in production, this would check if the user belongs to the practice\n    return true;\n  }\n}\n\n// Role-based access group - users with specific healthcare roles\nclass RoleBasedAccessGroup extends BaseObjectAccessGroup {\n  constructor(role: string) {\n    super(ObjectAccessGroupType.ROLE_BASED, role);\n  }\n\n  async hasMember(userId: string): Promise<boolean> {\n    // TODO: Implement actual role check from database\n    // For now, return true as a stub - in production, this would check user's role\n    return true;\n  }\n}\n\nfunction createObjectAccessGroup(\n  group: ObjectAccessGroup,\n): BaseObjectAccessGroup {\n  switch (group.type) {\n    case ObjectAccessGroupType.PRACTICE_MEMBERS:\n      return new PracticeMembersAccessGroup(group.id);\n    case ObjectAccessGroupType.ROLE_BASED:\n      return new RoleBasedAccessGroup(group.id);\n    default:\n      throw new Error(`Unknown access group type: ${group.type}`);\n  }\n}\n\n// Sets the ACL policy to the object metadata.\nexport async function setObjectAclPolicy(\n  objectFile: File,\n  aclPolicy: ObjectAclPolicy,\n): Promise<void> {\n  const [exists] = await objectFile.exists();\n  if (!exists) {\n    throw new Error(`Object not found: ${objectFile.name}`);\n  }\n\n  await objectFile.setMetadata({\n    metadata: {\n      [ACL_POLICY_METADATA_KEY]: JSON.stringify(aclPolicy),\n    },\n  });\n}\n\n// Gets the ACL policy from the object metadata.\nexport async function getObjectAclPolicy(\n  objectFile: File,\n): Promise<ObjectAclPolicy | null> {\n  const [metadata] = await objectFile.getMetadata();\n  const aclPolicy = metadata?.metadata?.[ACL_POLICY_METADATA_KEY];\n  if (!aclPolicy) {\n    return null;\n  }\n  return JSON.parse(aclPolicy as string);\n}\n\n// Checks if the user can access the object.\nexport async function canAccessObject({\n  userId,\n  objectFile,\n  requestedPermission,\n}: {\n  userId?: string;\n  objectFile: File;\n  requestedPermission: ObjectPermission;\n}): Promise<boolean> {\n  // When this function is called, the acl policy is required.\n  const aclPolicy = await getObjectAclPolicy(objectFile);\n  if (!aclPolicy) {\n    return false;\n  }\n\n  // Public objects are always accessible for read.\n  if (\n    aclPolicy.visibility === \"public\" &&\n    requestedPermission === ObjectPermission.READ\n  ) {\n    return true;\n  }\n\n  // Access control requires the user id.\n  if (!userId) {\n    return false;\n  }\n\n  // The owner of the object can always access it.\n  if (aclPolicy.owner === userId) {\n    return true;\n  }\n\n  // Go through the ACL rules to check if the user has the required permission.\n  for (const rule of aclPolicy.aclRules || []) {\n    const accessGroup = createObjectAccessGroup(rule.group);\n    if (\n      (await accessGroup.hasMember(userId)) &&\n      isPermissionAllowed(requestedPermission, rule.permission)\n    ) {\n      return true;\n    }\n  }\n\n  return false;\n}","size_bytes":4954},"server/objectStorage.ts":{"content":"import { Storage, File } from \"@google-cloud/storage\";\nimport { Response } from \"express\";\nimport { randomUUID } from \"crypto\";\nimport {\n  ObjectAclPolicy,\n  ObjectPermission,\n  canAccessObject,\n  getObjectAclPolicy,\n  setObjectAclPolicy,\n} from \"./objectAcl\";\n\nconst REPLIT_SIDECAR_ENDPOINT = \"http://127.0.0.1:1106\";\n\n// The object storage client is used to interact with the object storage service.\nexport const objectStorageClient = new Storage({\n  credentials: {\n    audience: \"replit\",\n    subject_token_type: \"access_token\",\n    token_url: `${REPLIT_SIDECAR_ENDPOINT}/token`,\n    type: \"external_account\",\n    credential_source: {\n      url: `${REPLIT_SIDECAR_ENDPOINT}/credential`,\n      format: {\n        type: \"json\",\n        subject_token_field_name: \"access_token\",\n      },\n    },\n    universe_domain: \"googleapis.com\",\n  },\n  projectId: \"\",\n});\n\nexport class ObjectNotFoundError extends Error {\n  constructor() {\n    super(\"Object not found\");\n    this.name = \"ObjectNotFoundError\";\n    Object.setPrototypeOf(this, ObjectNotFoundError.prototype);\n  }\n}\n\n// The object storage service is used to interact with the object storage service.\nexport class ObjectStorageService {\n  constructor() {}\n\n  // Gets the public object search paths.\n  getPublicObjectSearchPaths(): Array<string> {\n    const pathsStr = process.env.PUBLIC_OBJECT_SEARCH_PATHS || \"\";\n    const paths = Array.from(\n      new Set(\n        pathsStr\n          .split(\",\")\n          .map((path) => path.trim())\n          .filter((path) => path.length > 0)\n      )\n    );\n    if (paths.length === 0) {\n      throw new Error(\n        \"PUBLIC_OBJECT_SEARCH_PATHS not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PUBLIC_OBJECT_SEARCH_PATHS env var (comma-separated paths).\"\n      );\n    }\n    return paths;\n  }\n\n  // Gets the private object directory.\n  getPrivateObjectDir(): string {\n    const dir = process.env.PRIVATE_OBJECT_DIR || \"\";\n    if (!dir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n    return dir;\n  }\n\n  // Search for a public object from the search paths.\n  async searchPublicObject(filePath: string): Promise<File | null> {\n    for (const searchPath of this.getPublicObjectSearchPaths()) {\n      const fullPath = `${searchPath}/${filePath}`;\n\n      // Full path format: /<bucket_name>/<object_name>\n      const { bucketName, objectName } = parseObjectPath(fullPath);\n      const bucket = objectStorageClient.bucket(bucketName);\n      const file = bucket.file(objectName);\n\n      // Check if file exists\n      const [exists] = await file.exists();\n      if (exists) {\n        return file;\n      }\n    }\n\n    return null;\n  }\n\n  // Downloads an object to the response.\n  async downloadObject(file: File, res: Response, cacheTtlSec: number = 3600) {\n    try {\n      // Get file metadata\n      const [metadata] = await file.getMetadata();\n      // Get the ACL policy for the object.\n      const aclPolicy = await getObjectAclPolicy(file);\n      const isPublic = aclPolicy?.visibility === \"public\";\n      // Set appropriate headers\n      res.set({\n        \"Content-Type\": metadata.contentType || \"application/octet-stream\",\n        \"Content-Length\": metadata.size,\n        \"Cache-Control\": `${\n          isPublic ? \"public\" : \"private\"\n        }, max-age=${cacheTtlSec}`,\n      });\n\n      // Stream the file to the response\n      const stream = file.createReadStream();\n\n      stream.on(\"error\", (err) => {\n        console.error(\"Stream error:\", err);\n        if (!res.headersSent) {\n          res.status(500).json({ error: \"Error streaming file\" });\n        }\n      });\n\n      stream.pipe(res);\n    } catch (error) {\n      console.error(\"Error downloading file:\", error);\n      if (!res.headersSent) {\n        res.status(500).json({ error: \"Error downloading file\" });\n      }\n    }\n  }\n\n  // Gets the upload URL for an object entity.\n  async getObjectEntityUploadURL(): Promise<string> {\n    const privateObjectDir = this.getPrivateObjectDir();\n    if (!privateObjectDir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n\n    const objectId = randomUUID();\n    const fullPath = `${privateObjectDir}/uploads/${objectId}`;\n\n    const { bucketName, objectName } = parseObjectPath(fullPath);\n\n    // Sign URL for PUT method with TTL\n    return signObjectURL({\n      bucketName,\n      objectName,\n      method: \"PUT\",\n      ttlSec: 900,\n    });\n  }\n\n  // Gets the object entity file from the object path.\n  async getObjectEntityFile(objectPath: string): Promise<File> {\n    if (!objectPath.startsWith(\"/objects/\")) {\n      throw new ObjectNotFoundError();\n    }\n\n    const parts = objectPath.slice(1).split(\"/\");\n    if (parts.length < 2) {\n      throw new ObjectNotFoundError();\n    }\n\n    const entityId = parts.slice(1).join(\"/\");\n    let entityDir = this.getPrivateObjectDir();\n    if (!entityDir.endsWith(\"/\")) {\n      entityDir = `${entityDir}/`;\n    }\n    const objectEntityPath = `${entityDir}${entityId}`;\n    const { bucketName, objectName } = parseObjectPath(objectEntityPath);\n    const bucket = objectStorageClient.bucket(bucketName);\n    const objectFile = bucket.file(objectName);\n    const [exists] = await objectFile.exists();\n    if (!exists) {\n      throw new ObjectNotFoundError();\n    }\n    return objectFile;\n  }\n\n  normalizeObjectEntityPath(rawPath: string): string {\n    if (!rawPath.startsWith(\"https://storage.googleapis.com/\")) {\n      return rawPath;\n    }\n\n    // Extract the path from the URL by removing query parameters and domain\n    const url = new URL(rawPath);\n    const rawObjectPath = url.pathname;\n\n    let objectEntityDir = this.getPrivateObjectDir();\n    if (!objectEntityDir.endsWith(\"/\")) {\n      objectEntityDir = `${objectEntityDir}/`;\n    }\n\n    if (!rawObjectPath.startsWith(objectEntityDir)) {\n      return rawObjectPath;\n    }\n\n    // Extract the entity ID from the path\n    const entityId = rawObjectPath.slice(objectEntityDir.length);\n    return `/objects/${entityId}`;\n  }\n\n  // Tries to set the ACL policy for the object entity and return the normalized path.\n  async trySetObjectEntityAclPolicy(\n    rawPath: string,\n    aclPolicy: ObjectAclPolicy\n  ): Promise<string> {\n    const normalizedPath = this.normalizeObjectEntityPath(rawPath);\n    if (!normalizedPath.startsWith(\"/\")) {\n      return normalizedPath;\n    }\n\n    const objectFile = await this.getObjectEntityFile(normalizedPath);\n    await setObjectAclPolicy(objectFile, aclPolicy);\n    return normalizedPath;\n  }\n\n  // Checks if the user can access the object entity.\n  async canAccessObjectEntity({\n    userId,\n    objectFile,\n    requestedPermission,\n  }: {\n    userId?: string;\n    objectFile: File;\n    requestedPermission?: ObjectPermission;\n  }): Promise<boolean> {\n    return canAccessObject({\n      userId,\n      objectFile,\n      requestedPermission: requestedPermission ?? ObjectPermission.READ,\n    });\n  }\n}\n\nfunction parseObjectPath(path: string): {\n  bucketName: string;\n  objectName: string;\n} {\n  if (!path.startsWith(\"/\")) {\n    path = `/${path}`;\n  }\n  const pathParts = path.split(\"/\");\n  if (pathParts.length < 3) {\n    throw new Error(\"Invalid path: must contain at least a bucket name\");\n  }\n\n  const bucketName = pathParts[1];\n  const objectName = pathParts.slice(2).join(\"/\");\n\n  return {\n    bucketName,\n    objectName,\n  };\n}\n\nasync function signObjectURL({\n  bucketName,\n  objectName,\n  method,\n  ttlSec,\n}: {\n  bucketName: string;\n  objectName: string;\n  method: \"GET\" | \"PUT\" | \"DELETE\" | \"HEAD\";\n  ttlSec: number;\n}): Promise<string> {\n  const request = {\n    bucket_name: bucketName,\n    object_name: objectName,\n    method,\n    expires_at: new Date(Date.now() + ttlSec * 1000).toISOString(),\n  };\n  const response = await fetch(\n    `${REPLIT_SIDECAR_ENDPOINT}/object-storage/signed-object-url`,\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(request),\n    }\n  );\n  if (!response.ok) {\n    throw new Error(\n      `Failed to sign object URL, errorcode: ${response.status}, ` +\n        `make sure you're running on Replit`\n    );\n  }\n\n  const { signed_url: signedURL } = await response.json();\n  return signedURL;\n}","size_bytes":8390},"client/src/components/FileUploader.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Upload, FileText, X } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface FileUploaderProps {\n  onUploadComplete?: (filePath: string) => void;\n  maxFileSize?: number; // in MB\n  acceptedTypes?: string;\n  className?: string;\n  disabled?: boolean;\n}\n\nexport function FileUploader({\n  onUploadComplete,\n  maxFileSize = 10,\n  acceptedTypes = \".pdf,.doc,.docx,.jpg,.jpeg,.png\",\n  className = \"\",\n  disabled = false\n}: FileUploaderProps) {\n  const [uploading, setUploading] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const { toast } = useToast();\n\n  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    // Validate file size\n    if (file.size > maxFileSize * 1024 * 1024) {\n      toast({\n        title: \"File too large\",\n        description: `File size must be under ${maxFileSize}MB`,\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setSelectedFile(file);\n  };\n\n  const handleUpload = async () => {\n    if (!selectedFile) return;\n\n    try {\n      setUploading(true);\n      setProgress(10);\n\n      // Get upload URL from backend\n      const uploadResponse = await apiRequest(\"POST\", \"/api/objects/upload\", {});\n\n      const uploadData = await uploadResponse.json();\n      const { uploadURL } = uploadData;\n      setProgress(30);\n\n      // Upload file directly to object storage\n      const uploadFileResponse = await fetch(uploadURL, {\n        method: \"PUT\",\n        body: selectedFile,\n        headers: {\n          \"Content-Type\": selectedFile.type,\n        },\n      });\n\n      if (!uploadFileResponse.ok) {\n        throw new Error(\"Upload failed\");\n      }\n\n      setProgress(70);\n\n      // Set ACL policy for the uploaded file\n      const aclResponse = await apiRequest(\"PUT\", \"/api/files/uploaded\", {\n        fileURL: uploadURL.split(\"?\")[0], // Remove query parameters\n        fileName: selectedFile.name,\n        fileType: selectedFile.type,\n        fileSize: selectedFile.size,\n      });\n\n      const aclData = await aclResponse.json();\n      setProgress(100);\n\n      toast({\n        title: \"Upload successful\",\n        description: \"File has been uploaded securely\",\n      });\n\n      onUploadComplete?.(aclData.objectPath);\n      setSelectedFile(null);\n      if (fileInputRef.current) {\n        fileInputRef.current.value = \"\";\n      }\n    } catch (error) {\n      console.error(\"Upload error:\", error);\n      toast({\n        title: \"Upload failed\",\n        description: \"There was an error uploading your file\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setUploading(false);\n      setProgress(0);\n    }\n  };\n\n  const clearFile = () => {\n    setSelectedFile(null);\n    if (fileInputRef.current) {\n      fileInputRef.current.value = \"\";\n    }\n  };\n\n  return (\n    <div className={`space-y-4 ${className}`} data-testid=\"file-uploader\">\n      <div className=\"flex items-center gap-2\">\n        <Button\n          onClick={() => fileInputRef.current?.click()}\n          disabled={disabled || uploading}\n          variant=\"outline\"\n          data-testid=\"button-select-file\"\n        >\n          <Upload className=\"w-4 h-4 mr-2\" />\n          Select File\n        </Button>\n        \n        <Input\n          ref={fileInputRef}\n          type=\"file\"\n          accept={acceptedTypes}\n          onChange={handleFileSelect}\n          className=\"hidden\"\n          disabled={disabled || uploading}\n        />\n\n        {selectedFile && (\n          <Button\n            onClick={handleUpload}\n            disabled={uploading}\n            data-testid=\"button-upload-file\"\n          >\n            {uploading ? \"Uploading...\" : \"Upload\"}\n          </Button>\n        )}\n      </div>\n\n      {selectedFile && (\n        <div className=\"flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-800 rounded-md\" data-testid=\"selected-file-display\">\n          <div className=\"flex items-center gap-2\">\n            <FileText className=\"w-4 h-4 text-gray-500\" />\n            <span className=\"text-sm font-medium\">{selectedFile.name}</span>\n            <span className=\"text-xs text-gray-500\">\n              ({(selectedFile.size / 1024 / 1024).toFixed(2)} MB)\n            </span>\n          </div>\n          <Button\n            onClick={clearFile}\n            variant=\"ghost\"\n            size=\"sm\"\n            disabled={uploading}\n            data-testid=\"button-clear-file\"\n          >\n            <X className=\"w-4 h-4\" />\n          </Button>\n        </div>\n      )}\n\n      {uploading && (\n        <div className=\"space-y-2\" data-testid=\"upload-progress\">\n          <Progress value={progress} className=\"w-full\" />\n          <p className=\"text-sm text-gray-500 text-center\">\n            Uploading... {progress}%\n          </p>\n        </div>\n      )}\n\n      <p className=\"text-xs text-gray-500\">\n        Supported formats: {acceptedTypes}. Max size: {maxFileSize}MB\n      </p>\n    </div>\n  );\n}","size_bytes":5326},"client/src/pages/FileUploadDemo.tsx":{"content":"import { useState } from \"react\";\nimport { FileUploader } from \"@/components/FileUploader\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { FileText, Shield, Users, AlertCircle } from \"lucide-react\";\n\nexport function FileUploadDemo() {\n  const [uploadedFiles, setUploadedFiles] = useState<Array<{\n    path: string;\n    name: string;\n    uploadedAt: string;\n  }>>([]);\n\n  const handleUploadComplete = (filePath: string) => {\n    setUploadedFiles(prev => [...prev, {\n      path: filePath,\n      name: `Document_${prev.length + 1}`,\n      uploadedAt: new Date().toLocaleString()\n    }]);\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto p-6 space-y-6\" data-testid=\"page-file-upload-demo\">\n      <div className=\"space-y-2\">\n        <h1 className=\"text-3xl font-bold\">Secure File Upload</h1>\n        <p className=\"text-gray-600 dark:text-gray-300\">\n          Upload confidential healthcare documents with enterprise-grade security\n        </p>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Upload Section */}\n        <Card data-testid=\"card-upload-section\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <FileText className=\"w-5 h-5 text-chiron-blue\" />\n              Upload Document\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <FileUploader \n              onUploadComplete={handleUploadComplete}\n              maxFileSize={25}\n              acceptedTypes=\".pdf,.doc,.docx,.jpg,.jpeg,.png,.xls,.xlsx\"\n            />\n            \n            <div className=\"space-y-3\">\n              <Separator />\n              <div className=\"space-y-2\">\n                <h4 className=\"text-sm font-medium\">Use Cases</h4>\n                <div className=\"flex flex-wrap gap-2\">\n                  <Badge variant=\"secondary\">CQC Evidence</Badge>\n                  <Badge variant=\"secondary\">Staff Certificates</Badge>\n                  <Badge variant=\"secondary\">Financial Records</Badge>\n                  <Badge variant=\"secondary\">Compliance Documents</Badge>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Security Features */}\n        <Card data-testid=\"card-security-features\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Shield className=\"w-5 h-5 text-green-600\" />\n              Security Features\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-3\">\n              <div className=\"flex items-start gap-3\">\n                <Shield className=\"w-4 h-4 text-green-600 mt-0.5\" />\n                <div>\n                  <h4 className=\"text-sm font-medium\">End-to-End Encryption</h4>\n                  <p className=\"text-xs text-gray-500\">Files encrypted during upload and storage</p>\n                </div>\n              </div>\n              \n              <div className=\"flex items-start gap-3\">\n                <Users className=\"w-4 h-4 text-blue-600 mt-0.5\" />\n                <div>\n                  <h4 className=\"text-sm font-medium\">Practice-Level Access</h4>\n                  <p className=\"text-xs text-gray-500\">Only your practice members can access files</p>\n                </div>\n              </div>\n              \n              <div className=\"flex items-start gap-3\">\n                <AlertCircle className=\"w-4 h-4 text-amber-600 mt-0.5\" />\n                <div>\n                  <h4 className=\"text-sm font-medium\">GDPR Compliant</h4>\n                  <p className=\"text-xs text-gray-500\">Meets UK healthcare data protection standards</p>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Uploaded Files */}\n      {uploadedFiles.length > 0 && (\n        <Card data-testid=\"card-uploaded-files\">\n          <CardHeader>\n            <CardTitle>Recently Uploaded</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2\">\n              {uploadedFiles.map((file, index) => (\n                <div \n                  key={index} \n                  className=\"flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-800 rounded-lg\"\n                  data-testid={`uploaded-file-${index}`}\n                >\n                  <div className=\"flex items-center gap-2\">\n                    <FileText className=\"w-4 h-4 text-gray-500\" />\n                    <span className=\"text-sm font-medium\">{file.name}</span>\n                  </div>\n                  <span className=\"text-xs text-gray-500\">{file.uploadedAt}</span>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":4974},"client/src/components/rota.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport {\n  ArrowLeft,\n  Plus,\n  Search,\n  Eye,\n  Edit,\n  Trash2,\n  Users,\n} from \"lucide-react\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n} from \"@/components/ui/table\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport LLMGuide from \"@/components/llm-guide\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertStaffSchema, staff } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useState, useMemo, useEffect } from \"react\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { index } from \"drizzle-orm/mysql-core\";\nimport { useAuth } from \"@/components/auth/authProvider\";\n\ninterface RotaRequirement {\n  position: string;\n  am: number;\n  pm: number;\n  allDay: number;\n  checked: boolean;\n}\n\ninterface StaffAssignment {\n  employeeId: string;\n  shifts: (\"am\" | \"pm\" | \"all-day\")[];\n}\n\ninterface RotaDay {\n  day: string;\n  requirements: RotaRequirement[];\n  assignments: StaffAssignment[];\n}\n\ninterface RotaManagementProps {\n  onBack: () => void;\n}\n\nconst staffSchema = createInsertSchema(staff).extend({\n  firstName: z.string(),\n  lastName: z.string(),\n});\n\ntype StaffData = z.infer<typeof staffSchema>;\n\nconst staffFormSchema = insertStaffSchema\n  .extend({\n    practiceId: z.string().optional(),\n    // Person fields from insertPersonSchema\n    firstName: z.string().min(1, \"First name is required\"),\n    lastName: z.string().min(1, \"Last name is required\"),\n    // Use contract field directly from schema instead of contractType\n  })\n  .omit({\n    // Remove fields that will be handled separately\n  });\n\ntype StaffFormData = z.infer<typeof staffFormSchema>;\n\nconst rotaFormSchema = z.object({\n  workingHours: z.array(z.string().nullable()).length(7),\n});\n\ntype RotaFormData = z.infer<typeof rotaFormSchema>;\n\nexport default function RotaManagement({ onBack }: RotaManagementProps) {\n  const { user, logout } = useAuth();\n  const [showEditDialog, setShowEditDialog] = useState(false);\n  const [showCreateRotaDialog, setShowCreateRotaDialog] = useState(false);\n  const [selectedStaff, setSelectedStaff] = useState<StaffData | null>(null);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  var weekday = new Array(7);\n  weekday[0] = \"Sunday\";\n  weekday[1] = \"Monday\";\n  weekday[2] = \"Tuesday\";\n  weekday[3] = \"Wednesday\";\n  weekday[4] = \"Thursday\";\n  weekday[5] = \"Friday\";\n  weekday[6] = \"Saturday\";\n  const [selectedDay, setSelectedDay] = useState<string>(\n    weekday[new Date().getDay()],\n  );\n  const [selectedRotaDay, setSelectedRotaDay] = useState<string>(\"Monday\");\n  const [rotaRequirements, setRotaRequirements] = useState<RotaRequirement[]>([\n    { position: \"admin\", am: 0, pm: 0, allDay: 0, checked: false },\n    { position: \"nurse\", am: 0, pm: 0, allDay: 0, checked: false },\n    { position: \"doctor\", am: 0, pm: 0, allDay: 0, checked: false },\n    { position: \"reception\", am: 0, pm: 0, allDay: 0, checked: false },\n    { position: \"business\", am: 0, pm: 0, allDay: 0, checked: false },\n    { position: \"pharmacy\", am: 0, pm: 0, allDay: 0, checked: false },\n    { position: \"physio\", am: 0, pm: 0, allDay: 0, checked: false },\n    { position: \"health visitor\", am: 0, pm: 0, allDay: 0, checked: false },\n    { position: \"dentist\", am: 0, pm: 0, allDay: 0, checked: false },\n    { position: \"dental therapist\", am: 0, pm: 0, allDay: 0, checked: false },\n    { position: \"hygienist\", am: 0, pm: 0, allDay: 0, checked: false },\n  ]);\n  const [rotaAssignments, setRotaAssignments] = useState<StaffAssignment[]>([]);\n\n  // https://stackoverflow.com/questions/66627655/how-do-i-map-several-controlled-input-checkboxes-from-an-array-in-react\n\n  const { data: staff, isLoading } = useQuery<StaffData[]>({\n    queryKey: [\"/api/hr/staff\", user?.email],\n    queryFn: async () => {\n      if (!user?.email) throw new Error(\"Not authenticated\");\n      const response = await fetch(`/api/hr/staff?email=${encodeURIComponent(user.email)}`);\n      if (!response.ok) throw new Error(\"Failed to fetch\");\n      return await response.json();\n    },\n    enabled: !!user?.email,\n  });\n\n  const { data: existingRota, isLoading: isRotaLoading } = useQuery<RotaDay | null>({\n    queryKey: [\"/api/hr/rota\", selectedRotaDay, user?.email],\n    queryFn: async () => {\n      if (!user?.email) throw new Error(\"Not authenticated\");\n      const response = await fetch(\n        `/api/hr/rota/${selectedRotaDay}?email=${encodeURIComponent(user.email)}`\n      );\n      if (response.status === 404) return null;\n      if (!response.ok) throw new Error(\"Failed to fetch\");\n      return await response.json();\n    },\n    enabled: !!user?.email && !!selectedRotaDay,\n  });\n\n  const { toast } = useToast();\n\n  // Populate form with existing rota data when it changes\n  useEffect(() => {\n    if (existingRota) {\n      setRotaRequirements(existingRota.requirements || rotaRequirements);\n      setRotaAssignments(existingRota.assignments || []);\n    }\n  }, [existingRota]);\n\n  const form = useForm<StaffFormData>({\n    resolver: zodResolver(staffFormSchema),\n    defaultValues: {\n      employeeId: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      title: \"\",\n      email: \"\",\n      phone: \"\",\n      address: \"\",\n      dateOfBirth: \"\",\n      niNumber: \"\",\n      position: \"admin\",\n      department: \"\",\n      startDate: \"\",\n      contract: \"permanent\", // Use contract instead of contractType\n      salary: \"0\",\n      workingHours: undefined,\n      professionalBody: \"\",\n      professionalBodyNumber: \"\",\n      appraisalDate: \"\",\n      nextAppraisal: \"\",\n      revalidationInfo: \"\",\n      dbsCheckExpiry: \"\",\n      emergencyContactName: \"\",\n      emergencyContactPhone: \"\",\n      emergencyContactRelation: \"\",\n    },\n  });\n\n  const rotaForm = useForm<RotaFormData>({\n    resolver: zodResolver(rotaFormSchema),\n    defaultValues: {\n      workingHours: [\n        \"not in\",\n        \"not in\",\n        \"not in\",\n        \"not in\",\n        \"not in\",\n        \"not in\",\n        \"not in\",\n      ],\n    },\n  });\n\n  // Filter staff based on search query\n  const filteredStaff = useMemo(() => {\n    if (!staff) return [];\n    if (!searchQuery.trim()) return staff;\n\n    const query = searchQuery.toLowerCase().trim();\n    return staff.filter((staffMember) => {\n      const fullName =\n        `${staffMember.firstName} ${staffMember.lastName}`.toLowerCase();\n      const position = staffMember.position?.toLowerCase() || \"\";\n      const email = staffMember.email?.toLowerCase() || \"\";\n\n      return (\n        fullName.includes(query) ||\n        position.includes(query) ||\n        email.includes(query)\n      );\n    });\n  }, [staff, searchQuery]);\n\n  // Get staff working on selected day\n  const dailySchedule = useMemo(() => {\n    if (!staff) return [];\n\n    const dayIndex = weekday.indexOf(selectedDay);\n    if (dayIndex === -1) return [];\n\n    return staff\n      .filter((staffMember) => {\n        const workingHours = staffMember.workingHours?.[dayIndex];\n        return workingHours && workingHours !== \"not in\";\n      })\n      .map((staffMember) => ({\n        ...staffMember,\n        workingHours: staffMember.workingHours?.[dayIndex] || \"not in\",\n      }))\n      .sort((a, b) => {\n        // Sort by working hours: all day first, then am, then pm\n        const order = { \"all day\": 0, am: 1, pm: 2 };\n        return (\n          (order[a.workingHours as keyof typeof order] || 3) -\n          (order[b.workingHours as keyof typeof order] || 3)\n        );\n      });\n  }, [staff, selectedDay]);\n\n  const table = {\n    headers: [\n      \"Employee\",\n      \"Monday\",\n      \"Tuesday\",\n      \"Wednesday\",\n      \"Thursday\",\n      \"Friday\",\n      \"Saturday\",\n      \"Sunday\",\n    ],\n    rows:\n      filteredStaff?.map((staffMember) => ({\n        id: staffMember.employeeId,\n        name: `${staffMember.firstName} ${staffMember.lastName}`,\n        sunday: staffMember.workingHours?.[0] || \"not in\",\n        monday: staffMember.workingHours?.[1] || \"not in\",\n        tuesday: staffMember.workingHours?.[2] || \"not in\",\n        wednesday: staffMember.workingHours?.[3] || \"not in\",\n        thursday: staffMember.workingHours?.[4] || \"not in\",\n        friday: staffMember.workingHours?.[5] || \"not in\",\n        saturday: staffMember.workingHours?.[6] || \"not in\",\n      })) || [],\n  };\n\n  const createStaffMutation = useMutation({\n    mutationFn: async (data: StaffFormData) => {\n      const response = await apiRequest(\"POST\", \"/api/hr/staff\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hr/staff\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/hr/metrics\"] });\n      toast({\n        title: \"Success\",\n        description: \"Staff member added successfully\",\n      });\n      setShowEditDialog(false);\n      form.reset();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to add staff member\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateStaffMutation = useMutation({\n    mutationFn: async ({\n      employeeId,\n      data,\n    }: {\n      employeeId: string;\n      data: Partial<StaffFormData>;\n    }) => {\n      const response = await apiRequest(\n        \"PUT\",\n        `/api/hr/staff/${employeeId}`,\n        data,\n      );\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hr/staff\"] });\n      toast({\n        title: \"Success\",\n        description: \"Staff member updated successfully\",\n      });\n      setShowEditDialog(false);\n      setSelectedStaff(null);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update staff member\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateRotaMutation = useMutation({\n    mutationFn: async ({\n      employeeId,\n      workingHours,\n    }: {\n      employeeId: string;\n      workingHours: (string | \"not in\")[];\n    }) => {\n      const response = await apiRequest(\"PUT\", `/api/hr/staff/${employeeId}`, {\n        workingHours,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hr/staff\"] });\n      toast({\n        title: \"Success\",\n        description: \"Rota updated successfully\",\n      });\n      setShowEditDialog(false);\n      setSelectedStaff(null);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update rota\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createRotaMutation = useMutation({\n    mutationFn: async (data: {\n      day: string;\n      requirements: RotaRequirement[];\n      assignments: StaffAssignment[];\n    }) => {\n      if (!user?.email) throw new Error(\"Not authenticated\");\n      \n      const response = await fetch(\n        `/api/hr/rota?email=${encodeURIComponent(user.email)}`,\n        {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify(data),\n          credentials: \"include\",\n        },\n      );\n\n      if (!response.ok) {\n        throw new Error(\"Failed to create rota\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hr/rota\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/hr/staff\"] });\n      toast({\n        title: \"Success\",\n        description: `Rota created for ${selectedRotaDay}`,\n      });\n      setShowCreateRotaDialog(false);\n      resetRotaForm();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create rota\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: StaffFormData) => {\n    if (!selectedStaff?.employeeId) {\n      toast({\n        title: \"Error\",\n        description: \"No staff member selected\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    updateStaffMutation.mutate({\n      employeeId: selectedStaff.employeeId,\n      data,\n    });\n  };\n\n  const onRotaSubmit = (data: RotaFormData) => {\n    if (!selectedStaff?.employeeId) {\n      toast({\n        title: \"Error\",\n        description: \"No staff member selected\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    updateRotaMutation.mutate({\n      employeeId: selectedStaff.employeeId,\n      workingHours: data.workingHours.map(hour => hour ?? \"not in\"),\n    });\n  };\n\n  const handleEditRota = (staffMember: StaffData) => {\n    setSelectedStaff(staffMember);\n    rotaForm.reset({\n      workingHours: staffMember.workingHours || [\n        \"not in\",\n        \"not in\",\n        \"not in\",\n        \"not in\",\n        \"not in\",\n        \"not in\",\n        \"not in\",\n      ],\n    });\n    setShowEditDialog(true);\n  };\n\n  // Rota creation functions\n  const updateRequirement = (\n    position: string,\n    shift: \"am\" | \"pm\" | \"allDay\",\n    value: number,\n  ) => {\n    setRotaRequirements((prev) =>\n      prev.map((req) =>\n        req.position === position\n          ? { ...req, [shift]: Math.max(0, value) }\n          : req,\n      ),\n    );\n  };\n\n  const assignStaff = (employeeId: string, shift: \"am\" | \"pm\" | \"all-day\") => {\n    setRotaAssignments((prev) => {\n      const existing = prev.find((a) => a.employeeId === employeeId);\n\n      if (existing) {\n        // If assigning all-day, remove other shifts\n        if (shift === \"all-day\") {\n          return prev.map((a) =>\n            a.employeeId === employeeId ? { ...a, shifts: [\"all-day\"] } : a,\n          );\n        }\n\n        // If already has all-day, don't add other shifts\n        if (existing.shifts.includes(\"all-day\")) {\n          return prev;\n        }\n\n        // Add shift if not already present\n        if (!existing.shifts.includes(shift)) {\n          return prev.map((a) =>\n            a.employeeId === employeeId\n              ? { ...a, shifts: [...a.shifts, shift] }\n              : a,\n          );\n        }\n        return prev;\n      } else {\n        return [...prev, { employeeId, shifts: [shift] }];\n      }\n    });\n  };\n\n  const removeStaffAssignment = (\n    employeeId: string,\n    shift?: \"am\" | \"pm\" | \"all-day\",\n  ) => {\n    setRotaAssignments((prev) => {\n      if (shift) {\n        // Remove specific shift\n        return prev\n          .map((a) =>\n            a.employeeId === employeeId\n              ? { ...a, shifts: a.shifts.filter((s) => s !== shift) }\n              : a,\n          )\n          .filter((a) => a.shifts.length > 0);\n      } else {\n        // Remove all assignments for this staff member\n        return prev.filter((a) => a.employeeId !== employeeId);\n      }\n    });\n  };\n\n  const calculateCoverage = (position: string) => {\n    const requirement = rotaRequirements.find((r) => r.position === position);\n    if (!requirement) return { am: 0, pm: 0, allDay: 0, amPmEquivalent: 0, effectiveAllDay: 0 };\n\n    const positionStaff =\n      filteredStaff?.filter((s) => s.position === position) || [];\n    const assignments = rotaAssignments.filter((a) =>\n      positionStaff.some((s) => s.employeeId === a.employeeId),\n    );\n\n    let amCovered = 0;\n    let pmCovered = 0;\n    let allDayCovered = 0;\n    let amPmEquivalent = 0;\n\n    assignments.forEach((assignment) => {\n      const hasAm = assignment.shifts.includes(\"am\");\n      const hasPm = assignment.shifts.includes(\"pm\");\n      const hasAllDay = assignment.shifts.includes(\"all-day\");\n\n      if (hasAllDay) {\n        allDayCovered += 1;\n        amCovered += 1;\n        pmCovered += 1;\n      } else {\n        if (hasAm) amCovered += 1;\n        if (hasPm) pmCovered += 1;\n        if (hasAm && hasPm) amPmEquivalent += 1;\n      }\n    });\n\n    return {\n      am: amCovered,\n      pm: pmCovered,\n      allDay: allDayCovered,\n      amPmEquivalent,\n      effectiveAllDay: allDayCovered + amPmEquivalent,\n    };\n  };\n\n  const getStaffAssignment = (employeeId: string) => {\n    return rotaAssignments.find((a) => a.employeeId === employeeId);\n  };\n\n  const canAssignShift = (\n    employeeId: string,\n    shift: \"am\" | \"pm\" | \"all-day\",\n    position: string,\n  ) => {\n    const assignment = getStaffAssignment(employeeId);\n    const coverage = calculateCoverage(position);\n    const requirement = rotaRequirements.find((r) => r.position === position);\n\n    if (!requirement) return false;\n\n    // Check if already has this shift\n    if (assignment?.shifts.includes(shift)) return false;\n\n    // Check if already has all-day (can't add am/pm)\n    if (assignment?.shifts.includes(\"all-day\") && shift !== \"all-day\")\n      return false;\n\n    // Check if requirements are already met\n    if (shift === \"am\" && coverage.am >= requirement.am) return false;\n    if (shift === \"pm\" && coverage.pm >= requirement.pm) return false;\n    if (shift === \"all-day\" && coverage.effectiveAllDay >= requirement.allDay)\n      return false;\n\n    return true;\n  };\n\n  const resetRotaForm = () => {\n    setRotaRequirements([\n      { position: \"admin\", am: 0, pm: 0, allDay: 0, checked: false },\n      { position: \"nurse\", am: 0, pm: 0, allDay: 0, checked: false },\n      { position: \"doctor\", am: 0, pm: 0, allDay: 0, checked: false },\n      { position: \"reception\", am: 0, pm: 0, allDay: 0, checked: false },\n      { position: \"business\", am: 0, pm: 0, allDay: 0, checked: false },\n      { position: \"pharmacy\", am: 0, pm: 0, allDay: 0, checked: false },\n      { position: \"physio\", am: 0, pm: 0, allDay: 0, checked: false },\n      { position: \"health visitor\", am: 0, pm: 0, allDay: 0, checked: false },\n      { position: \"dentist\", am: 0, pm: 0, allDay: 0, checked: false },\n      { position: \"dental therapist\", am: 0, pm: 0, allDay: 0, checked: false },\n      { position: \"hygienist\", am: 0, pm: 0, allDay: 0, checked: false },\n    ]);\n    setRotaAssignments([]);\n  };\n\n  const getStatusBadge = (hours: string) => {\n    if (hours === \"not in\") {\n      return (\n        <Badge\n          variant=\"secondary\"\n          className=\"bg-red-50 text-red-700 border-red-200\"\n        >\n          Not In\n        </Badge>\n      );\n    }\n    return (\n      <Badge\n        variant=\"secondary\"\n        className=\"bg-green-50 text-green-700 border-green-200\"\n      >\n        {hours}\n      </Badge>\n    );\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-slate-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto\"></div>\n          <p className=\"mt-2 text-slate-600\">Loading staff data...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      <header className=\"bg-white border-b border-slate-200 px-6 py-4\">\n        <div className=\"max-w-7xl mx-auto flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <Button\n              variant=\"ghost\"\n              onClick={onBack}\n              className=\"flex items-center space-x-2 hover:bg-slate-100\"\n            >\n              <ArrowLeft className=\"w-4 h-4\" />\n              <span>Back to HR</span>\n            </Button>\n            <div className=\"w-px h-6 bg-slate-200\"></div>\n            <h1 className=\"text-xl font-semibold text-slate-900\">\n              Rota Management\n            </h1>\n            <div className=\"flex items-center space-x-2 text-sm text-slate-600\">\n              <span>\n                {filteredStaff?.length || 0} of {staff?.length || 0} staff\n                members\n              </span>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-3\">\n            <Button\n              onClick={() => setShowCreateRotaDialog(true)}\n              className=\"flex items-center space-x-2 bg-blue-600 hover:bg-blue-700 text-white\"\n            >\n              <Plus className=\"w-4 h-4\" />\n              <span>Create Rota</span>\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"max-w-7xl mx-auto px-6 py-8\">\n        {/* Search and Filters */}\n        <div className=\"mb-6 flex flex-col sm:flex-row gap-4\">\n          <div className=\"relative flex-1\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400 w-4 h-4\" />\n            <Input\n              placeholder=\"Search staff by name, position, or email...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-10 bg-white border-slate-200 focus:border-blue-500 focus:ring-blue-500\"\n            />\n          </div>\n          {searchQuery && (\n            <Button\n              variant=\"outline\"\n              onClick={() => setSearchQuery(\"\")}\n              className=\"shrink-0 hover:bg-slate-50\"\n            >\n              Clear Search\n            </Button>\n          )}\n        </div>\n\n        <div className=\"bg-white rounded-lg shadow-sm border border-slate-200 overflow-hidden\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                {table.headers.map((header, index) => (\n                  <TableHead\n                    key={index}\n                    className=\"px-6 py-4 text-sm font-semibold text-slate-900 bg-slate-50\"\n                  >\n                    {header}\n                  </TableHead>\n                ))}\n                <TableHead className=\"px-6 py-4 text-sm font-semibold text-slate-900 bg-slate-50\">\n                  Actions\n                </TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {table.rows.length === 0 ? (\n                <TableRow>\n                  <TableCell\n                    colSpan={7}\n                    className=\"text-center py-12 text-slate-500\"\n                  >\n                    <div className=\"flex flex-col items-center space-y-3\">\n                      {searchQuery ? (\n                        <>\n                          <Search className=\"w-12 h-12 text-slate-300\" />\n                          <div>\n                            <p className=\"text-lg font-medium\">\n                              No matches found\n                            </p>\n                            <p className=\"text-sm\">\n                              Try adjusting your search terms\n                            </p>\n                          </div>\n                        </>\n                      ) : (\n                        <>\n                          <Users className=\"w-12 h-12 text-slate-300\" />\n                          <div>\n                            <p className=\"text-lg font-medium\">\n                              No staff members found\n                            </p>\n                            <p className=\"text-sm\">\n                              Add staff members to get started\n                            </p>\n                          </div>\n                        </>\n                      )}\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ) : (\n                table.rows.map((row, index) => {\n                  const staffMember = filteredStaff?.[index];\n                  return (\n                    <TableRow\n                      key={row.id || index}\n                      className=\"border-b hover:bg-slate-50/50 transition-colors\"\n                    >\n                      <TableCell className=\"px-6 py-4\">\n                        <div>\n                          <div className=\"font-medium text-slate-900\">\n                            {row.name}\n                          </div>\n                          {staffMember?.position && (\n                            <div className=\"text-sm text-slate-500 capitalize\">\n                              {staffMember.position}\n                            </div>\n                          )}\n                        </div>\n                      </TableCell>\n                      <TableCell className=\"px-6 py-4\">\n                        {getStatusBadge(row.monday)}\n                      </TableCell>\n                      <TableCell className=\"px-6 py-4\">\n                        {getStatusBadge(row.tuesday)}\n                      </TableCell>\n                      <TableCell className=\"px-6 py-4\">\n                        {getStatusBadge(row.wednesday)}\n                      </TableCell>\n                      <TableCell className=\"px-6 py-4\">\n                        {getStatusBadge(row.thursday)}\n                      </TableCell>\n                      <TableCell className=\"px-6 py-4\">\n                        {getStatusBadge(row.friday)}\n                      </TableCell>\n                      <TableCell className=\"px-6 py-4\">\n                        {getStatusBadge(row.saturday)}\n                      </TableCell>\n                      <TableCell className=\"px-6 py-4\">\n                        {getStatusBadge(row.sunday)}\n                      </TableCell>\n                      <TableCell className=\"px-6 py-4\">\n                        {staffMember && (\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handleEditRota(staffMember)}\n                            className=\"flex items-center space-x-2 hover:bg-blue-50 hover:border-blue-200\"\n                          >\n                            <Edit className=\"w-3 h-3\" />\n                            <span>Edit Rota</span>\n                          </Button>\n                        )}\n                      </TableCell>\n                    </TableRow>\n                  );\n                })\n              )}\n            </TableBody>\n          </Table>\n        </div>\n\n        {/* Daily Schedule Table */}\n        <div className=\"mt-8\">\n          <div className=\"bg-white rounded-lg shadow-sm border border-slate-200 overflow-hidden\">\n            <div className=\"px-6 py-4 border-b border-slate-200 bg-slate-50\">\n              <div className=\"flex items-center justify-between\">\n                <h2 className=\"text-lg font-semibold text-slate-900\">\n                  Daily Schedule\n                </h2>\n                <Select value={selectedDay} onValueChange={setSelectedDay}>\n                  <SelectTrigger className=\"w-48\">\n                    <SelectValue placeholder=\"Select day\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {weekday.map((day) => (\n                      <SelectItem key={day} value={day}>\n                        {day}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead className=\"px-6 py-4 text-sm font-semibold text-slate-900 bg-slate-50\">\n                    Staff Member\n                  </TableHead>\n                  <TableHead className=\"px-6 py-4 text-sm font-semibold text-slate-900 bg-slate-50\">\n                    Position\n                  </TableHead>\n                  <TableHead className=\"px-6 py-4 text-sm font-semibold text-slate-900 bg-slate-50\">\n                    Department\n                  </TableHead>\n                  <TableHead className=\"px-6 py-4 text-sm font-semibold text-slate-900 bg-slate-50\">\n                    Working Hours\n                  </TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {dailySchedule.length === 0 ? (\n                  <TableRow>\n                    <TableCell\n                      colSpan={4}\n                      className=\"text-center py-12 text-slate-500\"\n                    >\n                      <div className=\"flex flex-col items-center space-y-3\">\n                        <Users className=\"w-12 h-12 text-slate-300\" />\n                        <div>\n                          <p className=\"text-lg font-medium\">\n                            No staff scheduled\n                          </p>\n                          <p className=\"text-sm\">\n                            No staff members are working on {selectedDay}\n                          </p>\n                        </div>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ) : (\n                  dailySchedule.map((staffMember) => (\n                    <TableRow\n                      key={staffMember.employeeId}\n                      className=\"border-b hover:bg-slate-50/50 transition-colors\"\n                    >\n                      <TableCell className=\"px-6 py-4\">\n                        <div className=\"font-medium text-slate-900\">\n                          {staffMember.firstName} {staffMember.lastName}\n                        </div>\n                        <div className=\"text-sm text-slate-500\">\n                          {staffMember.employeeId}\n                        </div>\n                      </TableCell>\n                      <TableCell className=\"px-6 py-4\">\n                        <Badge\n                          variant=\"outline\"\n                          className=\"capitalize bg-blue-50 text-blue-700 border-blue-200\"\n                        >\n                          {staffMember.position}\n                        </Badge>\n                      </TableCell>\n                      <TableCell className=\"px-6 py-4\">\n                        <span className=\"text-slate-700\">\n                          {staffMember.department || \"Not specified\"}\n                        </span>\n                      </TableCell>\n                      <TableCell className=\"px-6 py-4\">\n                        {getStatusBadge(staffMember.workingHours)}\n                      </TableCell>\n                    </TableRow>\n                  ))\n                )}\n              </TableBody>\n            </Table>\n          </div>\n        </div>\n\n        <div className=\"mt-8\">\n          <LLMGuide\n            title=\"Rota Management Guide\"\n            subtitle=\"Get help with scheduling and staff management\"\n            initialMessage=\"I can help you with staff scheduling, managing working hours, handling time conflicts, and optimizing your rota. What would you like assistance with?\"\n            placeholder=\"Ask about rota management...\"\n          />\n        </div>\n      </main>\n\n      <Dialog open={showEditDialog} onOpenChange={setShowEditDialog}>\n        <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle className=\"text-xl font-semibold\">\n              Edit Rota -{\" \"}\n              {selectedStaff\n                ? `${selectedStaff.firstName} ${selectedStaff.lastName}`\n                : \"Staff Member\"}\n            </DialogTitle>\n          </DialogHeader>\n          <Form {...rotaForm}>\n            <form\n              onSubmit={rotaForm.handleSubmit(onRotaSubmit)}\n              className=\"space-y-6\"\n            >\n              <div className=\"grid grid-cols-1 gap-4\">\n                {weekday.map((day, index) => (\n                  <FormField\n                    key={day}\n                    control={rotaForm.control}\n                    name={`workingHours.${index}` as const}\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-sm font-medium text-slate-700\">\n                          {day}\n                        </FormLabel>\n                        <Select\n                          onValueChange={(value) => field.onChange(value)}\n                          value={field.value || \"not in\"}\n                        >\n                          <FormControl>\n                            <SelectTrigger className=\"w-full\">\n                              <SelectValue placeholder=\"Select working hours\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"am\">Morning (AM)</SelectItem>\n                            <SelectItem value=\"pm\">Afternoon (PM)</SelectItem>\n                            <SelectItem value=\"all day\">All Day</SelectItem>\n                            <SelectItem value=\"not in\">Not In</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                ))}\n              </div>\n              <div className=\"flex justify-end space-x-3 pt-6 border-t border-slate-200\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => {\n                    setShowEditDialog(false);\n                    setSelectedStaff(null);\n                  }}\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={updateRotaMutation.isPending}\n                  className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n                >\n                  {updateRotaMutation.isPending ? (\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent\"></div>\n                      <span>Updating...</span>\n                    </div>\n                  ) : (\n                    \"Update Rota\"\n                  )}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Create Rota Dialog */}\n      <Dialog\n        open={showCreateRotaDialog}\n        onOpenChange={setShowCreateRotaDialog}\n      >\n        <DialogContent className=\"max-w-6xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle className=\"text-xl font-semibold flex items-center gap-2\">\n              {existingRota ? \"Edit\" : \"Create\"} Rota for {selectedRotaDay}\n              {existingRota && (\n                <Badge variant=\"secondary\" className=\"bg-blue-50 text-blue-700 border-blue-200\">\n                  Existing\n                </Badge>\n              )}\n            </DialogTitle>\n          </DialogHeader>\n\n          <div className=\"space-y-6\">\n            {/* Day Selection */}\n            <div className=\"flex items-center space-x-4\">\n              <label className=\"text-sm font-medium text-slate-700\">Day:</label>\n              <Select\n                value={selectedRotaDay}\n                onValueChange={setSelectedRotaDay}\n              >\n                <SelectTrigger className=\"w-48\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {weekday.map((day) => (\n                    <SelectItem key={day} value={day}>\n                      {day}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Requirements Section */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold text-slate-900\">\n                Staff Requirements\n              </h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n                {rotaRequirements.map((req) => (\n                  <Card key={req.position} className=\"p-4\">\n                    <h4 className=\"font-medium text-slate-900 capitalize mb-3\">\n                      {req.position}\n                    </h4>\n                    <label\n                      style={{\n                        display: \"flex\",\n                        alignItems: \"center\",\n                        gap: \"0.5rem\",\n                      }}\n                    >\n                      <Checkbox\n                        checked={req.checked}\n                        onCheckedChange={() => {\n                          const item = req.position;\n                          const isChecked = req.checked;\n\n                          const updatedReqs = rotaRequirements.map(\n                            (subject) => {\n                              if (subject.position === item) {\n                                return {\n                                  ...subject,\n                                  checked: !isChecked,\n                                };\n                              }\n\n                              return subject;\n                            },\n                          );\n\n                          setRotaRequirements(updatedReqs);\n                        }}\n                      />\n                      Show Card\n                    </label>\n                    {req.checked == true && (\n                      <div className=\"space-y-3\">\n                        <div className=\"flex items-center justify-between\">\n                          <label className=\"text-sm text-slate-600\">AM</label>\n                          <div className=\"flex items-center space-x-2\">\n                            <Button\n                              type=\"button\"\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() =>\n                                updateRequirement(\n                                  req.position,\n                                  \"am\",\n                                  req.am - 1,\n                                )\n                              }\n                              disabled={req.am <= 0 && req.allDay <= 0}\n                              className=\"w-8 h-8 p-0\"\n                            >\n                              -\n                            </Button>\n                            <span className=\"w-8 text-center text-sm font-medium\">\n                              {req.am}\n                            </span>\n                            <Button\n                              type=\"button\"\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() =>\n                                updateRequirement(\n                                  req.position,\n                                  \"am\",\n                                  req.am + 1,\n                                )\n                              }\n                              className=\"w-8 h-8 p-0\"\n                            >\n                              +\n                            </Button>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center justify-between\">\n                          <label className=\"text-sm text-slate-600\">PM</label>\n                          <div className=\"flex items-center space-x-2\">\n                            <Button\n                              type=\"button\"\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() =>\n                                updateRequirement(\n                                  req.position,\n                                  \"pm\",\n                                  req.pm - 1,\n                                )\n                              }\n                              disabled={req.pm <= 0 && req.allDay <= 0}\n                              className=\"w-8 h-8 p-0\"\n                            >\n                              -\n                            </Button>\n                            <span className=\"w-8 text-center text-sm font-medium\">\n                              {req.pm}\n                            </span>\n                            <Button\n                              type=\"button\"\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() =>\n                                updateRequirement(\n                                  req.position,\n                                  \"pm\",\n                                  req.pm + 1,\n                                )\n                              }\n                              className=\"w-8 h-8 p-0\"\n                            >\n                              +\n                            </Button>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center justify-between\">\n                          <label className=\"text-sm text-slate-600\">\n                            All Day\n                          </label>\n                          <div className=\"flex items-center space-x-2\">\n                            <Button\n                              type=\"button\"\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() =>\n                                updateRequirement(\n                                  req.position,\n                                  \"allDay\",\n                                  req.allDay - 1,\n                                )\n                              }\n                              disabled={req.allDay <= 0}\n                              className=\"w-8 h-8 p-0\"\n                            >\n                              -\n                            </Button>\n                            <span className=\"w-8 text-center text-sm font-medium\">\n                              {req.allDay}\n                            </span>\n                            <Button\n                              type=\"button\"\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() =>\n                                updateRequirement(\n                                  req.position,\n                                  \"allDay\",\n                                  req.allDay + 1,\n                                )\n                              }\n                              className=\"w-8 h-8 p-0\"\n                            >\n                              +\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    )}\n                  </Card>\n                ))}\n              </div>\n            </div>\n\n            {/* Coverage Summary */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold text-slate-900\">\n                Coverage Status\n              </h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n                {rotaRequirements.map((req) => {\n                  const coverage = calculateCoverage(req.position);\n                  if (req.checked) {\n                    return (\n                      <Card key={req.position} className=\"p-4\">\n                        <h4 className=\"font-medium text-slate-900 capitalize mb-3\">\n                          {req.position}\n                        </h4>\n                        <div className=\"space-y-2 text-sm\">\n                          <div className=\"flex justify-between items-center\">\n                            <span>AM:</span>\n                            <div className=\"flex items-center space-x-2\">\n                              <span\n                                className={\n                                  coverage.am >= req.am\n                                    ? \"text-green-600\"\n                                    : \"text-amber-600\"\n                                }\n                              >\n                                {coverage.am}/{req.am}\n                              </span>\n                              {coverage.am >= req.am ? (\n                                <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                              ) : (\n                                <div className=\"w-2 h-2 bg-amber-500 rounded-full\"></div>\n                              )}\n                            </div>\n                          </div>\n                          <div className=\"flex justify-between items-center\">\n                            <span>PM:</span>\n                            <div className=\"flex items-center space-x-2\">\n                              <span\n                                className={\n                                  coverage.pm >= req.pm\n                                    ? \"text-green-600\"\n                                    : \"text-amber-600\"\n                                }\n                              >\n                                {coverage.pm}/{req.pm}\n                              </span>\n                              {coverage.pm >= req.pm ? (\n                                <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                              ) : (\n                                <div className=\"w-2 h-2 bg-amber-500 rounded-full\"></div>\n                              )}\n                            </div>\n                          </div>\n                          <div className=\"flex justify-between items-center\">\n                            <span>All Day:</span>\n                            <div className=\"flex items-center space-x-2\">\n                              <span\n                                className={\n                                  coverage.effectiveAllDay >= req.allDay\n                                    ? \"text-green-600\"\n                                    : \"text-amber-600\"\n                                }\n                              >\n                                {coverage.effectiveAllDay}/{req.allDay}\n                              </span>\n                              {coverage.effectiveAllDay >= req.allDay ? (\n                                <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                              ) : (\n                                <div className=\"w-2 h-2 bg-amber-500 rounded-full\"></div>\n                              )}\n                            </div>\n                          </div>\n                          {coverage.amPmEquivalent > 0 && (\n                            <div className=\"text-xs text-blue-600 mt-1\">\n                              {coverage.amPmEquivalent} AM+PM = All Day\n                            </div>\n                          )}\n                        </div>\n                      </Card>\n                    );\n                  }\n                })}\n              </div>\n            </div>\n\n            {/* Staff Assignment */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold text-slate-900\">\n                Staff Assignment\n              </h3>\n              <div className=\"space-y-4\">\n                {rotaRequirements.map((req, index) => {\n                  const positionStaff =\n                    filteredStaff?.filter((s) => s.position === req.position) ||\n                    [];\n                  if (positionStaff.length === 0) return null;\n\n                  if (req.checked) {\n                    return (\n                      <Card key={req.position} className=\"p-4\">\n                        <h4 className=\"font-medium text-slate-900 capitalize mb-4\">\n                          {req.position}s\n                        </h4>\n                        <div className=\"space-y-3\">\n                          {positionStaff.map((staffMember) => {\n                            const assignment = getStaffAssignment(\n                              staffMember.employeeId,\n                            );\n                            return (\n                              <div\n                                key={staffMember.employeeId}\n                                className=\"flex items-center justify-between p-3 bg-slate-50 rounded-lg\"\n                              >\n                                <div className=\"flex items-center space-x-3\">\n                                  <span className=\"font-medium text-slate-900\">\n                                    {staffMember.firstName}{\" \"}\n                                    {staffMember.lastName}\n                                  </span>\n                                  <div className=\"flex space-x-1\">\n                                    {assignment?.shifts.map((shift) => (\n                                      <div\n                                        key={shift}\n                                        className=\"flex items-center space-x-1\"\n                                      >\n                                        <Badge\n                                          variant=\"secondary\"\n                                          className=\"bg-green-100 text-green-800 border-green-200\"\n                                        >\n                                          {shift === \"all-day\"\n                                            ? \"All Day\"\n                                            : shift.toUpperCase()}\n                                        </Badge>\n                                        <Button\n                                          type=\"button\"\n                                          variant=\"ghost\"\n                                          size=\"sm\"\n                                          onClick={() =>\n                                            removeStaffAssignment(\n                                              staffMember.employeeId,\n                                              shift,\n                                            )\n                                          }\n                                          className=\"w-4 h-4 p-0 text-red-500 hover:text-red-700 hover:bg-red-50\"\n                                        >\n                                          ×\n                                        </Button>\n                                      </div>\n                                    ))}\n                                  </div>\n                                </div>\n                                <div className=\"flex space-x-2\">\n                                  <Button\n                                    type=\"button\"\n                                    variant=\"outline\"\n                                    size=\"sm\"\n                                    onClick={() =>\n                                      assignStaff(staffMember.employeeId, \"am\")\n                                    }\n                                    disabled={\n                                      !canAssignShift(\n                                        staffMember.employeeId,\n                                        \"am\",\n                                        req.position,\n                                      )\n                                    }\n                                    className=\"text-xs\"\n                                  >\n                                    AM\n                                  </Button>\n                                  <Button\n                                    type=\"button\"\n                                    variant=\"outline\"\n                                    size=\"sm\"\n                                    onClick={() =>\n                                      assignStaff(staffMember.employeeId, \"pm\")\n                                    }\n                                    disabled={\n                                      !canAssignShift(\n                                        staffMember.employeeId,\n                                        \"pm\",\n                                        req.position,\n                                      )\n                                    }\n                                    className=\"text-xs\"\n                                  >\n                                    PM\n                                  </Button>\n                                  <Button\n                                    type=\"button\"\n                                    variant=\"outline\"\n                                    size=\"sm\"\n                                    onClick={() =>\n                                      assignStaff(\n                                        staffMember.employeeId,\n                                        \"all-day\",\n                                      )\n                                    }\n                                    disabled={\n                                      !canAssignShift(\n                                        staffMember.employeeId,\n                                        \"all-day\",\n                                        req.position,\n                                      )\n                                    }\n                                    className=\"text-xs\"\n                                  >\n                                    All Day\n                                  </Button>\n                                </div>\n                              </div>\n                            );\n                          })}\n                        </div>\n                      </Card>\n                    );\n                  }\n                })}\n              </div>\n            </div>\n\n            {/* Action Buttons */}\n            <div className=\"flex justify-between pt-6 border-t border-slate-200\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={resetRotaForm}\n                className=\"text-slate-600 hover:text-slate-800\"\n              >\n                Reset Form\n              </Button>\n              <div className=\"flex space-x-3\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => {\n                    setShowCreateRotaDialog(false);\n                    resetRotaForm();\n                  }}\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"button\"\n                  className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n                  onClick={() => {\n                    createRotaMutation.mutate({\n                      day: selectedRotaDay,\n                      requirements: rotaRequirements,\n                      assignments: rotaAssignments,\n                    });\n                  }}\n                  disabled={createRotaMutation.isPending}\n                  data-testid=\"button-create-rota\"\n                >\n                  {createRotaMutation.isPending \n                    ? (existingRota ? \"Updating...\" : \"Creating...\") \n                    : (existingRota ? \"Update Rota\" : \"Create Rota\")}\n                </Button>\n              </div>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":55403},"client/src/components/auth/authGuard.tsx":{"content":"import React, { useState } from \"react\";\nimport { useAuth } from \"./authProvider\";\nimport LoginForm from \"./login\";\nimport RegisterForm from \"./register\";\n\ninterface AuthGuardProps {\n  children: React.ReactNode;\n}\n\nexport const AuthGuard: React.FC<AuthGuardProps> = ({ children }) => {\n  const { isAuthenticated, login, isLoading } = useAuth();\n  const [showRegister, setShowRegister] = useState(false);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-slate-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto\"></div>\n          <p className=\"mt-2 text-slate-600\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    if (showRegister) {\n      return (\n        <RegisterForm\n          onRegister={(email) => login(email)}\n          onSwitchToLogin={() => setShowRegister(false)}\n        />\n      );\n    }\n\n    return (\n      <LoginForm\n        onLogin={(email) => login(email)}\n        onSwitchToRegister={() => setShowRegister(true)}\n      />\n    );\n  }\n\n  return <>{children}</>;\n};\n","size_bytes":1157},"client/src/components/auth/authProvider.tsx":{"content":"import React, { createContext, useContext, useState, useEffect } from \"react\";\n\ninterface User {\n  email: string;\n  firstName?: string;\n  lastName?: string;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  isAuthenticated: boolean;\n  login: (email: string, firstName?: string, lastName?: string) => void;\n  logout: () => void;\n  isLoading: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n};\n\ninterface AuthProviderProps {\n  children: React.ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    // Check for existing session on app load\n    const savedUser = localStorage.getItem(\"hr_user\");\n    if (savedUser) {\n      try {\n        setUser(JSON.parse(savedUser));\n      } catch (error) {\n        localStorage.removeItem(\"hr_user\");\n      }\n    }\n    setIsLoading(false);\n  }, []);\n\n  const login = (email: string, firstName?: string, lastName?: string) => {\n    const userData = { email, firstName, lastName };\n    setUser(userData);\n    localStorage.setItem(\"hr_user\", JSON.stringify(userData));\n  };\n\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem(\"hr_user\");\n  };\n\n  const value = {\n    user,\n    isAuthenticated: !!user,\n    login,\n    logout,\n    isLoading,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};\n","size_bytes":1686},"client/src/components/auth/login.tsx":{"content":"import React, { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { z } from \"zod\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useForm } from \"react-hook-form\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport ChironLogo from \"@/lib/logo\";\n\nimport { Eye, EyeOff, Mail, Lock, LogIn } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n\nconst formSchema = z.object({\n  email: z.string().email({\n    message: \"Enter valid Email Address\",\n  }),\n  password: z.string().min(8, {\n    message: \"Password must be at least 8 characters.\",\n  }),\n});\n\ntype FormData = z.infer<typeof formSchema>;\n\ninterface LoginFormProps {\n  onLogin: (email: string) => void;\n  onSwitchToRegister: () => void;\n}\n\nexport default function LoginForm({\n  onLogin,\n  onSwitchToRegister,\n}: LoginFormProps) {\n  const [showPassword, setShowPassword] = useState(false);\n  const { toast } = useToast();\n\n  const form = useForm<FormData>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: FormData) => {\n      const response = await apiRequest(\"POST\", \"/api/login\", data);\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Login failed\");\n      }\n\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Login successful!\",\n      });\n      onLogin(data.email);\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Uh oh! Something went wrong.\",\n        description: error.message,\n      });\n    },\n  });\n\n  const onSubmit = (data: FormData) => {\n    loginMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-slate-50 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center space-y-2\">\n          <div className=\"mx-auto w-12 h-12 bg-blue-600 rounded-lg flex items-center justify-center\">\n            <ChironLogo />\n          </div>\n          <CardTitle className=\"text-2xl font-bold text-slate-900\">\n            Welcome Back\n          </CardTitle>\n          <p className=\"text-slate-600\">Sign in to your ChironIQ account</p>\n        </CardHeader>\n\n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-slate-700\">\n                      Email Address\n                    </FormLabel>\n                    <FormControl>\n                      <div className=\"relative\">\n                        <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400 w-4 h-4\" />\n                        <Input\n                          {...field}\n                          type=\"email\"\n                          placeholder=\"Enter your email\"\n                          className=\"pl-10 border-slate-200 focus:border-blue-500 focus:ring-blue-500\"\n                        />\n                      </div>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-slate-700\">Password</FormLabel>\n                    <FormControl>\n                      <div className=\"relative\">\n                        <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400 w-4 h-4\" />\n                        <Input\n                          {...field}\n                          type={showPassword ? \"text\" : \"password\"}\n                          placeholder=\"Enter your password\"\n                          className=\"pl-10 pr-10 border-slate-200 focus:border-blue-500 focus:ring-blue-500\"\n                        />\n                        <button\n                          type=\"button\"\n                          onClick={() => setShowPassword(!showPassword)}\n                          className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-slate-400 hover:text-slate-600\"\n                        >\n                          {showPassword ? (\n                            <EyeOff className=\"w-4 h-4\" />\n                          ) : (\n                            <Eye className=\"w-4 h-4\" />\n                          )}\n                        </button>\n                      </div>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <Button type=\"submit\" disabled={loginMutation.isPending}>\n                {loginMutation.isPending ? \"Logging in...\" : \"Login\"}\n              </Button>\n            </form>\n          </Form>\n\n          <div className=\"mt-6 text-center\">\n            <p className=\"text-slate-600\">\n              Don't have an account?{\" \"}\n              <button\n                onClick={onSwitchToRegister}\n                className=\"text-blue-600 hover:text-blue-700 font-medium hover:underline\"\n              >\n                Create one here\n              </button>\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":5926},"client/src/components/auth/register.tsx":{"content":"import React, { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { z } from \"zod\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useForm } from \"react-hook-form\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport ChironLogo from \"@/lib/logo\";\nimport { Eye, EyeOff, Mail, Lock, User, UserPlus } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n\ntype FormData = z.infer<typeof formSchema>;\n\ninterface RegisterFormProps {\n  onRegister: (email: string) => void;\n  onSwitchToLogin: () => void;\n}\n\nconst formSchema = z\n  .object({\n    firstName: z.string().min(1, \"First name is required\"),\n    lastName: z.string().min(1, \"Last name is required\"),\n    email: z.string().email(\"Please enter a valid email address\"),\n    password: z.string().min(8, \"Password must be at least 6 characters\"),\n    confirmPassword: z.string().min(8, \"Please confirm your password\"),\n    practiceId: z.string().min(1, {\n      message: \"Enter practice id.\",\n    }),\n    role: z.enum([\"staff\", \"poweruser\", \"user\"]),\n  })\n  .refine((data) => data.password === data.confirmPassword, {\n    message: \"Passwords don't match\",\n    path: [\"confirmPassword\"],\n  });\n\nexport default function RegisterForm({\n  onRegister,\n  onSwitchToLogin,\n}: RegisterFormProps) {\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const form = useForm<FormData>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      practiceId: \"\",\n      role: \"user\",\n    },\n  });\n\n  const signUpMutation = useMutation({\n    mutationFn: async (data: FormData) => {\n      const response = await apiRequest(\"POST\", \"/api/signup\", data);\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Sign Up failed\");\n      }\n\n      return response.json();\n    },\n    onSuccess: (data) => {\n      localStorage.setItem(\"token\", data.token);\n      toast({\n        title: \"Sign up successful!\",\n      });\n      setLocation(\"/\");\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Uh oh! Something went wrong.\",\n        description: error.message,\n      });\n    },\n  });\n\n  const onSubmit = (data: FormData) => {\n    signUpMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-slate-50 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center space-y-2\">\n          <div className=\"mx-auto w-12 h-12 bg-blue-600 rounded-lg flex items-center justify-center\">\n            <ChironLogo />\n          </div>\n          <CardTitle className=\"text-2xl font-bold text-slate-900\">\n            Create Account\n          </CardTitle>\n          <p className=\"text-slate-600\">Join HR Management System today</p>\n        </CardHeader>\n\n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"firstName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-slate-700\">\n                        First Name\n                      </FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400 w-4 h-4\" />\n                          <Input\n                            {...field}\n                            placeholder=\"First name\"\n                            className=\"pl-10 border-slate-200 focus:border-blue-500 focus:ring-blue-500\"\n                          />\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"lastName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-slate-700\">\n                        Last Name\n                      </FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400 w-4 h-4\" />\n                          <Input\n                            {...field}\n                            placeholder=\"Last name\"\n                            className=\"pl-10 border-slate-200 focus:border-blue-500 focus:ring-blue-500\"\n                          />\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-slate-700\">\n                      Email Address\n                    </FormLabel>\n                    <FormControl>\n                      <div className=\"relative\">\n                        <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400 w-4 h-4\" />\n                        <Input\n                          {...field}\n                          type=\"email\"\n                          placeholder=\"Enter your email\"\n                          className=\"pl-10 border-slate-200 focus:border-blue-500 focus:ring-blue-500\"\n                        />\n                      </div>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-slate-700\">Password</FormLabel>\n                    <FormControl>\n                      <div className=\"relative\">\n                        <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400 w-4 h-4\" />\n                        <Input\n                          {...field}\n                          type={showPassword ? \"text\" : \"password\"}\n                          placeholder=\"Create a password\"\n                          className=\"pl-10 pr-10 border-slate-200 focus:border-blue-500 focus:ring-blue-500\"\n                        />\n                        <button\n                          type=\"button\"\n                          onClick={() => setShowPassword(!showPassword)}\n                          className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-slate-400 hover:text-slate-600\"\n                        >\n                          {showPassword ? (\n                            <EyeOff className=\"w-4 h-4\" />\n                          ) : (\n                            <Eye className=\"w-4 h-4\" />\n                          )}\n                        </button>\n                      </div>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"confirmPassword\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-slate-700\">\n                      Confirm Password\n                    </FormLabel>\n                    <FormControl>\n                      <div className=\"relative\">\n                        <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400 w-4 h-4\" />\n                        <Input\n                          {...field}\n                          type={showConfirmPassword ? \"text\" : \"password\"}\n                          placeholder=\"Confirm your password\"\n                          className=\"pl-10 pr-10 border-slate-200 focus:border-blue-500 focus:ring-blue-500\"\n                        />\n                        <button\n                          type=\"button\"\n                          onClick={() =>\n                            setShowConfirmPassword(!showConfirmPassword)\n                          }\n                          className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-slate-400 hover:text-slate-600\"\n                        >\n                          {showConfirmPassword ? (\n                            <EyeOff className=\"w-4 h-4\" />\n                          ) : (\n                            <Eye className=\"w-4 h-4\" />\n                          )}\n                        </button>\n                      </div>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"practiceId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>PracticeId</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"practiceId\"\n                        placeholder=\"Enter practice Id\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"role\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Role</FormLabel>\n                    <Select\n                      onValueChange={field.onChange}\n                      defaultValue={field.value}\n                    >\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select a role\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"staff\">Staff</SelectItem>\n                        <SelectItem value=\"poweruser\">Power User</SelectItem>\n                        <SelectItem value=\"user\">User</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <Button type=\"submit\" disabled={signUpMutation.isPending}>\n                {signUpMutation.isPending ? \"Signing up...\" : \"Signed up\"}\n              </Button>\n            </form>\n          </Form>\n\n          <div className=\"mt-6 text-center\">\n            <p className=\"text-slate-600\">\n              Already have an account?{\" \"}\n              <button\n                onClick={onSwitchToLogin}\n                className=\"text-blue-600 hover:text-blue-700 font-medium hover:underline\"\n              >\n                Sign in here\n              </button>\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":11984},"client/src/components/policy.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport {\n  ArrowLeft,\n  Plus,\n  Search,\n  Eye,\n  Edit,\n  Trash2,\n  Upload,\n  FileText,\n} from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport LLMGuide from \"@/components/llm-guide\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport {\n  insertStaffSchema,\n  staff,\n  AppraisalEvidence,\n  Policy,\n  insertAppraisalEvidenceSchema,\n} from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useState } from \"react\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { FileUploader } from \"@/components/FileUploader\";\nimport { useAuth } from \"@/components/auth/authProvider\";\n\nconst staffSchema = createInsertSchema(staff).extend({\n  firstName: z.string(),\n  lastName: z.string(),\n});\n\ntype StaffData = z.infer<typeof staffSchema>;\n\nconst staffFormSchema = insertStaffSchema\n  .extend({\n    practiceId: z.string().optional(),\n    // Person fields from insertPersonSchema\n    firstName: z.string().min(1, \"First name is required\"),\n    lastName: z.string().min(1, \"Last name is required\"),\n    // Use contract field directly from schema instead of contractType\n  })\n  .omit({\n    // Remove fields that will be handled separately\n  });\n\ntype StaffFormData = z.infer<typeof staffFormSchema>;\n\ninterface PolicyManagementProps {\n  onBack: () => void;\n}\n\nexport default function PolicyManagement({ onBack }: PolicyManagementProps) {\n  const { user, logout } = useAuth();\n  const [selectedStaff, setSelectedStaff] = useState<StaffData | null>(null);\n  const [showAddDialog, setShowAddDialog] = useState(false);\n  const [viewMode, setViewMode] = useState<\"list\" | \"view\" | \"edit\">(\"list\");\n  const [search, setSearch] = useState<String | null>(null);\n  const [department, setDepartment] = useState<String | null>(null);\n  const { toast } = useToast();\n\n  const { data: staff, isLoading } = useQuery<StaffData[]>({\n    queryKey: [\"/api/hr/staff\", user?.email],\n    queryFn: async () => {\n      if (!user?.email) throw new Error(\"Not authenticated\");\n      const response = await fetch(\n        `/api/hr/staff?email=${encodeURIComponent(user.email)}`,\n      );\n      if (!response.ok) throw new Error(\"Failed to fetch\");\n      return await response.json();\n    },\n    enabled: !!user?.email,\n  });\n\n  const { data: appraisals, isLoading: isAppraisalsLoading } = useQuery<\n    AppraisalEvidence[]\n  >({\n    queryKey: [\"/api/hr/appraisals\", user?.email],\n    queryFn: async () => {\n      if (!user?.email) throw new Error(\"Not authenticated\");\n      const response = await fetch(\n        `/api/hr/appraisals?email=${encodeURIComponent(user.email)}`,\n      );\n      if (!response.ok) throw new Error(\"Failed to fetch\");\n      return await response.json();\n    },\n    enabled: !!user?.email,\n  });\n\n  const form = useForm<StaffFormData>({\n    resolver: zodResolver(staffFormSchema),\n    defaultValues: {\n      employeeId: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      title: \"\",\n      email: \"\",\n      phone: \"\",\n      address: \"\",\n      dateOfBirth: \"\",\n      niNumber: \"\",\n      position: \"admin\",\n      department: \"\",\n      startDate: \"\",\n      contract: \"permanent\", // Use contract instead of contractType\n      salary: \"0\",\n      workingHours: undefined,\n      professionalBody: \"\",\n      professionalBodyNumber: \"\",\n      appraisalDate: \"\",\n      nextAppraisal: \"\",\n      revalidationInfo: \"\",\n      dbsCheckExpiry: \"\",\n      emergencyContactName: \"\",\n      emergencyContactPhone: \"\",\n      emergencyContactRelation: \"\",\n    },\n  });\n\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearch(e.currentTarget.value);\n  };\n\n  const updateStaffMutation = useMutation({\n    mutationFn: async ({\n      employeeId,\n      data,\n    }: {\n      employeeId: string;\n      data: Partial<StaffFormData>;\n    }) => {\n      const response = await apiRequest(\n        \"PUT\",\n        `/api/hr/staff/${employeeId}`,\n        data,\n      );\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hr/staff\"] });\n      toast({\n        title: \"Success\",\n        description: \"Staff member updated successfully\",\n      });\n      setViewMode(\"view\");\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update staff member\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const uploadAppraisalMutation = useMutation({\n    mutationFn: async (evidenceData: {\n      fileName: string;\n      path: string;\n      description?: string;\n      employeeId: string;\n    }) => {\n      const response = await apiRequest(\n        \"POST\",\n        \"/api/hr/appraisal\",\n        evidenceData,\n      );\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hr/appraisals\"] });\n      toast({\n        title: \"Success\",\n        description: \"Appraisal evidence uploaded successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to upload evidence\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleViewStaff = (staffMember: StaffData) => {\n    setSelectedStaff(staffMember);\n    setViewMode(\"view\");\n  };\n\n  const handleUploadComplete = (filePath: string) => {\n    const fileName = prompt(\"Enter evidence name:\");\n    const description = prompt(\"Enter evidence description:\");\n    const months = prompt(\"Enter month to next appraisal:\");\n    if (!selectedStaff) {\n      return;\n    }\n\n    const evidenceData = {\n      fileName: fileName || `Appraisal_${new Date().toLocaleString()}`,\n      path: filePath,\n      description:\n        description ||\n        `Appraisal of ${selectedStaff.firstName} ${selectedStaff.lastName} - ${new Date().toLocaleString()}`,\n      employeeId: selectedStaff.employeeId,\n    };\n    var next = new Date();\n    next.setMonth(next.getMonth() + parseInt(months || \"12\"));\n    uploadAppraisalMutation.mutate(evidenceData);\n    updateStaffMutation.mutate({\n      employeeId: selectedStaff.employeeId,\n\n      data: {\n        ...selectedStaff,\n        appraisalDate: new Date().toISOString().split(\"T\")[0],\n        nextAppraisal: next.toISOString().split(\"T\")[0],\n      },\n    });\n  };\n\n  if (viewMode === \"view\" && selectedStaff) {\n    return (\n      <div className=\"min-h-screen bg-slate-50\">\n        <header className=\"bg-white border-b border-slate-200 px-6 py-4\">\n          <div className=\"max-w-7xl mx-auto flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                variant=\"ghost\"\n                onClick={() => setViewMode(\"list\")}\n                className=\"flex items-center space-x-2\"\n              >\n                <ArrowLeft className=\"w-4 h-4\" />\n                <span>Back to Staff List</span>\n              </Button>\n              <div className=\"w-px h-6 bg-slate-200\"></div>\n              <h1 className=\"text-xl font-semibold text-slate-900\">\n                Staff Profile\n              </h1>\n            </div>\n          </div>\n        </header>\n\n        <main className=\"max-w-7xl mx-auto px-6 py-8\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-8\">\n            <div className=\"lg:col-span-3\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                {/* Contact Information */}\n                <Card className=\"p-6\">\n                  <h3 className=\"font-semibold text-slate-900 mb-4\">\n                    Contact Information\n                  </h3>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"w-16 h-16 bg-chiron-blue rounded-full flex items-center justify-center\">\n                        <span className=\"text-white font-semibold text-lg\">\n                          {selectedStaff.firstName[0]}\n                          {selectedStaff.lastName[0]}\n                        </span>\n                      </div>\n                      <div>\n                        <h4 className=\"text-lg font-semibold text-slate-900\">\n                          {selectedStaff.title} {selectedStaff.firstName}{\" \"}\n                          {selectedStaff.lastName}\n                        </h4>\n                        <p className=\"text-clinical-gray\">\n                          {selectedStaff.position}\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"grid grid-cols-1 gap-3 mt-4\">\n                      <div className=\"flex justify-between text-sm\">\n                        <span className=\"text-clinical-gray\">Email:</span>\n                        <span className=\"text-slate-900\">\n                          {selectedStaff.email || \"Not provided\"}\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between text-sm\">\n                        <span className=\"text-clinical-gray\">Phone:</span>\n                        <span className=\"text-slate-900\">\n                          {selectedStaff.phone || \"Not provided\"}\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between text-sm\">\n                        <span className=\"text-clinical-gray\">Address:</span>\n                        <span className=\"text-slate-900\">\n                          {selectedStaff.address || \"Not provided\"}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                </Card>\n\n                {/* Employment Details */}\n                <Card className=\"p-6\">\n                  <h3 className=\"font-semibold text-slate-900 mb-4\">\n                    Employment Details\n                  </h3>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-clinical-gray\">Employee ID:</span>\n                      <span className=\"text-slate-900\">\n                        {selectedStaff.employeeId}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-clinical-gray\">Department:</span>\n                      <span className=\"text-slate-900\">\n                        {selectedStaff.department}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-clinical-gray\">Start Date:</span>\n                      <span className=\"text-slate-900\">\n                        {selectedStaff.startDate}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-clinical-gray\">Contract Type:</span>\n                      <Badge variant=\"secondary\">\n                        {selectedStaff.contract}\n                      </Badge>\n                    </div>\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-clinical-gray\">Status:</span>\n                      <Badge className=\"bg-medical-green text-white\">\n                        {selectedStaff.status || \"Active\"}\n                      </Badge>\n                    </div>\n                  </div>\n                </Card>\n\n                {/* Professional Details */}\n                <Card className=\"p-6\">\n                  <h3 className=\"font-semibold text-slate-900 mb-4\">\n                    Professional Compliance\n                  </h3>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-clinical-gray\">\n                        Professional Body:\n                      </span>\n                      <span className=\"text-slate-900\">\n                        {selectedStaff.professionalBody || \"Not applicable\"}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-clinical-gray\">\n                        Registration Number:\n                      </span>\n                      <span className=\"text-slate-900\">\n                        {selectedStaff.professionalBodyNumber ||\n                          \"Not applicable\"}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-clinical-gray\">\n                        Next Appraisal:\n                      </span>\n                      <Button\n                        variant=\"ghost\"\n                        onClick={() => {\n                          const months = prompt(\n                            \"Enter month to next appraisal:\",\n                          );\n                          if (!selectedStaff) {\n                            return;\n                          }\n                          var next = new Date();\n                          next.setMonth(\n                            next.getMonth() + parseInt(months || \"12\"),\n                          );\n                          updateStaffMutation.mutate({\n                            employeeId: selectedStaff.employeeId,\n\n                            data: {\n                              ...selectedStaff,\n                              nextAppraisal: next.toISOString().split(\"T\")[0],\n                            },\n                          });\n                        }}\n                        className=\"flex items-center space-x-2\"\n                        disabled={updateStaffMutation.isPending}\n                      >\n                        <Badge className=\"bg-medical-green text-white\">\n                          {selectedStaff.nextAppraisal || \"Now\"}\n                        </Badge>\n                      </Button>\n                    </div>\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-clinical-gray\">\n                        DBS Check Expiry:\n                      </span>\n                      <span className=\"text-slate-900\">\n                        {selectedStaff.dbsCheckExpiry || \"Not provided\"}\n                      </span>\n                    </div>\n                  </div>\n                </Card>\n\n                <Card className=\"p-6\">\n                  <h3 className=\"font-semibold text-slate-900 mb-4\">\n                    Add Appraisal\n                  </h3>\n                  <div className=\"flex space-x-2\">\n                    <div>\n                      <FileUploader\n                        onUploadComplete={handleUploadComplete}\n                        maxFileSize={25}\n                        acceptedTypes=\".pdf,.doc,.docx,.jpg,.jpeg,.png,.xls,.xlsx\"\n                        disabled={uploadAppraisalMutation.isPending}\n                      />\n                    </div>\n                  </div>\n                </Card>\n\n                {appraisals &&\n                  appraisals.filter(\n                    (appraisal) =>\n                      appraisal.employeeId === selectedStaff.employeeId,\n                  ).length > 0 && (\n                    <Card data-testid=\"card-uploaded-files\">\n                      <CardHeader>\n                        <CardTitle>Appraisal Evidence</CardTitle>\n                      </CardHeader>\n                      <CardContent>\n                        <div className=\"space-y-2\">\n                          {appraisals\n                            .filter(\n                              (appraisal) =>\n                                appraisal.employeeId ===\n                                selectedStaff.employeeId,\n                            )\n                            .map((evidence, index) => (\n                              <div\n                                key={evidence.fileName}\n                                className=\"flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-800 rounded-lg\"\n                                data-testid={`uploaded-file-${index}`}\n                              >\n                                <div className=\"flex items-center gap-2\">\n                                  <FileText className=\"w-4 h-4 text-gray-500\" />\n                                  <span className=\"text-sm font-medium\">\n                                    {evidence.fileName}\n                                  </span>\n                                  {evidence.description && (\n                                    <span className=\"text-xs text-gray-500 italic\">\n                                      - {evidence.description}\n                                    </span>\n                                  )}\n                                </div>\n                                <span className=\"text-xs text-gray-500\">\n                                  {evidence.createdAt\n                                    ? new Date(\n                                        evidence.createdAt,\n                                      ).toLocaleDateString()\n                                    : \"Recently uploaded\"}\n                                </span>\n                              </div>\n                            ))}\n                        </div>\n                      </CardContent>\n                    </Card>\n                  )}\n              </div>\n            </div>\n\n            <div className=\"lg:col-span-1\">\n              <LLMGuide\n                title=\"Staff Guide\"\n                subtitle=\"Management assistance\"\n                initialMessage=\"I can help you with staff records, compliance tracking, and HR policies. What would you like to know about this staff member?\"\n                placeholder=\"Ask about staff...\"\n              />\n            </div>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      <header className=\"bg-white border-b border-slate-200 px-6 py-4\">\n        <div className=\"max-w-7xl mx-auto flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <Button\n              variant=\"ghost\"\n              onClick={onBack}\n              className=\"flex items-center space-x-2\"\n            >\n              <ArrowLeft className=\"w-4 h-4\" />\n              <span>Back to HR</span>\n            </Button>\n            <div className=\"w-px h-6 bg-slate-200\"></div>\n            <h1 className=\"text-xl font-semibold text-slate-900\">\n              Appraisal Management\n            </h1>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"max-w-7xl mx-auto px-6 py-8\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-8\">\n          <div className=\"lg:col-span-3\">\n            {/* Search and Filters */}\n            <Card className=\"p-6 mb-6\">\n              <div className=\"flex space-x-4\">\n                <div className=\"flex-1 relative\">\n                  <Search className=\"w-4 h-4 absolute left-3 top-3 text-clinical-gray\" />\n                  <Input\n                    placeholder=\"Search staff members...\"\n                    className=\"pl-10\"\n                    onChange={onChange}\n                  />\n                </div>\n                <Select>\n                  <SelectTrigger className=\"w-48\">\n                    <SelectValue placeholder=\"All Departments\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Departments</SelectItem>\n                    <SelectItem value=\"clinical\">Clinical</SelectItem>\n                    <SelectItem value=\"administration\">\n                      Administration\n                    </SelectItem>\n                    <SelectItem value=\"management\">Management</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </Card>\n\n            {/* Staff Grid */}\n            {isAppraisalsLoading || isLoading ? (\n              <div className=\"text-center py-8\">\n                <p className=\"text-clinical-gray\">Loading staff...</p>\n              </div>\n            ) : !staff || staff.length === 0 ? (\n              <div className=\"text-center py-12\">\n                <p className=\"text-clinical-gray mb-4\">\n                  No staff members found\n                </p>\n              </div>\n            ) : (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {staff\n                  .sort((a, b) => {\n                    // Priority order: No date first, then oldest dates\n                    if (!a.appraisalDate && !b.appraisalDate) return 0;\n                    if (!a.appraisalDate) return -1; // Staff without dates go FIRST\n                    if (!b.appraisalDate) return 1; // Staff without dates go FIRST\n                    return (\n                      new Date(a.appraisalDate).getTime() -\n                      new Date(b.appraisalDate).getTime()\n                    );\n                  })\n                  .map((staffMember) => {\n                    if (\n                      search == null ||\n                      staffMember.firstName\n                        .toLowerCase()\n                        .includes(search.toLowerCase()) ||\n                      search == \"\" ||\n                      staffMember.lastName\n                        .toLowerCase()\n                        .includes(search.toLowerCase()) ||\n                      staffMember.employeeId\n                        .toLowerCase()\n                        .includes(search.toLowerCase())\n                    ) {\n                      return (\n                        <Card key={staffMember.employeeId} className=\"p-6\">\n                          <CardContent className=\"p-0\">\n                            <div className=\"flex items-center space-x-4 mb-4\">\n                              <div className=\"w-12 h-12 bg-chiron-blue rounded-full flex items-center justify-center\">\n                                <span className=\"text-white font-semibold\">\n                                  {staffMember.firstName[0]}\n                                  {staffMember.lastName[0]}\n                                </span>\n                              </div>\n                              <div>\n                                <h3 className=\"font-semibold text-slate-900\">\n                                  {staffMember.firstName} {staffMember.lastName}\n                                </h3>\n                                <p className=\"text-sm text-clinical-gray\">\n                                  {staffMember.position}\n                                </p>\n                              </div>\n                            </div>\n                            <div className=\"space-y-2 mb-4\">\n                              <div className=\"flex justify-between text-sm\">\n                                <span className=\"text-clinical-gray\">\n                                  Employee ID:\n                                </span>\n                                <span className=\"text-slate-900\">\n                                  {staffMember.employeeId}\n                                </span>\n                              </div>\n                              <div className=\"flex justify-between text-sm\">\n                                <span className=\"text-clinical-gray\">\n                                  Department:\n                                </span>\n                                <span className=\"text-slate-900\">\n                                  {staffMember.department}\n                                </span>\n                              </div>\n                              <div className=\"flex justify-between text-sm\">\n                                <span className=\"text-clinical-gray\">\n                                  Last Appraisal:\n                                </span>\n                                <Badge className=\"bg-medical-green text-white\">\n                                  {staffMember.appraisalDate || \"None\"}\n                                </Badge>\n                              </div>\n\n                              <div className=\"flex justify-between text-sm\">\n                                <span className=\"text-clinical-gray\">\n                                  Next Appraisal:\n                                </span>\n                                <Button\n                                  variant=\"ghost\"\n                                  onClick={() => {\n                                    const months = prompt(\n                                      \"Enter month to next appraisal:\",\n                                    );\n\n                                    var next = new Date();\n                                    next.setMonth(\n                                      next.getMonth() +\n                                        parseInt(months || \"12\"),\n                                    );\n                                    updateStaffMutation.mutate({\n                                      employeeId: staffMember.employeeId,\n\n                                      data: {\n                                        ...staffMember,\n                                        nextAppraisal: next\n                                          .toISOString()\n                                          .split(\"T\")[0],\n                                      },\n                                    });\n                                  }}\n                                  className=\"flex items-center space-x-2\"\n                                  disabled={updateStaffMutation.isPending}\n                                >\n                                  <Badge className=\"bg-medical-green text-white\">\n                                    {staffMember.nextAppraisal || \"Now\"}\n                                  </Badge>\n                                </Button>\n                              </div>\n                            </div>\n                            <div className=\"flex space-x-2\">\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                className=\"flex-1\"\n                                onClick={() => handleViewStaff(staffMember)}\n                              >\n                                <Eye className=\"w-3 h-3 mr-1\" />\n                                View Appraisal\n                              </Button>\n                            </div>\n                          </CardContent>\n                        </Card>\n                      );\n                    }\n                  })}\n              </div>\n            )}\n          </div>\n\n          <div className=\"lg:col-span-1\">\n            <LLMGuide\n              title=\"Staff Guide\"\n              subtitle=\"Management assistance\"\n              initialMessage=\"I can help you with managing staff appraisals. What would you like to know?\"\n              placeholder=\"Ask about staff/appraisals...\"\n            />\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":27728}},"version":1}